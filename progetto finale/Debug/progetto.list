
progetto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a874  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab54  0800ab54  0000bb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab58  0800ab58  0000bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800ab5c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000edf8  24000010  0800ab6c  0000c010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400ee08  0800ab6c  0000ce08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ab6c  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030c7  00000000  00000000  00026baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001358  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f0a  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039cb5  00000000  00000000  0002beda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cdc6  00000000  00000000  00065b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017651e  00000000  00000000  00082955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f8e73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000517c  00000000  00000000  001f8eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001fe034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800aaf4 	.word	0x0800aaf4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800aaf4 	.word	0x0800aaf4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <inizializzo_DMA>:
volatile int stop;
volatile int lost;
volatile int uno;
volatile int counter;

void inizializzo_DMA(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	DMA2_Stream0->M0AR = (uint32_t) &datiADCDMA;
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <inizializzo_DMA+0x60>)
 80005ce:	4a17      	ldr	r2, [pc, #92]	@ (800062c <inizializzo_DMA+0x64>)
 80005d0:	60da      	str	r2, [r3, #12]
	DMA1_Stream3->M0AR = (uint32_t) &datiADCDMA;
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <inizializzo_DMA+0x68>)
 80005d4:	4a15      	ldr	r2, [pc, #84]	@ (800062c <inizializzo_DMA+0x64>)
 80005d6:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->PAR = (uint32_t) &ADC3->DR;
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <inizializzo_DMA+0x60>)
 80005da:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <inizializzo_DMA+0x6c>)
 80005dc:	609a      	str	r2, [r3, #8]
	DMA1_Stream3->PAR = (uint32_t) &USART3->TDR;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <inizializzo_DMA+0x68>)
 80005e0:	4a15      	ldr	r2, [pc, #84]	@ (8000638 <inizializzo_DMA+0x70>)
 80005e2:	609a      	str	r2, [r3, #8]
	DMA2->LIFCR = 0xffffffff;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <inizializzo_DMA+0x74>)
 80005e6:	f04f 32ff 	mov.w	r2, #4294967295
 80005ea:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <inizializzo_DMA+0x74>)
 80005ee:	f04f 32ff 	mov.w	r2, #4294967295
 80005f2:	60da      	str	r2, [r3, #12]
	DMA1->LIFCR = 0xffffffff;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <inizializzo_DMA+0x78>)
 80005f6:	f04f 32ff 	mov.w	r2, #4294967295
 80005fa:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <inizializzo_DMA+0x78>)
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	60da      	str	r2, [r3, #12]
	DMA1_Stream3->CR |= DMA_SxCR_TCIE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <inizializzo_DMA+0x68>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a09      	ldr	r2, [pc, #36]	@ (8000630 <inizializzo_DMA+0x68>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
	//DMA2_Stream0->CR|=DMA_SxCR_TCIE;
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <inizializzo_DMA+0x60>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <inizializzo_DMA+0x60>)
 8000616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800061a:	6013      	str	r3, [r2, #0]

}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40020410 	.word	0x40020410
 800062c:	2400002c 	.word	0x2400002c
 8000630:	40020058 	.word	0x40020058
 8000634:	58026040 	.word	0x58026040
 8000638:	40004828 	.word	0x40004828
 800063c:	40020400 	.word	0x40020400
 8000640:	40020000 	.word	0x40020000

08000644 <inizializzo_USART>:
void inizializzo_USART(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_RE;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <inizializzo_USART+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <inizializzo_USART+0x64>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_TE;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <inizializzo_USART+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <inizializzo_USART+0x64>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_UE;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <inizializzo_USART+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a10      	ldr	r2, [pc, #64]	@ (80006a8 <inizializzo_USART+0x64>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]
	USART3->ICR |= USART_ICR_ORECF;
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <inizializzo_USART+0x64>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <inizializzo_USART+0x64>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <inizializzo_USART+0x64>)
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <inizializzo_USART+0x64>)
 800067e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000682:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <inizializzo_USART+0x64>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <inizializzo_USART+0x64>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <inizializzo_USART+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <inizializzo_USART+0x64>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6013      	str	r3, [r2, #0]

}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40004800 	.word	0x40004800

080006ac <interrupt_USART_DMA>:

void interrupt_USART_DMA(void) {
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

		DMA1->LIFCR = 0xffffffff;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <interrupt_USART_DMA+0x2c>)
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295
 80006b6:	609a      	str	r2, [r3, #8]
		DMA1->HIFCR = 0xffffffff;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <interrupt_USART_DMA+0x2c>)
 80006ba:	f04f 32ff 	mov.w	r2, #4294967295
 80006be:	60da      	str	r2, [r3, #12]
		DMA1_Stream3->CR &= ~DMA_SxCR_EN_Msk;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <interrupt_USART_DMA+0x30>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <interrupt_USART_DMA+0x30>)
 80006c6:	f023 0301 	bic.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]
/*		for(int i=0; i<1005; i++){
			datiADCDMA[i]=0;
		}*/
		//prova a far partire più vettori contemporaneamente gfyu

}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020058 	.word	0x40020058

080006e0 <inizializzo_ADC>:

void inizializzo_ADC(void) {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	ADC3->SQR1 = 0;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80006ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006ec:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);
 80006f2:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006f4:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC3->CR &= ~ADC_CR_ADCALDIF_Msk;
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <inizializzo_ADC+0xb4>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000704:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <inizializzo_ADC+0xb4>)
 800070c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000710:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN_Msk;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000728:	6093      	str	r3, [r2, #8]
	while (ADC3->CR & ADC_CR_ADCAL) {
 800072a:	bf00      	nop
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <inizializzo_ADC+0xb4>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dbfb      	blt.n	800072c <inizializzo_ADC+0x4c>
	}
	ADC3->ISR |= ADC_ISR_ADRDY;
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <inizializzo_ADC+0xb4>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	6093      	str	r3, [r2, #8]
	while (~ADC3->ISR & ADC_ISR_ADRDY) {
 800074c:	bf00      	nop
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <inizializzo_ADC+0x7e>
 800075a:	2301      	movs	r3, #1
 800075c:	e000      	b.n	8000760 <inizializzo_ADC+0x80>
 800075e:	2300      	movs	r3, #0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f4      	bne.n	800074e <inizializzo_ADC+0x6e>
	}
	ADC3->ISR |= ADC_ISR_ADRDY;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <inizializzo_ADC+0xb4>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]
	ADC3->IER |= ADC_IER_EOCIE;
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6053      	str	r3, [r2, #4]
	ADC3->CFGR |= 3 << ADC_CFGR_DMNGT_Pos;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <inizializzo_ADC+0xb4>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <inizializzo_ADC+0xb4>)
 8000782:	f043 0303 	orr.w	r3, r3, #3
 8000786:	60d3      	str	r3, [r2, #12]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58026000 	.word	0x58026000

08000798 <interrupt_ADC_DMA>:

void interrupt_ADC_DMA(void) {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	 DMA2_Stream0->CR&=~DMA_SxCR_EN_Msk;
	 DMA2->LIFCR=0xffffffff;
	 DMA2->HIFCR=0xffffffff;
	 USART3->CR3|=USART_CR3_DMAT;
	 DMA1_Stream3->CR|=DMA_SxCR_EN; */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007c2:	4a30      	ldr	r2, [pc, #192]	@ (8000884 <MX_ADC3_Init+0xdc>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007f2:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80007f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC3_Init+0xd8>)
 80007fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC3_Init+0xd8>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC3_Init+0xd8>)
 800081c:	2201      	movs	r2, #1
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000822:	f001 f8f9 	bl	8001a18 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 800082c:	f000 fb08 	bl	8000e40 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_ADC3_Init+0xd8>)
 8000838:	f001 f8ee 	bl	8001a18 <HAL_ADC_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 fafd 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_ADC3_Init+0xe0>)
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2306      	movs	r3, #6
 800084c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000852:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_ADC3_Init+0xd8>)
 800086a:	f001 fa77 	bl	8001d5c <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000874:	f000 fae4 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2400ebd0 	.word	0x2400ebd0
 8000884:	58026000 	.word	0x58026000
 8000888:	cb840000 	.word	0xcb840000

0800088c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b4      	sub	sp, #208	@ 0xd0
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	22c0      	movs	r2, #192	@ 0xc0
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00a f8fd 	bl	800aa9c <memset>
  if(adcHandle->Instance==ADC3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a43      	ldr	r2, [pc, #268]	@ (80009b4 <HAL_ADC_MspInit+0x128>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d17e      	bne.n	80009aa <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80008bc:	2312      	movs	r3, #18
 80008be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008cc:	23c0      	movs	r3, #192	@ 0xc0
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008d0:	2320      	movs	r3, #32
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80008d4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 fbe5 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 80008f0:	f000 faa6 	bl	8000e40 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008f4:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a2f      	ldr	r2, [pc, #188]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 80008fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a27      	ldr	r2, [pc, #156]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <HAL_ADC_MspInit+0x12c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000930:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000934:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000938:	f000 fecc 	bl	80016d4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 800093e:	4a20      	ldr	r2, [pc, #128]	@ (80009c0 <HAL_ADC_MspInit+0x134>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000942:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000944:	2273      	movs	r2, #115	@ 0x73
 8000946:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800095a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 800095e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000962:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800096a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800097e:	480f      	ldr	r0, [pc, #60]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000980:	f001 ff64 	bl	800284c <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800098a:	f000 fa59 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000992:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000994:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <HAL_ADC_MspInit+0x130>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	207f      	movs	r0, #127	@ 0x7f
 80009a0:	f001 ff1f 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80009a4:	207f      	movs	r0, #127	@ 0x7f
 80009a6:	f001 ff36 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009aa:	bf00      	nop
 80009ac:	37d0      	adds	r7, #208	@ 0xd0
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	58026000 	.word	0x58026000
 80009b8:	58024400 	.word	0x58024400
 80009bc:	2400ec34 	.word	0x2400ec34
 80009c0:	40020410 	.word	0x40020410

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_DMA_Init+0x6c>)
 80009fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f001 fee9 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a10:	200e      	movs	r0, #14
 8000a12:	f001 ff00 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2038      	movs	r0, #56	@ 0x38
 8000a1c:	f001 fee1 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a20:	2038      	movs	r0, #56	@ 0x38
 8000a22:	f001 fef8 	bl	8002816 <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	58024400 	.word	0x58024400

08000a34 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b90      	ldr	r3, [pc, #576]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	4a8e      	ldr	r2, [pc, #568]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a68:	4b88      	ldr	r3, [pc, #544]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a87      	ldr	r2, [pc, #540]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b84      	ldr	r3, [pc, #528]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b81      	ldr	r3, [pc, #516]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b7d      	ldr	r3, [pc, #500]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b79      	ldr	r3, [pc, #484]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	4a78      	ldr	r2, [pc, #480]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab4:	4b75      	ldr	r3, [pc, #468]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b72      	ldr	r3, [pc, #456]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	4a70      	ldr	r2, [pc, #448]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	4a69      	ldr	r2, [pc, #420]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af0:	4b66      	ldr	r3, [pc, #408]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	4b63      	ldr	r3, [pc, #396]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a61      	ldr	r2, [pc, #388]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000c8c <MX_GPIO_Init+0x258>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b22:	485b      	ldr	r0, [pc, #364]	@ (8000c90 <MX_GPIO_Init+0x25c>)
 8000b24:	f004 fa68 	bl	8004ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b2e:	4859      	ldr	r0, [pc, #356]	@ (8000c94 <MX_GPIO_Init+0x260>)
 8000b30:	f004 fa62 	bl	8004ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2102      	movs	r1, #2
 8000b38:	4857      	ldr	r0, [pc, #348]	@ (8000c98 <MX_GPIO_Init+0x264>)
 8000b3a:	f004 fa5d 	bl	8004ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4851      	ldr	r0, [pc, #324]	@ (8000c9c <MX_GPIO_Init+0x268>)
 8000b56:	f004 f89f 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b5a:	2332      	movs	r3, #50	@ 0x32
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4849      	ldr	r0, [pc, #292]	@ (8000c9c <MX_GPIO_Init+0x268>)
 8000b76:	f004 f88f 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b7a:	2386      	movs	r3, #134	@ 0x86
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4842      	ldr	r0, [pc, #264]	@ (8000ca0 <MX_GPIO_Init+0x26c>)
 8000b96:	f004 f87f 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b9a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4837      	ldr	r0, [pc, #220]	@ (8000c90 <MX_GPIO_Init+0x25c>)
 8000bb4:	f004 f870 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	482e      	ldr	r0, [pc, #184]	@ (8000c90 <MX_GPIO_Init+0x25c>)
 8000bd6:	f004 f85f 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4828      	ldr	r0, [pc, #160]	@ (8000c94 <MX_GPIO_Init+0x260>)
 8000bf4:	f004 f850 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bf8:	2380      	movs	r3, #128	@ 0x80
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4825      	ldr	r0, [pc, #148]	@ (8000ca4 <MX_GPIO_Init+0x270>)
 8000c0e:	f004 f843 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c12:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c24:	230a      	movs	r3, #10
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <MX_GPIO_Init+0x26c>)
 8000c30:	f004 f832 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <MX_GPIO_Init+0x270>)
 8000c52:	f004 f821 	bl	8004c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <MX_GPIO_Init+0x264>)
 8000c6e:	f004 f813 	bl	8004c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2028      	movs	r0, #40	@ 0x28
 8000c78:	f001 fdb3 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c7c:	2028      	movs	r0, #40	@ 0x28
 8000c7e:	f001 fdca 	bl	8002816 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3730      	adds	r7, #48	@ 0x30
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020400 	.word	0x58020400
 8000c94:	58020c00 	.word	0x58020c00
 8000c98:	58021000 	.word	0x58021000
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	58020000 	.word	0x58020000
 8000ca4:	58021800 	.word	0x58021800

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fc74 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f818 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f7ff febe 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f7ff fe84 	bl	80009c4 <MX_DMA_Init>
  MX_TIM6_Init();
 8000cbc:	f000 faf4 	bl	80012a8 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000cc0:	f7ff fd72 	bl	80007a8 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000cc4:	f000 fb4e 	bl	8001364 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM6->ARR=165;             //ottimizzato 155/165
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <main+0x38>)
 8000cca:	22a5      	movs	r2, #165	@ 0xa5
 8000ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  inizializzo_USART();
 8000cce:	f7ff fcb9 	bl	8000644 <inizializzo_USART>
  inizializzo_DMA();
 8000cd2:	f7ff fc79 	bl	80005c8 <inizializzo_DMA>
  inizializzo_ADC();
 8000cd6:	f7ff fd03 	bl	80006e0 <inizializzo_ADC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cda:	bf00      	nop
 8000cdc:	e7fd      	b.n	8000cda <main+0x32>
 8000cde:	bf00      	nop
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09e      	sub	sp, #120	@ 0x78
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	224c      	movs	r2, #76	@ 0x4c
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f009 fed2 	bl	800aa9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fecb 	bl	800aa9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d06:	2002      	movs	r0, #2
 8000d08:	f004 f9b4 	bl	8005074 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b48      	ldr	r3, [pc, #288]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d14:	4a47      	ldr	r2, [pc, #284]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d1c:	4b45      	ldr	r3, [pc, #276]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b44      	ldr	r3, [pc, #272]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a43      	ldr	r2, [pc, #268]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d3e:	bf00      	nop
 8000d40:	4b3d      	ldr	r3, [pc, #244]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d4c:	d1f8      	bne.n	8000d40 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e3c <SystemClock_Config+0x158>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d54:	4a39      	ldr	r2, [pc, #228]	@ (8000e3c <SystemClock_Config+0x158>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d5e:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <SystemClock_Config+0x158>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a30      	ldr	r2, [pc, #192]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <SystemClock_Config+0x154>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d92:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <SystemClock_Config+0x150>)
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d9e:	bf00      	nop
 8000da0:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <SystemClock_Config+0x154>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dac:	d1f8      	bne.n	8000da0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000db2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000dc4:	2378      	movs	r3, #120	@ 0x78
 8000dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f97f 	bl	80050e8 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000df0:	f000 f826 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	233f      	movs	r3, #63	@ 0x3f
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e00:	2308      	movs	r3, #8
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e04:	2340      	movs	r3, #64	@ 0x40
 8000e06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e08:	2340      	movs	r3, #64	@ 0x40
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fdbd 	bl	800599c <HAL_RCC_ClockConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e28:	f000 f80a 	bl	8000e40 <Error_Handler>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3778      	adds	r7, #120	@ 0x78
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58000400 	.word	0x58000400
 8000e38:	58024800 	.word	0x58024800
 8000e3c:	58024400 	.word	0x58024400

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <Error_Handler+0x8>

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_MspInit+0x30>)
 8000e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_MspInit+0x30>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_MspInit+0x30>)
 8000e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 fbd1 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	interrupt_USART_DMA();
 8000ee4:	f7ff fbe2 	bl	80006ac <interrupt_USART_DMA>
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <DMA1_Stream3_IRQHandler+0x14>)
 8000eea:	f002 fd6f 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2400ed8c 	.word	0x2400ed8c

08000ef8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//interrupt_USART();
	if ( USART3->ISR & USART_ISR_RXNE_RXFNE) {
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <USART3_IRQHandler+0x84>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02e      	beq.n	8000f66 <USART3_IRQHandler+0x6e>
				if (USART3->RDR=='\r'){
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <USART3_IRQHandler+0x84>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0c:	2b0d      	cmp	r3, #13
 8000f0e:	d130      	bne.n	8000f72 <USART3_IRQHandler+0x7a>
					DMA2_Stream0->NDTR=lun;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <USART3_IRQHandler+0x88>)
 8000f12:	22c8      	movs	r2, #200	@ 0xc8
 8000f14:	605a      	str	r2, [r3, #4]
					DMA1_Stream3->NDTR=(lun+1)*2;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <USART3_IRQHandler+0x8c>)
 8000f18:	f44f 72c9 	mov.w	r2, #402	@ 0x192
 8000f1c:	605a      	str	r2, [r3, #4]
					DMA2_Stream0->M0AR = (uint32_t) &datiADCDMA[0];
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <USART3_IRQHandler+0x88>)
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <USART3_IRQHandler+0x90>)
 8000f22:	60da      	str	r2, [r3, #12]
					DMA2->LIFCR = 0xffffffff;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <USART3_IRQHandler+0x94>)
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2a:	609a      	str	r2, [r3, #8]
					DMA2->HIFCR = 0xffffffff;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <USART3_IRQHandler+0x94>)
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	60da      	str	r2, [r3, #12]
					ADC3->CFGR|=(3<<ADC_CFGR_DMNGT_Pos);
 8000f34:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <USART3_IRQHandler+0x98>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <USART3_IRQHandler+0x98>)
 8000f3a:	f043 0303 	orr.w	r3, r3, #3
 8000f3e:	60d3      	str	r3, [r2, #12]
					DMA2_Stream0->CR|=DMA_SxCR_EN;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <USART3_IRQHandler+0x88>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <USART3_IRQHandler+0x88>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]
					ADC3->CR|=ADC_CR_ADSTART;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <USART3_IRQHandler+0x98>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <USART3_IRQHandler+0x98>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6093      	str	r3, [r2, #8]
					TIM6->CR1|=TIM_CR1_CEN;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <USART3_IRQHandler+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <USART3_IRQHandler+0x9c>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	e005      	b.n	8000f72 <USART3_IRQHandler+0x7a>
				}

			} else {
				USART3->RQR |= USART_RQR_RXFRQ;
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <USART3_IRQHandler+0x84>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <USART3_IRQHandler+0x84>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6193      	str	r3, [r2, #24]
			}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <USART3_IRQHandler+0xa0>)
 8000f74:	f008 f8ce 	bl	8009114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40004800 	.word	0x40004800
 8000f80:	40020410 	.word	0x40020410
 8000f84:	40020058 	.word	0x40020058
 8000f88:	2400002c 	.word	0x2400002c
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	58026000 	.word	0x58026000
 8000f94:	40001000 	.word	0x40001000
 8000f98:	2400ecf8 	.word	0x2400ecf8

08000f9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fa0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fa4:	f004 f841 	bl	800502a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <TIM6_DAC_IRQHandler+0x10>)
 8000fb2:	f007 fdd4 	bl	8008b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2400ecac 	.word	0x2400ecac

08000fc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	interrupt_ADC_DMA();
 8000fc4:	f7ff fbe8 	bl	8000798 <interrupt_ADC_DMA>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA2_Stream0_IRQHandler+0x14>)
 8000fca:	f002 fcff 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2400ec34 	.word	0x2400ec34

08000fd8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
//	interrupt_ADC();
	if(counter<100){
 8000fdc:	4b61      	ldr	r3, [pc, #388]	@ (8001164 <ADC3_IRQHandler+0x18c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b63      	cmp	r3, #99	@ 0x63
 8000fe2:	dc0b      	bgt.n	8000ffc <ADC3_IRQHandler+0x24>
			counter++;
 8000fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8001164 <ADC3_IRQHandler+0x18c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a5e      	ldr	r2, [pc, #376]	@ (8001164 <ADC3_IRQHandler+0x18c>)
 8000fec:	6013      	str	r3, [r2, #0]
			ADC3->ISR|=ADC_ISR_EOC;
 8000fee:	4b5e      	ldr	r3, [pc, #376]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6013      	str	r3, [r2, #0]
 if(0){
  /* USER CODE END ADC3_IRQn 0 */
HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
}
 8000ffa:	e0ae      	b.n	800115a <ADC3_IRQHandler+0x182>
			if((ADC3->DR)<trigger1){
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 8001004:	d802      	bhi.n	800100c <ADC3_IRQHandler+0x34>
				state=1;
 8001006:	4b59      	ldr	r3, [pc, #356]	@ (800116c <ADC3_IRQHandler+0x194>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
			if(state==1&&(ADC3->DR)>trigger2){
 800100c:	4b57      	ldr	r3, [pc, #348]	@ (800116c <ADC3_IRQHandler+0x194>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d110      	bne.n	8001036 <ADC3_IRQHandler+0x5e>
 8001014:	4b54      	ldr	r3, [pc, #336]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f640 62bd 	movw	r2, #3773	@ 0xebd
 800101c:	4293      	cmp	r3, r2
 800101e:	d90a      	bls.n	8001036 <ADC3_IRQHandler+0x5e>
				MISURA++;
 8001020:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <ADC3_IRQHandler+0x198>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <ADC3_IRQHandler+0x198>)
 8001028:	6013      	str	r3, [r2, #0]
				statee=1;
 800102a:	4b52      	ldr	r3, [pc, #328]	@ (8001174 <ADC3_IRQHandler+0x19c>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
				state=0;
 8001030:	4b4e      	ldr	r3, [pc, #312]	@ (800116c <ADC3_IRQHandler+0x194>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
			if(statee==1&&MISURA<post){
 8001036:	4b4f      	ldr	r3, [pc, #316]	@ (8001174 <ADC3_IRQHandler+0x19c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10e      	bne.n	800105c <ADC3_IRQHandler+0x84>
 800103e:	4b4c      	ldr	r3, [pc, #304]	@ (8001170 <ADC3_IRQHandler+0x198>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2bb3      	cmp	r3, #179	@ 0xb3
 8001044:	dc0a      	bgt.n	800105c <ADC3_IRQHandler+0x84>
				MISURA++;
 8001046:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <ADC3_IRQHandler+0x198>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a48      	ldr	r2, [pc, #288]	@ (8001170 <ADC3_IRQHandler+0x198>)
 800104e:	6013      	str	r3, [r2, #0]
				ADC3->ISR|=ADC_ISR_EOC;
 8001050:	4b45      	ldr	r3, [pc, #276]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a44      	ldr	r2, [pc, #272]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6013      	str	r3, [r2, #0]
			if(MISURA==post){
 800105c:	4b44      	ldr	r3, [pc, #272]	@ (8001170 <ADC3_IRQHandler+0x198>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2bb4      	cmp	r3, #180	@ 0xb4
 8001062:	d17a      	bne.n	800115a <ADC3_IRQHandler+0x182>
				TIM6->CR1&=~TIM_CR1_CEN_Msk;
 8001064:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <ADC3_IRQHandler+0x1a0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a43      	ldr	r2, [pc, #268]	@ (8001178 <ADC3_IRQHandler+0x1a0>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]
				stop=lun-(DMA2_Stream0->NDTR); //aggiunta di uno
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001078:	461a      	mov	r2, r3
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <ADC3_IRQHandler+0x1a8>)
 800107c:	601a      	str	r2, [r3, #0]
				statee=0;
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <ADC3_IRQHandler+0x19c>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
				MISURA=0;
 8001084:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <ADC3_IRQHandler+0x198>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
				counter=0;
 800108a:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <ADC3_IRQHandler+0x18c>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
				datiADCDMA[(lun*aggiunta)+rou]=stop;
 8001090:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <ADC3_IRQHandler+0x1a8>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	4b3b      	ldr	r3, [pc, #236]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	f247 5330 	movw	r3, #30000	@ 0x7530
 800109c:	4413      	add	r3, r2
 800109e:	b289      	uxth	r1, r1
 80010a0:	4a39      	ldr	r2, [pc, #228]	@ (8001188 <ADC3_IRQHandler+0x1b0>)
 80010a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				ADC3->ISR|=ADC_ISR_EOC;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <ADC3_IRQHandler+0x190>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001168 <ADC3_IRQHandler+0x190>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6013      	str	r3, [r2, #0]
				if (rou < aggiunta - 1) {
 80010b2:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b94      	cmp	r3, #148	@ 0x94
 80010b8:	dc39      	bgt.n	800112e <ADC3_IRQHandler+0x156>
					DMA2_Stream0->CR &=~DMA_SxCR_EN_Msk;
 80010ba:	4b30      	ldr	r3, [pc, #192]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6013      	str	r3, [r2, #0]
					DMA2_Stream0->M0AR = (uint32_t) &datiADCDMA[lun*(rou+1)];
 80010c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	22c8      	movs	r2, #200	@ 0xc8
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001188 <ADC3_IRQHandler+0x1b0>)
 80010d6:	441a      	add	r2, r3
 80010d8:	4b28      	ldr	r3, [pc, #160]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 80010da:	60da      	str	r2, [r3, #12]
					DMA2->LIFCR = 0xffffffff;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <ADC3_IRQHandler+0x1b4>)
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	609a      	str	r2, [r3, #8]
					DMA2->HIFCR = 0xffffffff;
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <ADC3_IRQHandler+0x1b4>)
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ea:	60da      	str	r2, [r3, #12]
					DMA2_Stream0->NDTR = lun;
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 80010ee:	22c8      	movs	r2, #200	@ 0xc8
 80010f0:	605a      	str	r2, [r3, #4]
					ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <ADC3_IRQHandler+0x190>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <ADC3_IRQHandler+0x190>)
 80010f8:	f043 0303 	orr.w	r3, r3, #3
 80010fc:	60d3      	str	r3, [r2, #12]
					DMA2_Stream0->CR |= DMA_SxCR_EN;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <ADC3_IRQHandler+0x1a4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6013      	str	r3, [r2, #0]
					ADC3->CR |= ADC_CR_ADSTART;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <ADC3_IRQHandler+0x190>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <ADC3_IRQHandler+0x190>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6093      	str	r3, [r2, #8]
					TIM6->CR1 |= TIM_CR1_CEN;
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <ADC3_IRQHandler+0x1a0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <ADC3_IRQHandler+0x1a0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]
					rou++;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	e015      	b.n	800115a <ADC3_IRQHandler+0x182>
					rou=0;
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <ADC3_IRQHandler+0x1ac>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
					DMA1_Stream3->NDTR = (lun + 1)*2*aggiunta;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <ADC3_IRQHandler+0x1b8>)
 8001136:	f64e 328c 	movw	r2, #60300	@ 0xeb8c
 800113a:	605a      	str	r2, [r3, #4]
					DMA1_Stream3->M0AR = (uint32_t) &datiADCDMA;
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ADC3_IRQHandler+0x1b8>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <ADC3_IRQHandler+0x1b0>)
 8001140:	60da      	str	r2, [r3, #12]
					USART3->CR3|=USART_CR3_DMAT;
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <ADC3_IRQHandler+0x1bc>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <ADC3_IRQHandler+0x1bc>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	6093      	str	r3, [r2, #8]
					DMA1_Stream3->CR|=DMA_SxCR_EN;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <ADC3_IRQHandler+0x1b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <ADC3_IRQHandler+0x1b8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	2400ebcc 	.word	0x2400ebcc
 8001168:	58026000 	.word	0x58026000
 800116c:	2400ebb8 	.word	0x2400ebb8
 8001170:	2400ebc0 	.word	0x2400ebc0
 8001174:	2400ebbc 	.word	0x2400ebbc
 8001178:	40001000 	.word	0x40001000
 800117c:	40020410 	.word	0x40020410
 8001180:	2400ebc8 	.word	0x2400ebc8
 8001184:	2400ebc4 	.word	0x2400ebc4
 8001188:	2400002c 	.word	0x2400002c
 800118c:	40020400 	.word	0x40020400
 8001190:	40020058 	.word	0x40020058
 8001194:	40004800 	.word	0x40004800

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <SystemInit+0xe4>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a36      	ldr	r2, [pc, #216]	@ (800127c <SystemInit+0xe4>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ac:	4b34      	ldr	r3, [pc, #208]	@ (8001280 <SystemInit+0xe8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2b06      	cmp	r3, #6
 80011b6:	d807      	bhi.n	80011c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <SystemInit+0xe8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f023 030f 	bic.w	r3, r3, #15
 80011c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <SystemInit+0xe8>)
 80011c2:	f043 0307 	orr.w	r3, r3, #7
 80011c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <SystemInit+0xec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001284 <SystemInit+0xec>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <SystemInit+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <SystemInit+0xec>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4929      	ldr	r1, [pc, #164]	@ (8001284 <SystemInit+0xec>)
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <SystemInit+0xf0>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <SystemInit+0xe8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f2:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <SystemInit+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 030f 	bic.w	r3, r3, #15
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <SystemInit+0xe8>)
 80011fc:	f043 0307 	orr.w	r3, r3, #7
 8001200:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <SystemInit+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <SystemInit+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <SystemInit+0xec>)
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <SystemInit+0xf4>)
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <SystemInit+0xec>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <SystemInit+0xf8>)
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <SystemInit+0xec>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <SystemInit+0xfc>)
 8001224:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <SystemInit+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <SystemInit+0xec>)
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <SystemInit+0xfc>)
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <SystemInit+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <SystemInit+0xec>)
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <SystemInit+0xfc>)
 800123c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <SystemInit+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <SystemInit+0xec>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <SystemInit+0x100>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <SystemInit+0x104>)
 800125c:	4013      	ands	r3, r2
 800125e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001262:	d202      	bcs.n	800126a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <SystemInit+0x108>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <SystemInit+0x10c>)
 800126c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001270:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	52002000 	.word	0x52002000
 8001284:	58024400 	.word	0x58024400
 8001288:	eaf6ed7f 	.word	0xeaf6ed7f
 800128c:	02020200 	.word	0x02020200
 8001290:	01ff0000 	.word	0x01ff0000
 8001294:	01010280 	.word	0x01010280
 8001298:	5c001000 	.word	0x5c001000
 800129c:	ffff0000 	.word	0xffff0000
 80012a0:	51008108 	.word	0x51008108
 80012a4:	52004000 	.word	0x52004000

080012a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_TIM6_Init+0x64>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_TIM6_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_TIM6_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_TIM6_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_TIM6_Init+0x64>)
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_TIM6_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM6_Init+0x64>)
 80012da:	f007 fbe9 	bl	8008ab0 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e4:	f7ff fdac 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e8:	2320      	movs	r3, #32
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM6_Init+0x64>)
 80012f6:	f007 fe11 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001300:	f7ff fd9e 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2400ecac 	.word	0x2400ecac
 8001310:	40001000 	.word	0x40001000

08001314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d116      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 8001328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800132c:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2036      	movs	r0, #54	@ 0x36
 800134a:	f001 fa4a 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800134e:	2036      	movs	r0, #54	@ 0x36
 8001350:	f001 fa61 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40001000 	.word	0x40001000
 8001360:	58024400 	.word	0x58024400

08001364 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 800136a:	4a23      	ldr	r2, [pc, #140]	@ (80013f8 <MX_USART3_UART_Init+0x94>)
 800136c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 8001370:	4a22      	ldr	r2, [pc, #136]	@ (80013fc <MX_USART3_UART_Init+0x98>)
 8001372:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001380:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 8001388:	220c      	movs	r2, #12
 800138a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013aa:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013ac:	f007 fe62 	bl	8009074 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80013b6:	f7ff fd43 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013be:	f009 faa3 	bl	800a908 <HAL_UARTEx_SetTxFifoThreshold>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80013c8:	f7ff fd3a 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013d0:	f009 fad8 	bl	800a984 <HAL_UARTEx_SetRxFifoThreshold>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80013da:	f7ff fd31 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART3_UART_Init+0x90>)
 80013e0:	f009 fa59 	bl	800a896 <HAL_UARTEx_DisableFifoMode>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80013ea:	f7ff fd29 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2400ecf8 	.word	0x2400ecf8
 80013f8:	40004800 	.word	0x40004800
 80013fc:	000f4240 	.word	0x000f4240

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ba      	sub	sp, #232	@ 0xe8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	22c0      	movs	r2, #192	@ 0xc0
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f009 fb3b 	bl	800aa9c <memset>
  if(uartHandle->Instance==USART3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a41      	ldr	r2, [pc, #260]	@ (8001530 <HAL_UART_MspInit+0x130>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d17b      	bne.n	8001528 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001430:	f04f 0202 	mov.w	r2, #2
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fe34 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001452:	f7ff fcf5 	bl	8000e40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_UART_MspInit+0x134>)
 8001458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800145c:	4a35      	ldr	r2, [pc, #212]	@ (8001534 <HAL_UART_MspInit+0x134>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001462:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_UART_MspInit+0x134>)
 8001468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800146c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <HAL_UART_MspInit+0x134>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_UART_MspInit+0x134>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_UART_MspInit+0x134>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|STLINK_RX_Pin;
 8001492:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ac:	2307      	movs	r3, #7
 80014ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014b6:	4619      	mov	r1, r3
 80014b8:	481f      	ldr	r0, [pc, #124]	@ (8001538 <HAL_UART_MspInit+0x138>)
 80014ba:	f003 fbed 	bl	8004c98 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80014be:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <HAL_UART_MspInit+0x140>)
 80014c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014c6:	222e      	movs	r2, #46	@ 0x2e
 80014c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014cc:	2240      	movs	r2, #64	@ 0x40
 80014ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014fc:	480f      	ldr	r0, [pc, #60]	@ (800153c <HAL_UART_MspInit+0x13c>)
 80014fe:	f001 f9a5 	bl	800284c <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001508:	f7ff fc9a 	bl	8000e40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_UART_MspInit+0x13c>)
 8001510:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_UART_MspInit+0x13c>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2027      	movs	r0, #39	@ 0x27
 800151e:	f001 f960 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001522:	2027      	movs	r0, #39	@ 0x27
 8001524:	f001 f977 	bl	8002816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	37e8      	adds	r7, #232	@ 0xe8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004800 	.word	0x40004800
 8001534:	58024400 	.word	0x58024400
 8001538:	58020c00 	.word	0x58020c00
 800153c:	2400ed8c 	.word	0x2400ed8c
 8001540:	40020058 	.word	0x40020058

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800157c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001548:	f7ff fe26 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	@ (8001584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	@ (8001590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f009 fa9b 	bl	800aaac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fb97 	bl	8000ca8 <main>
  bx  lr
 800157a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001580:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001584:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001588:	0800ab5c 	.word	0x0800ab5c
  ldr r2, =_sbss
 800158c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001590:	2400ee08 	.word	0x2400ee08

08001594 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f001 f914 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015a4:	f004 fbb0 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_Init+0x68>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	4913      	ldr	r1, [pc, #76]	@ (8001604 <HAL_Init+0x6c>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_Init+0x68>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_Init+0x6c>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_Init+0x70>)
 80015da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015dc:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <HAL_Init+0x74>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f814 	bl	8001610 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e002      	b.n	80015f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fc2b 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024400 	.word	0x58024400
 8001604:	0800ab0c 	.word	0x0800ab0c
 8001608:	24000004 	.word	0x24000004
 800160c:	24000000 	.word	0x24000000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_InitTick+0x60>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e021      	b.n	8001668 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_InitTick+0x64>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_InitTick+0x60>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f001 f8f9 	bl	8002832 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f001 f8c3 	bl	80027e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <HAL_InitTick+0x68>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400000c 	.word	0x2400000c
 8001674:	24000000 	.word	0x24000000
 8001678:	24000008 	.word	0x24000008

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2400000c 	.word	0x2400000c
 80016a0:	2400ee04 	.word	0x2400ee04

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2400ee04 	.word	0x2400ee04

080016bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetREVID+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0c1b      	lsrs	r3, r3, #16
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	5c001000 	.word	0x5c001000

080016d4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	4904      	ldr	r1, [pc, #16]	@ (80016fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3360      	adds	r3, #96	@ 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	611a      	str	r2, [r3, #16]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017da:	b480      	push	{r7}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3360      	adds	r3, #96	@ 0x60
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
  }
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3330      	adds	r3, #48	@ 0x30
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	211f      	movs	r1, #31
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0e9b      	lsrs	r3, r3, #26
 8001848:	f003 011f 	and.w	r1, r3, #31
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3314      	adds	r3, #20
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	0e5b      	lsrs	r3, r3, #25
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	0d1b      	lsrs	r3, r3, #20
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2107      	movs	r1, #7
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	0d1b      	lsrs	r3, r3, #20
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0318 	and.w	r3, r3, #24
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	000fffff 	.word	0x000fffff

08001908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6093      	str	r3, [r2, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	5fffffc0 	.word	0x5fffffc0

0800192c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800193c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001940:	d101      	bne.n	8001946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <LL_ADC_EnableInternalRegulator+0x24>)
 8001962:	4013      	ands	r3, r2
 8001964:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	6fffffc0 	.word	0x6fffffc0

0800197c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <LL_ADC_IsEnabled+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_IsEnabled+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e18f      	b.n	8001d52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe ff23 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff67 	bl	800192c <LL_ADC_IsDeepPowerDownEnabled>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff4d 	bl	8001908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff82 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d114      	bne.n	8001aa8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff66 	bl	8001954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a88:	4b87      	ldr	r3, [pc, #540]	@ (8001ca8 <HAL_ADC_Init+0x290>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	4a87      	ldr	r2, [pc, #540]	@ (8001cac <HAL_ADC_Init+0x294>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff65 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abc:	f043 0210 	orr.w	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff76 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001ade:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 8129 	bne.w	8001d40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 8125 	bne.w	8001d40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001afa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001afe:	f043 0202 	orr.w	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff4a 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d136      	bne.n	8001b84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a65      	ldr	r2, [pc, #404]	@ (8001cb0 <HAL_ADC_Init+0x298>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x112>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a63      	ldr	r2, [pc, #396]	@ (8001cb4 <HAL_ADC_Init+0x29c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10e      	bne.n	8001b48 <HAL_ADC_Init+0x130>
 8001b2a:	4861      	ldr	r0, [pc, #388]	@ (8001cb0 <HAL_ADC_Init+0x298>)
 8001b2c:	f7ff ff3a 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b30:	4604      	mov	r4, r0
 8001b32:	4860      	ldr	r0, [pc, #384]	@ (8001cb4 <HAL_ADC_Init+0x29c>)
 8001b34:	f7ff ff36 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4323      	orrs	r3, r4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e008      	b.n	8001b5a <HAL_ADC_Init+0x142>
 8001b48:	485b      	ldr	r0, [pc, #364]	@ (8001cb8 <HAL_ADC_Init+0x2a0>)
 8001b4a:	f7ff ff2b 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a53      	ldr	r2, [pc, #332]	@ (8001cb0 <HAL_ADC_Init+0x298>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_ADC_Init+0x15a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	@ (8001cb4 <HAL_ADC_Init+0x29c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x15e>
 8001b72:	4a52      	ldr	r2, [pc, #328]	@ (8001cbc <HAL_ADC_Init+0x2a4>)
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_Init+0x160>
 8001b76:	4a52      	ldr	r2, [pc, #328]	@ (8001cc0 <HAL_ADC_Init+0x2a8>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7ff fdbe 	bl	8001700 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b84:	f7ff fd9a 	bl	80016bc <HAL_GetREVID>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d914      	bls.n	8001bbc <HAL_ADC_Init+0x1a4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d110      	bne.n	8001bbc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7d5b      	ldrb	r3, [r3, #21]
 8001b9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ba4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001baa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7f1b      	ldrb	r3, [r3, #28]
 8001bb0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bb2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bb4:	f043 030c 	orr.w	r3, r3, #12
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e00d      	b.n	8001bd8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7d5b      	ldrb	r3, [r3, #21]
 8001bc0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bc6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bcc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7f1b      	ldrb	r3, [r3, #28]
 8001bd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	045b      	lsls	r3, r3, #17
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_ADC_Init+0x2ac>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	69b9      	ldr	r1, [r7, #24]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fed1 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001c28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fede 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 8001c34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d15f      	bne.n	8001cfc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d15c      	bne.n	8001cfc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7d1b      	ldrb	r3, [r3, #20]
 8001c46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_ADC_Init+0x2b0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	430b      	orrs	r3, r1
 8001c62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d130      	bne.n	8001cd0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_ADC_Init+0x2b4>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c82:	3a01      	subs	r2, #1
 8001c84:	0411      	lsls	r1, r2, #16
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c96:	430a      	orrs	r2, r1
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	e01c      	b.n	8001ce0 <HAL_ADC_Init+0x2c8>
 8001ca6:	bf00      	nop
 8001ca8:	24000000 	.word	0x24000000
 8001cac:	053e2d63 	.word	0x053e2d63
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022100 	.word	0x40022100
 8001cb8:	58026000 	.word	0x58026000
 8001cbc:	40022300 	.word	0x40022300
 8001cc0:	58026300 	.word	0x58026300
 8001cc4:	fff0c003 	.word	0xfff0c003
 8001cc8:	ffffbffc 	.word	0xffffbffc
 8001ccc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fb8c 	bl	8002414 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10c      	bne.n	8001d1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f023 010f 	bic.w	r1, r3, #15
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d1c:	e007      	b.n	8001d2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 020f 	bic.w	r2, r2, #15
 8001d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d32:	f023 0303 	bic.w	r3, r3, #3
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d3e:	e007      	b.n	8001d50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	bf00      	nop

08001d5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b0a1      	sub	sp, #132	@ 0x84
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a65      	ldr	r2, [pc, #404]	@ (8001f0c <HAL_ADC_ConfigChannel+0x1b0>)
 8001d76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x2a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e32e      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x688>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fe19 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8313 	bne.w	80023c6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db2c      	blt.n	8001e02 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x6a>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	e016      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x98>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001de2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2201      	movs	r2, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	69d1      	ldr	r1, [r2, #28]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fcfe 	bl	8001810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fdd6 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fde3 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 8001e2a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80b8 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 80b4 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f7ff fd0d 	bl	8001868 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e4e:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <HAL_ADC_ConfigChannel+0x1b4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e5a:	d10b      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x118>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	e01d      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x154>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x13e>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	e00a      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x154>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d02c      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6919      	ldr	r1, [r3, #16]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec8:	f7ff fc4e 	bl	8001768 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7e5b      	ldrb	r3, [r3, #25]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x186>
 8001edc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ee0:	e000      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x188>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f7ff fc78 	bl	80017da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7e1b      	ldrb	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1a4>
 8001efa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x1a6>
 8001f00:	2300      	movs	r3, #0
 8001f02:	461a      	mov	r2, r3
 8001f04:	f7ff fc50 	bl	80017a8 <LL_ADC_SetDataRightShift>
 8001f08:	e04c      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
 8001f0a:	bf00      	nop
 8001f0c:	47ff0000 	.word	0x47ff0000
 8001f10:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	069b      	lsls	r3, r3, #26
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f36:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	069b      	lsls	r3, r3, #26
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f5a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f7e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fcfb 	bl	80019a4 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8211 	bne.w	80023d8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f7ff fc7c 	bl	80018c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4aa1      	ldr	r2, [pc, #644]	@ (8002254 <HAL_ADC_ConfigChannel+0x4f8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f040 812e 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x2a0>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	3301      	adds	r3, #1
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e019      	b.n	8002030 <HAL_ADC_ConfigChannel+0x2d4>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800200a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800200e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2b09      	cmp	r3, #9
 8002028:	bf94      	ite	ls
 800202a:	2301      	movls	r3, #1
 800202c:	2300      	movhi	r3, #0
 800202e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002030:	2b00      	cmp	r3, #0
 8002032:	d079      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x2f4>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0e9b      	lsrs	r3, r3, #26
 8002046:	3301      	adds	r3, #1
 8002048:	069b      	lsls	r3, r3, #26
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204e:	e015      	b.n	800207c <HAL_ADC_ConfigChannel+0x320>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800205e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002060:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e003      	b.n	8002074 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800206c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3301      	adds	r3, #1
 8002076:	069b      	lsls	r3, r3, #26
 8002078:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_ConfigChannel+0x340>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	3301      	adds	r3, #1
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	e017      	b.n	80020cc <HAL_ADC_ConfigChannel+0x370>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80020aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80020ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e003      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80020b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	ea42 0103 	orr.w	r1, r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x396>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0e9b      	lsrs	r3, r3, #26
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	051b      	lsls	r3, r3, #20
 80020f0:	e018      	b.n	8002124 <HAL_ADC_ConfigChannel+0x3c8>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e003      	b.n	8002116 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800210e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	430b      	orrs	r3, r1
 8002126:	e07e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x3e8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002142:	e015      	b.n	8002170 <HAL_ADC_ConfigChannel+0x414>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x434>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	e017      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x464>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	61bb      	str	r3, [r7, #24]
  return result;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	ea42 0103 	orr.w	r1, r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x490>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	3b1e      	subs	r3, #30
 80021e4:	051b      	lsls	r3, r3, #20
 80021e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	e01b      	b.n	8002224 <HAL_ADC_ConfigChannel+0x4c8>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	60fb      	str	r3, [r7, #12]
  return result;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e003      	b.n	8002210 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3301      	adds	r3, #1
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	3b1e      	subs	r3, #30
 800221e:	051b      	lsls	r3, r3, #20
 8002220:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002224:	430b      	orrs	r3, r1
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	4619      	mov	r1, r3
 800222c:	f7ff fb1c 	bl	8001868 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f280 80cf 	bge.w	80023d8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a06      	ldr	r2, [pc, #24]	@ (8002258 <HAL_ADC_ConfigChannel+0x4fc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_ConfigChannel+0x4f2>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	@ (800225c <HAL_ADC_ConfigChannel+0x500>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x508>
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <HAL_ADC_ConfigChannel+0x504>)
 8002250:	e009      	b.n	8002266 <HAL_ADC_ConfigChannel+0x50a>
 8002252:	bf00      	nop
 8002254:	47ff0000 	.word	0x47ff0000
 8002258:	40022000 	.word	0x40022000
 800225c:	40022100 	.word	0x40022100
 8002260:	40022300 	.word	0x40022300
 8002264:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <HAL_ADC_ConfigChannel+0x690>)
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fa70 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 800226c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5f      	ldr	r2, [pc, #380]	@ (80023f0 <HAL_ADC_ConfigChannel+0x694>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x526>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5d      	ldr	r2, [pc, #372]	@ (80023f4 <HAL_ADC_ConfigChannel+0x698>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10e      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x544>
 8002282:	485b      	ldr	r0, [pc, #364]	@ (80023f0 <HAL_ADC_ConfigChannel+0x694>)
 8002284:	f7ff fb8e 	bl	80019a4 <LL_ADC_IsEnabled>
 8002288:	4604      	mov	r4, r0
 800228a:	485a      	ldr	r0, [pc, #360]	@ (80023f4 <HAL_ADC_ConfigChannel+0x698>)
 800228c:	f7ff fb8a 	bl	80019a4 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e008      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x556>
 80022a0:	4855      	ldr	r0, [pc, #340]	@ (80023f8 <HAL_ADC_ConfigChannel+0x69c>)
 80022a2:	f7ff fb7f 	bl	80019a4 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d07d      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <HAL_ADC_ConfigChannel+0x6a0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d130      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x5c6>
 80022c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d12b      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4a      	ldr	r2, [pc, #296]	@ (80023f8 <HAL_ADC_ConfigChannel+0x69c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f040 8081 	bne.w	80023d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a45      	ldr	r2, [pc, #276]	@ (80023f0 <HAL_ADC_ConfigChannel+0x694>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x58e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a43      	ldr	r2, [pc, #268]	@ (80023f4 <HAL_ADC_ConfigChannel+0x698>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x592>
 80022ea:	4a45      	ldr	r2, [pc, #276]	@ (8002400 <HAL_ADC_ConfigChannel+0x6a4>)
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x594>
 80022ee:	4a3f      	ldr	r2, [pc, #252]	@ (80023ec <HAL_ADC_ConfigChannel+0x690>)
 80022f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7ff fa14 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <HAL_ADC_ConfigChannel+0x6a8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	4a40      	ldr	r2, [pc, #256]	@ (8002408 <HAL_ADC_ConfigChannel+0x6ac>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002312:	e002      	b.n	800231a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002320:	e05a      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a39      	ldr	r2, [pc, #228]	@ (800240c <HAL_ADC_ConfigChannel+0x6b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11e      	bne.n	800236a <HAL_ADC_ConfigChannel+0x60e>
 800232c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800232e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2f      	ldr	r2, [pc, #188]	@ (80023f8 <HAL_ADC_ConfigChannel+0x69c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d14b      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a2a      	ldr	r2, [pc, #168]	@ (80023f0 <HAL_ADC_ConfigChannel+0x694>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x5f8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a29      	ldr	r2, [pc, #164]	@ (80023f4 <HAL_ADC_ConfigChannel+0x698>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x5fc>
 8002354:	4a2a      	ldr	r2, [pc, #168]	@ (8002400 <HAL_ADC_ConfigChannel+0x6a4>)
 8002356:	e000      	b.n	800235a <HAL_ADC_ConfigChannel+0x5fe>
 8002358:	4a24      	ldr	r2, [pc, #144]	@ (80023ec <HAL_ADC_ConfigChannel+0x690>)
 800235a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7ff f9df 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002368:	e036      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a28      	ldr	r2, [pc, #160]	@ (8002410 <HAL_ADC_ConfigChannel+0x6b4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d131      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
 8002374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12c      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_ADC_ConfigChannel+0x69c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d127      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <HAL_ADC_ConfigChannel+0x694>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_ADC_ConfigChannel+0x640>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_ADC_ConfigChannel+0x698>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x644>
 800239c:	4a18      	ldr	r2, [pc, #96]	@ (8002400 <HAL_ADC_ConfigChannel+0x6a4>)
 800239e:	e000      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x646>
 80023a0:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_ADC_ConfigChannel+0x690>)
 80023a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7ff f9bb 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
 80023b0:	e012      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80023c4:	e008      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f043 0220 	orr.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3784      	adds	r7, #132	@ 0x84
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd90      	pop	{r4, r7, pc}
 80023ec:	58026300 	.word	0x58026300
 80023f0:	40022000 	.word	0x40022000
 80023f4:	40022100 	.word	0x40022100
 80023f8:	58026000 	.word	0x58026000
 80023fc:	cb840000 	.word	0xcb840000
 8002400:	40022300 	.word	0x40022300
 8002404:	24000000 	.word	0x24000000
 8002408:	053e2d63 	.word	0x053e2d63
 800240c:	c7520000 	.word	0xc7520000
 8002410:	cfb80000 	.word	0xcfb80000

08002414 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7a      	ldr	r2, [pc, #488]	@ (800260c <ADC_ConfigureBoostMode+0x1f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <ADC_ConfigureBoostMode+0x1c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a79      	ldr	r2, [pc, #484]	@ (8002610 <ADC_ConfigureBoostMode+0x1fc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d109      	bne.n	8002444 <ADC_ConfigureBoostMode+0x30>
 8002430:	4b78      	ldr	r3, [pc, #480]	@ (8002614 <ADC_ConfigureBoostMode+0x200>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <ADC_ConfigureBoostMode+0x42>
 8002444:	4b74      	ldr	r3, [pc, #464]	@ (8002618 <ADC_ConfigureBoostMode+0x204>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01c      	beq.n	8002494 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800245a:	f003 fdcf 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800245e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002468:	d010      	beq.n	800248c <ADC_ConfigureBoostMode+0x78>
 800246a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800246e:	d873      	bhi.n	8002558 <ADC_ConfigureBoostMode+0x144>
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d002      	beq.n	800247c <ADC_ConfigureBoostMode+0x68>
 8002476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800247a:	d16d      	bne.n	8002558 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	60fb      	str	r3, [r7, #12]
        break;
 800248a:	e068      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	60fb      	str	r3, [r7, #12]
        break;
 8002492:	e064      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002494:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	f005 f814 	bl	80074c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80024a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80024aa:	d051      	beq.n	8002550 <ADC_ConfigureBoostMode+0x13c>
 80024ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80024b0:	d854      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024b2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80024b6:	d047      	beq.n	8002548 <ADC_ConfigureBoostMode+0x134>
 80024b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80024bc:	d84e      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024be:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80024c2:	d03d      	beq.n	8002540 <ADC_ConfigureBoostMode+0x12c>
 80024c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80024c8:	d848      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024ce:	d033      	beq.n	8002538 <ADC_ConfigureBoostMode+0x124>
 80024d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024d4:	d842      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024d6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80024da:	d029      	beq.n	8002530 <ADC_ConfigureBoostMode+0x11c>
 80024dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80024e0:	d83c      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80024e6:	d01a      	beq.n	800251e <ADC_ConfigureBoostMode+0x10a>
 80024e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80024ec:	d836      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024ee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80024f2:	d014      	beq.n	800251e <ADC_ConfigureBoostMode+0x10a>
 80024f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80024f8:	d830      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024fe:	d00e      	beq.n	800251e <ADC_ConfigureBoostMode+0x10a>
 8002500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002504:	d82a      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 8002506:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800250a:	d008      	beq.n	800251e <ADC_ConfigureBoostMode+0x10a>
 800250c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002510:	d824      	bhi.n	800255c <ADC_ConfigureBoostMode+0x148>
 8002512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002516:	d002      	beq.n	800251e <ADC_ConfigureBoostMode+0x10a>
 8002518:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800251c:	d11e      	bne.n	800255c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c9b      	lsrs	r3, r3, #18
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	60fb      	str	r3, [r7, #12]
        break;
 800252e:	e016      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	60fb      	str	r3, [r7, #12]
        break;
 8002536:	e012      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	60fb      	str	r3, [r7, #12]
        break;
 800253e:	e00e      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	60fb      	str	r3, [r7, #12]
        break;
 8002546:	e00a      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	09db      	lsrs	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
        break;
 800254e:	e006      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	60fb      	str	r3, [r7, #12]
        break;
 8002556:	e002      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002558:	bf00      	nop
 800255a:	e000      	b.n	800255e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800255c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800255e:	f7ff f8ad 	bl	80016bc <HAL_GetREVID>
 8002562:	4603      	mov	r3, r0
 8002564:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002568:	4293      	cmp	r3, r2
 800256a:	d815      	bhi.n	8002598 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a2b      	ldr	r2, [pc, #172]	@ (800261c <ADC_ConfigureBoostMode+0x208>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d908      	bls.n	8002586 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002582:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002584:	e03e      	b.n	8002604 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	e035      	b.n	8002604 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <ADC_ConfigureBoostMode+0x20c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d808      	bhi.n	80025b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	e025      	b.n	8002604 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002624 <ADC_ConfigureBoostMode+0x210>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d80a      	bhi.n	80025d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	e016      	b.n	8002604 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <ADC_ConfigureBoostMode+0x214>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d80a      	bhi.n	80025f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	e007      	b.n	8002604 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	40022100 	.word	0x40022100
 8002614:	40022300 	.word	0x40022300
 8002618:	58026300 	.word	0x58026300
 800261c:	01312d00 	.word	0x01312d00
 8002620:	005f5e10 	.word	0x005f5e10
 8002624:	00bebc20 	.word	0x00bebc20
 8002628:	017d7840 	.word	0x017d7840

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <__NVIC_SetPriorityGrouping+0x40>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	4313      	orrs	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265a:	4a04      	ldr	r2, [pc, #16]	@ (800266c <__NVIC_SetPriorityGrouping+0x40>)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00
 8002670:	05fa0000 	.word	0x05fa0000

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	@ (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	@ (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	@ (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	@ 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f7ff ff8e 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	@ (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff29 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f0:	f7ff ff40 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7ff ff90 	bl	8002720 <NVIC_EncodePriority>
 8002800:	4602      	mov	r2, r0
 8002802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff5f 	bl	80026cc <__NVIC_SetPriority>
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff33 	bl	8002690 <__NVIC_EnableIRQ>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffa4 	bl	8002788 <SysTick_Config>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7fe ff26 	bl	80016a4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e316      	b.n	8002e92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a66      	ldr	r2, [pc, #408]	@ (8002a04 <HAL_DMA_Init+0x1b8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d04a      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a65      	ldr	r2, [pc, #404]	@ (8002a08 <HAL_DMA_Init+0x1bc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d045      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	@ (8002a0c <HAL_DMA_Init+0x1c0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d040      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a62      	ldr	r2, [pc, #392]	@ (8002a10 <HAL_DMA_Init+0x1c4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d03b      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a60      	ldr	r2, [pc, #384]	@ (8002a14 <HAL_DMA_Init+0x1c8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d036      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5f      	ldr	r2, [pc, #380]	@ (8002a18 <HAL_DMA_Init+0x1cc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d031      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a1c <HAL_DMA_Init+0x1d0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02c      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002a20 <HAL_DMA_Init+0x1d4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d027      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002a24 <HAL_DMA_Init+0x1d8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d022      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a59      	ldr	r2, [pc, #356]	@ (8002a28 <HAL_DMA_Init+0x1dc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d01d      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a57      	ldr	r2, [pc, #348]	@ (8002a2c <HAL_DMA_Init+0x1e0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a56      	ldr	r2, [pc, #344]	@ (8002a30 <HAL_DMA_Init+0x1e4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a54      	ldr	r2, [pc, #336]	@ (8002a34 <HAL_DMA_Init+0x1e8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a53      	ldr	r2, [pc, #332]	@ (8002a38 <HAL_DMA_Init+0x1ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a51      	ldr	r2, [pc, #324]	@ (8002a3c <HAL_DMA_Init+0x1f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_DMA_Init+0xb8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a50      	ldr	r2, [pc, #320]	@ (8002a40 <HAL_DMA_Init+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_DMA_Init+0xbc>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_DMA_Init+0xbe>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 813b 	beq.w	8002b86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <HAL_DMA_Init+0x1b8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d04a      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a36      	ldr	r2, [pc, #216]	@ (8002a08 <HAL_DMA_Init+0x1bc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d045      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a34      	ldr	r2, [pc, #208]	@ (8002a0c <HAL_DMA_Init+0x1c0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d040      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a33      	ldr	r2, [pc, #204]	@ (8002a10 <HAL_DMA_Init+0x1c4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d03b      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a31      	ldr	r2, [pc, #196]	@ (8002a14 <HAL_DMA_Init+0x1c8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d036      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a30      	ldr	r2, [pc, #192]	@ (8002a18 <HAL_DMA_Init+0x1cc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2e      	ldr	r2, [pc, #184]	@ (8002a1c <HAL_DMA_Init+0x1d0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02c      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a20 <HAL_DMA_Init+0x1d4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d027      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2b      	ldr	r2, [pc, #172]	@ (8002a24 <HAL_DMA_Init+0x1d8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d022      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a28 <HAL_DMA_Init+0x1dc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01d      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a28      	ldr	r2, [pc, #160]	@ (8002a2c <HAL_DMA_Init+0x1e0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d018      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a27      	ldr	r2, [pc, #156]	@ (8002a30 <HAL_DMA_Init+0x1e4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a25      	ldr	r2, [pc, #148]	@ (8002a34 <HAL_DMA_Init+0x1e8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <HAL_DMA_Init+0x1ec>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <HAL_DMA_Init+0x1f0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Init+0x174>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	@ (8002a40 <HAL_DMA_Init+0x1f4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <HAL_DMA_Init+0x186>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e007      	b.n	80029e2 <HAL_DMA_Init+0x196>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029e2:	e02f      	b.n	8002a44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e4:	f7fe fe5e 	bl	80016a4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d928      	bls.n	8002a44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e246      	b.n	8002e92 <HAL_DMA_Init+0x646>
 8002a04:	40020010 	.word	0x40020010
 8002a08:	40020028 	.word	0x40020028
 8002a0c:	40020040 	.word	0x40020040
 8002a10:	40020058 	.word	0x40020058
 8002a14:	40020070 	.word	0x40020070
 8002a18:	40020088 	.word	0x40020088
 8002a1c:	400200a0 	.word	0x400200a0
 8002a20:	400200b8 	.word	0x400200b8
 8002a24:	40020410 	.word	0x40020410
 8002a28:	40020428 	.word	0x40020428
 8002a2c:	40020440 	.word	0x40020440
 8002a30:	40020458 	.word	0x40020458
 8002a34:	40020470 	.word	0x40020470
 8002a38:	40020488 	.word	0x40020488
 8002a3c:	400204a0 	.word	0x400204a0
 8002a40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1c8      	bne.n	80029e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4b83      	ldr	r3, [pc, #524]	@ (8002c6c <HAL_DMA_Init+0x420>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d107      	bne.n	8002aa8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002aa8:	4b71      	ldr	r3, [pc, #452]	@ (8002c70 <HAL_DMA_Init+0x424>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b71      	ldr	r3, [pc, #452]	@ (8002c74 <HAL_DMA_Init+0x428>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ab4:	d328      	bcc.n	8002b08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b28      	cmp	r3, #40	@ 0x28
 8002abc:	d903      	bls.n	8002ac6 <HAL_DMA_Init+0x27a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ac4:	d917      	bls.n	8002af6 <HAL_DMA_Init+0x2aa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8002acc:	d903      	bls.n	8002ad6 <HAL_DMA_Init+0x28a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b42      	cmp	r3, #66	@ 0x42
 8002ad4:	d90f      	bls.n	8002af6 <HAL_DMA_Init+0x2aa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b46      	cmp	r3, #70	@ 0x46
 8002adc:	d903      	bls.n	8002ae6 <HAL_DMA_Init+0x29a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b48      	cmp	r3, #72	@ 0x48
 8002ae4:	d907      	bls.n	8002af6 <HAL_DMA_Init+0x2aa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b4e      	cmp	r3, #78	@ 0x4e
 8002aec:	d905      	bls.n	8002afa <HAL_DMA_Init+0x2ae>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b52      	cmp	r3, #82	@ 0x52
 8002af4:	d801      	bhi.n	8002afa <HAL_DMA_Init+0x2ae>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_DMA_Init+0x2b0>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d117      	bne.n	8002b62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f001 ff1d 	bl	8004984 <DMA_CheckFifoParam>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e197      	b.n	8002e92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f001 fe58 	bl	8004820 <DMA_CalcBaseAndBitshift>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	223f      	movs	r2, #63	@ 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	e0cd      	b.n	8002d22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c78 <HAL_DMA_Init+0x42c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a39      	ldr	r2, [pc, #228]	@ (8002c7c <HAL_DMA_Init+0x430>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a38      	ldr	r2, [pc, #224]	@ (8002c80 <HAL_DMA_Init+0x434>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a36      	ldr	r2, [pc, #216]	@ (8002c84 <HAL_DMA_Init+0x438>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	@ (8002c88 <HAL_DMA_Init+0x43c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	@ (8002c8c <HAL_DMA_Init+0x440>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <HAL_DMA_Init+0x444>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_Init+0x38a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <HAL_DMA_Init+0x448>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Init+0x38e>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Init+0x390>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8097 	beq.w	8002d10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a24      	ldr	r2, [pc, #144]	@ (8002c78 <HAL_DMA_Init+0x42c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d021      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <HAL_DMA_Init+0x430>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01c      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_DMA_Init+0x434>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d017      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1f      	ldr	r2, [pc, #124]	@ (8002c84 <HAL_DMA_Init+0x438>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d012      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <HAL_DMA_Init+0x43c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <HAL_DMA_Init+0x440>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d008      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <HAL_DMA_Init+0x444>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <HAL_DMA_Init+0x3e4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <HAL_DMA_Init+0x448>)
 8002c2e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <HAL_DMA_Init+0x44c>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d021      	beq.n	8002c9c <HAL_DMA_Init+0x450>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b80      	cmp	r3, #128	@ 0x80
 8002c5e:	d102      	bne.n	8002c66 <HAL_DMA_Init+0x41a>
 8002c60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c64:	e01b      	b.n	8002c9e <HAL_DMA_Init+0x452>
 8002c66:	2300      	movs	r3, #0
 8002c68:	e019      	b.n	8002c9e <HAL_DMA_Init+0x452>
 8002c6a:	bf00      	nop
 8002c6c:	fe10803f 	.word	0xfe10803f
 8002c70:	5c001000 	.word	0x5c001000
 8002c74:	ffff0000 	.word	0xffff0000
 8002c78:	58025408 	.word	0x58025408
 8002c7c:	5802541c 	.word	0x5802541c
 8002c80:	58025430 	.word	0x58025430
 8002c84:	58025444 	.word	0x58025444
 8002c88:	58025458 	.word	0x58025458
 8002c8c:	5802546c 	.word	0x5802546c
 8002c90:	58025480 	.word	0x58025480
 8002c94:	58025494 	.word	0x58025494
 8002c98:	fffe000f 	.word	0xfffe000f
 8002c9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68d2      	ldr	r2, [r2, #12]
 8002ca2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ccc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e9c <HAL_DMA_Init+0x650>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea0 <HAL_DMA_Init+0x654>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 fd93 	bl	8004820 <DMA_CalcBaseAndBitshift>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	e008      	b.n	8002d22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2240      	movs	r2, #64	@ 0x40
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e0b7      	b.n	8002e92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea4 <HAL_DMA_Init+0x658>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d072      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea8 <HAL_DMA_Init+0x65c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d06d      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_DMA_Init+0x660>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d068      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb0 <HAL_DMA_Init+0x664>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d063      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a59      	ldr	r2, [pc, #356]	@ (8002eb4 <HAL_DMA_Init+0x668>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d05e      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a57      	ldr	r2, [pc, #348]	@ (8002eb8 <HAL_DMA_Init+0x66c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d059      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <HAL_DMA_Init+0x670>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d054      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a54      	ldr	r2, [pc, #336]	@ (8002ec0 <HAL_DMA_Init+0x674>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04f      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a53      	ldr	r2, [pc, #332]	@ (8002ec4 <HAL_DMA_Init+0x678>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04a      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a51      	ldr	r2, [pc, #324]	@ (8002ec8 <HAL_DMA_Init+0x67c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d045      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a50      	ldr	r2, [pc, #320]	@ (8002ecc <HAL_DMA_Init+0x680>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d040      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed0 <HAL_DMA_Init+0x684>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03b      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed4 <HAL_DMA_Init+0x688>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d036      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <HAL_DMA_Init+0x68c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d031      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	@ (8002edc <HAL_DMA_Init+0x690>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d02c      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a48      	ldr	r2, [pc, #288]	@ (8002ee0 <HAL_DMA_Init+0x694>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a47      	ldr	r2, [pc, #284]	@ (8002ee4 <HAL_DMA_Init+0x698>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a45      	ldr	r2, [pc, #276]	@ (8002ee8 <HAL_DMA_Init+0x69c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01d      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a44      	ldr	r2, [pc, #272]	@ (8002eec <HAL_DMA_Init+0x6a0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d018      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_DMA_Init+0x6a4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a41      	ldr	r2, [pc, #260]	@ (8002ef4 <HAL_DMA_Init+0x6a8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef8 <HAL_DMA_Init+0x6ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a3e      	ldr	r2, [pc, #248]	@ (8002efc <HAL_DMA_Init+0x6b0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_DMA_Init+0x5c6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f00 <HAL_DMA_Init+0x6b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Init+0x5ca>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_DMA_Init+0x5cc>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d032      	beq.n	8002e82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f001 fe2d 	bl	8004a7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d102      	bne.n	8002e30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_DMA_Init+0x624>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d80c      	bhi.n	8002e70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f001 feaa 	bl	8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e008      	b.n	8002e82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	a7fdabf8 	.word	0xa7fdabf8
 8002ea0:	cccccccd 	.word	0xcccccccd
 8002ea4:	40020010 	.word	0x40020010
 8002ea8:	40020028 	.word	0x40020028
 8002eac:	40020040 	.word	0x40020040
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	40020070 	.word	0x40020070
 8002eb8:	40020088 	.word	0x40020088
 8002ebc:	400200a0 	.word	0x400200a0
 8002ec0:	400200b8 	.word	0x400200b8
 8002ec4:	40020410 	.word	0x40020410
 8002ec8:	40020428 	.word	0x40020428
 8002ecc:	40020440 	.word	0x40020440
 8002ed0:	40020458 	.word	0x40020458
 8002ed4:	40020470 	.word	0x40020470
 8002ed8:	40020488 	.word	0x40020488
 8002edc:	400204a0 	.word	0x400204a0
 8002ee0:	400204b8 	.word	0x400204b8
 8002ee4:	58025408 	.word	0x58025408
 8002ee8:	5802541c 	.word	0x5802541c
 8002eec:	58025430 	.word	0x58025430
 8002ef0:	58025444 	.word	0x58025444
 8002ef4:	58025458 	.word	0x58025458
 8002ef8:	5802546c 	.word	0x5802546c
 8002efc:	58025480 	.word	0x58025480
 8002f00:	58025494 	.word	0x58025494

08002f04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7fe fbca 	bl	80016a4 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e2dc      	b.n	80034d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d008      	beq.n	8002f3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e2cd      	b.n	80034d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a76      	ldr	r2, [pc, #472]	@ (8003118 <HAL_DMA_Abort+0x214>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a74      	ldr	r2, [pc, #464]	@ (800311c <HAL_DMA_Abort+0x218>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	@ (8003120 <HAL_DMA_Abort+0x21c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a71      	ldr	r2, [pc, #452]	@ (8003124 <HAL_DMA_Abort+0x220>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a70      	ldr	r2, [pc, #448]	@ (8003128 <HAL_DMA_Abort+0x224>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_DMA_Abort+0x228>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8003130 <HAL_DMA_Abort+0x22c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6b      	ldr	r2, [pc, #428]	@ (8003134 <HAL_DMA_Abort+0x230>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8003138 <HAL_DMA_Abort+0x234>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a68      	ldr	r2, [pc, #416]	@ (800313c <HAL_DMA_Abort+0x238>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a67      	ldr	r2, [pc, #412]	@ (8003140 <HAL_DMA_Abort+0x23c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a65      	ldr	r2, [pc, #404]	@ (8003144 <HAL_DMA_Abort+0x240>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a64      	ldr	r2, [pc, #400]	@ (8003148 <HAL_DMA_Abort+0x244>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a62      	ldr	r2, [pc, #392]	@ (800314c <HAL_DMA_Abort+0x248>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a61      	ldr	r2, [pc, #388]	@ (8003150 <HAL_DMA_Abort+0x24c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Abort+0xd6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8003154 <HAL_DMA_Abort+0x250>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_DMA_Abort+0xda>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Abort+0xdc>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 021e 	bic.w	r2, r2, #30
 8002ff2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003002:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e00a      	b.n	8003022 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020e 	bic.w	r2, r2, #14
 800301a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3c      	ldr	r2, [pc, #240]	@ (8003118 <HAL_DMA_Abort+0x214>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d072      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3a      	ldr	r2, [pc, #232]	@ (800311c <HAL_DMA_Abort+0x218>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d06d      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <HAL_DMA_Abort+0x21c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d068      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a37      	ldr	r2, [pc, #220]	@ (8003124 <HAL_DMA_Abort+0x220>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d063      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a36      	ldr	r2, [pc, #216]	@ (8003128 <HAL_DMA_Abort+0x224>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d05e      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a34      	ldr	r2, [pc, #208]	@ (800312c <HAL_DMA_Abort+0x228>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d059      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <HAL_DMA_Abort+0x22c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d054      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <HAL_DMA_Abort+0x230>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d04f      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_DMA_Abort+0x234>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_DMA_Abort+0x238>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_DMA_Abort+0x23c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_DMA_Abort+0x240>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <HAL_DMA_Abort+0x244>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_DMA_Abort+0x248>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_DMA_Abort+0x24c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <HAL_DMA_Abort+0x250>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <HAL_DMA_Abort+0x254>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_DMA_Abort+0x258>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_DMA_Abort+0x25c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_DMA_Abort+0x260>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <HAL_DMA_Abort+0x264>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_DMA_Abort+0x268>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_DMA_Abort+0x26c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort+0x20e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_DMA_Abort+0x270>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d132      	bne.n	8003178 <HAL_DMA_Abort+0x274>
 8003112:	2301      	movs	r3, #1
 8003114:	e031      	b.n	800317a <HAL_DMA_Abort+0x276>
 8003116:	bf00      	nop
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8
 8003158:	58025408 	.word	0x58025408
 800315c:	5802541c 	.word	0x5802541c
 8003160:	58025430 	.word	0x58025430
 8003164:	58025444 	.word	0x58025444
 8003168:	58025458 	.word	0x58025458
 800316c:	5802546c 	.word	0x5802546c
 8003170:	58025480 	.word	0x58025480
 8003174:	58025494 	.word	0x58025494
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800318c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6d      	ldr	r2, [pc, #436]	@ (8003348 <HAL_DMA_Abort+0x444>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d04a      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6b      	ldr	r2, [pc, #428]	@ (800334c <HAL_DMA_Abort+0x448>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d045      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003350 <HAL_DMA_Abort+0x44c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d040      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a68      	ldr	r2, [pc, #416]	@ (8003354 <HAL_DMA_Abort+0x450>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d03b      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a67      	ldr	r2, [pc, #412]	@ (8003358 <HAL_DMA_Abort+0x454>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d036      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_DMA_Abort+0x458>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a64      	ldr	r2, [pc, #400]	@ (8003360 <HAL_DMA_Abort+0x45c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d02c      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a62      	ldr	r2, [pc, #392]	@ (8003364 <HAL_DMA_Abort+0x460>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d027      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a61      	ldr	r2, [pc, #388]	@ (8003368 <HAL_DMA_Abort+0x464>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5f      	ldr	r2, [pc, #380]	@ (800336c <HAL_DMA_Abort+0x468>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003370 <HAL_DMA_Abort+0x46c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5c      	ldr	r2, [pc, #368]	@ (8003374 <HAL_DMA_Abort+0x470>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5b      	ldr	r2, [pc, #364]	@ (8003378 <HAL_DMA_Abort+0x474>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a59      	ldr	r2, [pc, #356]	@ (800337c <HAL_DMA_Abort+0x478>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a58      	ldr	r2, [pc, #352]	@ (8003380 <HAL_DMA_Abort+0x47c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_DMA_Abort+0x32a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <HAL_DMA_Abort+0x480>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <HAL_DMA_Abort+0x33c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e007      	b.n	8003250 <HAL_DMA_Abort+0x34c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003250:	e013      	b.n	800327a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7fe fa27 	bl	80016a4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d90c      	bls.n	800327a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e12d      	b.n	80034d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e5      	bne.n	8003252 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2f      	ldr	r2, [pc, #188]	@ (8003348 <HAL_DMA_Abort+0x444>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d04a      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a2d      	ldr	r2, [pc, #180]	@ (800334c <HAL_DMA_Abort+0x448>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d045      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2c      	ldr	r2, [pc, #176]	@ (8003350 <HAL_DMA_Abort+0x44c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d040      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <HAL_DMA_Abort+0x450>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d03b      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a29      	ldr	r2, [pc, #164]	@ (8003358 <HAL_DMA_Abort+0x454>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d036      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a27      	ldr	r2, [pc, #156]	@ (800335c <HAL_DMA_Abort+0x458>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <HAL_DMA_Abort+0x45c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02c      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <HAL_DMA_Abort+0x460>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d027      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a23      	ldr	r2, [pc, #140]	@ (8003368 <HAL_DMA_Abort+0x464>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <HAL_DMA_Abort+0x468>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a20      	ldr	r2, [pc, #128]	@ (8003370 <HAL_DMA_Abort+0x46c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d018      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003374 <HAL_DMA_Abort+0x470>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <HAL_DMA_Abort+0x474>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <HAL_DMA_Abort+0x478>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1a      	ldr	r2, [pc, #104]	@ (8003380 <HAL_DMA_Abort+0x47c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_DMA_Abort+0x422>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <HAL_DMA_Abort+0x480>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_DMA_Abort+0x426>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_DMA_Abort+0x428>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02b      	beq.n	8003388 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	223f      	movs	r2, #63	@ 0x3f
 8003340:	409a      	lsls	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	e02a      	b.n	800339e <HAL_DMA_Abort+0x49a>
 8003348:	40020010 	.word	0x40020010
 800334c:	40020028 	.word	0x40020028
 8003350:	40020040 	.word	0x40020040
 8003354:	40020058 	.word	0x40020058
 8003358:	40020070 	.word	0x40020070
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	400200b8 	.word	0x400200b8
 8003368:	40020410 	.word	0x40020410
 800336c:	40020428 	.word	0x40020428
 8003370:	40020440 	.word	0x40020440
 8003374:	40020458 	.word	0x40020458
 8003378:	40020470 	.word	0x40020470
 800337c:	40020488 	.word	0x40020488
 8003380:	400204a0 	.word	0x400204a0
 8003384:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a4f      	ldr	r2, [pc, #316]	@ (80034e0 <HAL_DMA_Abort+0x5dc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d072      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4d      	ldr	r2, [pc, #308]	@ (80034e4 <HAL_DMA_Abort+0x5e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d06d      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4c      	ldr	r2, [pc, #304]	@ (80034e8 <HAL_DMA_Abort+0x5e4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d068      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4a      	ldr	r2, [pc, #296]	@ (80034ec <HAL_DMA_Abort+0x5e8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d063      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a49      	ldr	r2, [pc, #292]	@ (80034f0 <HAL_DMA_Abort+0x5ec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d05e      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_DMA_Abort+0x5f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d059      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a46      	ldr	r2, [pc, #280]	@ (80034f8 <HAL_DMA_Abort+0x5f4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d054      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a44      	ldr	r2, [pc, #272]	@ (80034fc <HAL_DMA_Abort+0x5f8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04f      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a43      	ldr	r2, [pc, #268]	@ (8003500 <HAL_DMA_Abort+0x5fc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d04a      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a41      	ldr	r2, [pc, #260]	@ (8003504 <HAL_DMA_Abort+0x600>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d045      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a40      	ldr	r2, [pc, #256]	@ (8003508 <HAL_DMA_Abort+0x604>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d040      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a3e      	ldr	r2, [pc, #248]	@ (800350c <HAL_DMA_Abort+0x608>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03b      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3d      	ldr	r2, [pc, #244]	@ (8003510 <HAL_DMA_Abort+0x60c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d036      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3b      	ldr	r2, [pc, #236]	@ (8003514 <HAL_DMA_Abort+0x610>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d031      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3a      	ldr	r2, [pc, #232]	@ (8003518 <HAL_DMA_Abort+0x614>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02c      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a38      	ldr	r2, [pc, #224]	@ (800351c <HAL_DMA_Abort+0x618>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d027      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a37      	ldr	r2, [pc, #220]	@ (8003520 <HAL_DMA_Abort+0x61c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <HAL_DMA_Abort+0x620>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a34      	ldr	r2, [pc, #208]	@ (8003528 <HAL_DMA_Abort+0x624>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a32      	ldr	r2, [pc, #200]	@ (800352c <HAL_DMA_Abort+0x628>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a31      	ldr	r2, [pc, #196]	@ (8003530 <HAL_DMA_Abort+0x62c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2f      	ldr	r2, [pc, #188]	@ (8003534 <HAL_DMA_Abort+0x630>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2e      	ldr	r2, [pc, #184]	@ (8003538 <HAL_DMA_Abort+0x634>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_DMA_Abort+0x58a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <HAL_DMA_Abort+0x638>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Abort+0x58e>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_DMA_Abort+0x590>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d015      	beq.n	80034c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40020010 	.word	0x40020010
 80034e4:	40020028 	.word	0x40020028
 80034e8:	40020040 	.word	0x40020040
 80034ec:	40020058 	.word	0x40020058
 80034f0:	40020070 	.word	0x40020070
 80034f4:	40020088 	.word	0x40020088
 80034f8:	400200a0 	.word	0x400200a0
 80034fc:	400200b8 	.word	0x400200b8
 8003500:	40020410 	.word	0x40020410
 8003504:	40020428 	.word	0x40020428
 8003508:	40020440 	.word	0x40020440
 800350c:	40020458 	.word	0x40020458
 8003510:	40020470 	.word	0x40020470
 8003514:	40020488 	.word	0x40020488
 8003518:	400204a0 	.word	0x400204a0
 800351c:	400204b8 	.word	0x400204b8
 8003520:	58025408 	.word	0x58025408
 8003524:	5802541c 	.word	0x5802541c
 8003528:	58025430 	.word	0x58025430
 800352c:	58025444 	.word	0x58025444
 8003530:	58025458 	.word	0x58025458
 8003534:	5802546c 	.word	0x5802546c
 8003538:	58025480 	.word	0x58025480
 800353c:	58025494 	.word	0x58025494

08003540 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e237      	b.n	80039c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e22c      	b.n	80039c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5c      	ldr	r2, [pc, #368]	@ (80036e0 <HAL_DMA_Abort_IT+0x1a0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d04a      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5b      	ldr	r2, [pc, #364]	@ (80036e4 <HAL_DMA_Abort_IT+0x1a4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d045      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a59      	ldr	r2, [pc, #356]	@ (80036e8 <HAL_DMA_Abort_IT+0x1a8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d040      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_DMA_Abort_IT+0x1ac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d03b      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a56      	ldr	r2, [pc, #344]	@ (80036f0 <HAL_DMA_Abort_IT+0x1b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d036      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a55      	ldr	r2, [pc, #340]	@ (80036f4 <HAL_DMA_Abort_IT+0x1b4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d031      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a53      	ldr	r2, [pc, #332]	@ (80036f8 <HAL_DMA_Abort_IT+0x1b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02c      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_DMA_Abort_IT+0x1bc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d027      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a50      	ldr	r2, [pc, #320]	@ (8003700 <HAL_DMA_Abort_IT+0x1c0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d022      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <HAL_DMA_Abort_IT+0x1c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01d      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <HAL_DMA_Abort_IT+0x1c8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_DMA_Abort_IT+0x1cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003710 <HAL_DMA_Abort_IT+0x1d0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a49      	ldr	r2, [pc, #292]	@ (8003714 <HAL_DMA_Abort_IT+0x1d4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a47      	ldr	r2, [pc, #284]	@ (8003718 <HAL_DMA_Abort_IT+0x1d8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_Abort_IT+0xc8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a46      	ldr	r2, [pc, #280]	@ (800371c <HAL_DMA_Abort_IT+0x1dc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_DMA_Abort_IT+0xcc>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_DMA_Abort_IT+0xce>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8086 	beq.w	8003720 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2f      	ldr	r2, [pc, #188]	@ (80036e0 <HAL_DMA_Abort_IT+0x1a0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d04a      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2e      	ldr	r2, [pc, #184]	@ (80036e4 <HAL_DMA_Abort_IT+0x1a4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d045      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <HAL_DMA_Abort_IT+0x1a8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d040      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <HAL_DMA_Abort_IT+0x1ac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d03b      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a29      	ldr	r2, [pc, #164]	@ (80036f0 <HAL_DMA_Abort_IT+0x1b0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d036      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a28      	ldr	r2, [pc, #160]	@ (80036f4 <HAL_DMA_Abort_IT+0x1b4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d031      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_DMA_Abort_IT+0x1b8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d02c      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a25      	ldr	r2, [pc, #148]	@ (80036fc <HAL_DMA_Abort_IT+0x1bc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d027      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a23      	ldr	r2, [pc, #140]	@ (8003700 <HAL_DMA_Abort_IT+0x1c0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_DMA_Abort_IT+0x1c4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d01d      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a20      	ldr	r2, [pc, #128]	@ (8003708 <HAL_DMA_Abort_IT+0x1c8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_DMA_Abort_IT+0x1cc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <HAL_DMA_Abort_IT+0x1d0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <HAL_DMA_Abort_IT+0x1d4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <HAL_DMA_Abort_IT+0x1d8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_Abort_IT+0x17c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_DMA_Abort_IT+0x1dc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <HAL_DMA_Abort_IT+0x18e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e178      	b.n	80039c0 <HAL_DMA_Abort_IT+0x480>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e16f      	b.n	80039c0 <HAL_DMA_Abort_IT+0x480>
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020e 	bic.w	r2, r2, #14
 800372e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6c      	ldr	r2, [pc, #432]	@ (80038e8 <HAL_DMA_Abort_IT+0x3a8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04a      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6b      	ldr	r2, [pc, #428]	@ (80038ec <HAL_DMA_Abort_IT+0x3ac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d045      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_DMA_Abort_IT+0x3b0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d040      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a68      	ldr	r2, [pc, #416]	@ (80038f4 <HAL_DMA_Abort_IT+0x3b4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d03b      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a66      	ldr	r2, [pc, #408]	@ (80038f8 <HAL_DMA_Abort_IT+0x3b8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d036      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a65      	ldr	r2, [pc, #404]	@ (80038fc <HAL_DMA_Abort_IT+0x3bc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d031      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a63      	ldr	r2, [pc, #396]	@ (8003900 <HAL_DMA_Abort_IT+0x3c0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02c      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a62      	ldr	r2, [pc, #392]	@ (8003904 <HAL_DMA_Abort_IT+0x3c4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d027      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a60      	ldr	r2, [pc, #384]	@ (8003908 <HAL_DMA_Abort_IT+0x3c8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5f      	ldr	r2, [pc, #380]	@ (800390c <HAL_DMA_Abort_IT+0x3cc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d01d      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5d      	ldr	r2, [pc, #372]	@ (8003910 <HAL_DMA_Abort_IT+0x3d0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003914 <HAL_DMA_Abort_IT+0x3d4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <HAL_DMA_Abort_IT+0x3d8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a59      	ldr	r2, [pc, #356]	@ (800391c <HAL_DMA_Abort_IT+0x3dc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a57      	ldr	r2, [pc, #348]	@ (8003920 <HAL_DMA_Abort_IT+0x3e0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x290>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a56      	ldr	r2, [pc, #344]	@ (8003924 <HAL_DMA_Abort_IT+0x3e4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <HAL_DMA_Abort_IT+0x2a2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <HAL_DMA_Abort_IT+0x2b2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3c      	ldr	r2, [pc, #240]	@ (80038e8 <HAL_DMA_Abort_IT+0x3a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d072      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3a      	ldr	r2, [pc, #232]	@ (80038ec <HAL_DMA_Abort_IT+0x3ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d06d      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a39      	ldr	r2, [pc, #228]	@ (80038f0 <HAL_DMA_Abort_IT+0x3b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d068      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a37      	ldr	r2, [pc, #220]	@ (80038f4 <HAL_DMA_Abort_IT+0x3b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d063      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a36      	ldr	r2, [pc, #216]	@ (80038f8 <HAL_DMA_Abort_IT+0x3b8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d05e      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a34      	ldr	r2, [pc, #208]	@ (80038fc <HAL_DMA_Abort_IT+0x3bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d059      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a33      	ldr	r2, [pc, #204]	@ (8003900 <HAL_DMA_Abort_IT+0x3c0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d054      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a31      	ldr	r2, [pc, #196]	@ (8003904 <HAL_DMA_Abort_IT+0x3c4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d04f      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a30      	ldr	r2, [pc, #192]	@ (8003908 <HAL_DMA_Abort_IT+0x3c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04a      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2e      	ldr	r2, [pc, #184]	@ (800390c <HAL_DMA_Abort_IT+0x3cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d045      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <HAL_DMA_Abort_IT+0x3d0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d040      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2b      	ldr	r2, [pc, #172]	@ (8003914 <HAL_DMA_Abort_IT+0x3d4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d03b      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <HAL_DMA_Abort_IT+0x3d8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d036      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a28      	ldr	r2, [pc, #160]	@ (800391c <HAL_DMA_Abort_IT+0x3dc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d031      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a27      	ldr	r2, [pc, #156]	@ (8003920 <HAL_DMA_Abort_IT+0x3e0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d02c      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	@ (8003924 <HAL_DMA_Abort_IT+0x3e4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d027      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <HAL_DMA_Abort_IT+0x3e8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	@ (800392c <HAL_DMA_Abort_IT+0x3ec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	@ (8003930 <HAL_DMA_Abort_IT+0x3f0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_DMA_Abort_IT+0x3f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_DMA_Abort_IT+0x3f8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <HAL_DMA_Abort_IT+0x3fc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_DMA_Abort_IT+0x400>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x3a2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_DMA_Abort_IT+0x404>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d132      	bne.n	8003948 <HAL_DMA_Abort_IT+0x408>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e031      	b.n	800394a <HAL_DMA_Abort_IT+0x40a>
 80038e6:	bf00      	nop
 80038e8:	40020010 	.word	0x40020010
 80038ec:	40020028 	.word	0x40020028
 80038f0:	40020040 	.word	0x40020040
 80038f4:	40020058 	.word	0x40020058
 80038f8:	40020070 	.word	0x40020070
 80038fc:	40020088 	.word	0x40020088
 8003900:	400200a0 	.word	0x400200a0
 8003904:	400200b8 	.word	0x400200b8
 8003908:	40020410 	.word	0x40020410
 800390c:	40020428 	.word	0x40020428
 8003910:	40020440 	.word	0x40020440
 8003914:	40020458 	.word	0x40020458
 8003918:	40020470 	.word	0x40020470
 800391c:	40020488 	.word	0x40020488
 8003920:	400204a0 	.word	0x400204a0
 8003924:	400204b8 	.word	0x400204b8
 8003928:	58025408 	.word	0x58025408
 800392c:	5802541c 	.word	0x5802541c
 8003930:	58025430 	.word	0x58025430
 8003934:	58025444 	.word	0x58025444
 8003938:	58025458 	.word	0x58025458
 800393c:	5802546c 	.word	0x5802546c
 8003940:	58025480 	.word	0x58025480
 8003944:	58025494 	.word	0x58025494
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d028      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800395c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2201      	movs	r2, #1
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800397c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003994:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800399e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	@ 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d8:	4b67      	ldr	r3, [pc, #412]	@ (8003b78 <HAL_DMA_IRQHandler+0x1ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a67      	ldr	r2, [pc, #412]	@ (8003b7c <HAL_DMA_IRQHandler+0x1b0>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5f      	ldr	r2, [pc, #380]	@ (8003b80 <HAL_DMA_IRQHandler+0x1b4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <HAL_DMA_IRQHandler+0x1b8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5c      	ldr	r2, [pc, #368]	@ (8003b88 <HAL_DMA_IRQHandler+0x1bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5a      	ldr	r2, [pc, #360]	@ (8003b8c <HAL_DMA_IRQHandler+0x1c0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a59      	ldr	r2, [pc, #356]	@ (8003b90 <HAL_DMA_IRQHandler+0x1c4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a57      	ldr	r2, [pc, #348]	@ (8003b94 <HAL_DMA_IRQHandler+0x1c8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a56      	ldr	r2, [pc, #344]	@ (8003b98 <HAL_DMA_IRQHandler+0x1cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_DMA_IRQHandler+0x1d0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a53      	ldr	r2, [pc, #332]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a51      	ldr	r2, [pc, #324]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a50      	ldr	r2, [pc, #320]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4e      	ldr	r2, [pc, #312]	@ (8003bac <HAL_DMA_IRQHandler+0x1e0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_IRQHandler+0xd2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a48      	ldr	r2, [pc, #288]	@ (8003bbc <HAL_DMA_IRQHandler+0x1f0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0xd6>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_IRQHandler+0xd8>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 842b 	beq.w	8004300 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a2 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <HAL_DMA_IRQHandler+0x1b4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d04a      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_DMA_IRQHandler+0x1b8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d045      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <HAL_DMA_IRQHandler+0x1bc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d040      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <HAL_DMA_IRQHandler+0x1c0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03b      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_DMA_IRQHandler+0x1c4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d036      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_DMA_IRQHandler+0x1c8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d031      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	@ (8003b98 <HAL_DMA_IRQHandler+0x1cc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02c      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_DMA_IRQHandler+0x1d0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d027      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1d4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1d8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01d      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1dc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <HAL_DMA_IRQHandler+0x1e0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1e4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <HAL_DMA_IRQHandler+0x1e8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_DMA_IRQHandler+0x1ec>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x194>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_DMA_IRQHandler+0x1f0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d12f      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x1f4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e02e      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x208>
 8003b76:	bf00      	nop
 8003b78:	24000000 	.word	0x24000000
 8003b7c:	1b4e81b5 	.word	0x1b4e81b5
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d06e      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d04a      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a67      	ldr	r2, [pc, #412]	@ (8003dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d045      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <HAL_DMA_IRQHandler+0x400>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d040      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a64      	ldr	r2, [pc, #400]	@ (8003dd0 <HAL_DMA_IRQHandler+0x404>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d03b      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <HAL_DMA_IRQHandler+0x408>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d036      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a61      	ldr	r2, [pc, #388]	@ (8003dd8 <HAL_DMA_IRQHandler+0x40c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a60      	ldr	r2, [pc, #384]	@ (8003ddc <HAL_DMA_IRQHandler+0x410>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d02c      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a5e      	ldr	r2, [pc, #376]	@ (8003de0 <HAL_DMA_IRQHandler+0x414>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d027      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8003de4 <HAL_DMA_IRQHandler+0x418>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5b      	ldr	r2, [pc, #364]	@ (8003de8 <HAL_DMA_IRQHandler+0x41c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5a      	ldr	r2, [pc, #360]	@ (8003dec <HAL_DMA_IRQHandler+0x420>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	@ (8003df0 <HAL_DMA_IRQHandler+0x424>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a57      	ldr	r2, [pc, #348]	@ (8003df4 <HAL_DMA_IRQHandler+0x428>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a55      	ldr	r2, [pc, #340]	@ (8003df8 <HAL_DMA_IRQHandler+0x42c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a54      	ldr	r2, [pc, #336]	@ (8003dfc <HAL_DMA_IRQHandler+0x430>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_IRQHandler+0x2ee>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a52      	ldr	r2, [pc, #328]	@ (8003e00 <HAL_DMA_IRQHandler+0x434>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x304>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e003      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x30c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f043 0202 	orr.w	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2204      	movs	r2, #4
 8003d02:	409a      	lsls	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 808f 	beq.w	8003e2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <HAL_DMA_IRQHandler+0x3f8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc8 <HAL_DMA_IRQHandler+0x3fc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <HAL_DMA_IRQHandler+0x400>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a27      	ldr	r2, [pc, #156]	@ (8003dd0 <HAL_DMA_IRQHandler+0x404>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a26      	ldr	r2, [pc, #152]	@ (8003dd4 <HAL_DMA_IRQHandler+0x408>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a24      	ldr	r2, [pc, #144]	@ (8003dd8 <HAL_DMA_IRQHandler+0x40c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a23      	ldr	r2, [pc, #140]	@ (8003ddc <HAL_DMA_IRQHandler+0x410>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <HAL_DMA_IRQHandler+0x414>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <HAL_DMA_IRQHandler+0x418>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_DMA_IRQHandler+0x41c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_DMA_IRQHandler+0x420>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_DMA_IRQHandler+0x424>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003df4 <HAL_DMA_IRQHandler+0x428>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <HAL_DMA_IRQHandler+0x42c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_DMA_IRQHandler+0x430>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_IRQHandler+0x3e2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <HAL_DMA_IRQHandler+0x434>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12a      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x438>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e023      	b.n	8003e0c <HAL_DMA_IRQHandler+0x440>
 8003dc4:	40020010 	.word	0x40020010
 8003dc8:	40020028 	.word	0x40020028
 8003dcc:	40020040 	.word	0x40020040
 8003dd0:	40020058 	.word	0x40020058
 8003dd4:	40020070 	.word	0x40020070
 8003dd8:	40020088 	.word	0x40020088
 8003ddc:	400200a0 	.word	0x400200a0
 8003de0:	400200b8 	.word	0x400200b8
 8003de4:	40020410 	.word	0x40020410
 8003de8:	40020428 	.word	0x40020428
 8003dec:	40020440 	.word	0x40020440
 8003df0:	40020458 	.word	0x40020458
 8003df4:	40020470 	.word	0x40020470
 8003df8:	40020488 	.word	0x40020488
 8003dfc:	400204a0 	.word	0x400204a0
 8003e00:	400204b8 	.word	0x400204b8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2204      	movs	r2, #4
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2210      	movs	r2, #16
 8003e36:	409a      	lsls	r2, r3
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a6 	beq.w	8003f8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a85      	ldr	r2, [pc, #532]	@ (800405c <HAL_DMA_IRQHandler+0x690>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d04a      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a83      	ldr	r2, [pc, #524]	@ (8004060 <HAL_DMA_IRQHandler+0x694>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d045      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a82      	ldr	r2, [pc, #520]	@ (8004064 <HAL_DMA_IRQHandler+0x698>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d040      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a80      	ldr	r2, [pc, #512]	@ (8004068 <HAL_DMA_IRQHandler+0x69c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d03b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800406c <HAL_DMA_IRQHandler+0x6a0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d036      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7d      	ldr	r2, [pc, #500]	@ (8004070 <HAL_DMA_IRQHandler+0x6a4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d031      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7c      	ldr	r2, [pc, #496]	@ (8004074 <HAL_DMA_IRQHandler+0x6a8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d02c      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8004078 <HAL_DMA_IRQHandler+0x6ac>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d027      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a79      	ldr	r2, [pc, #484]	@ (800407c <HAL_DMA_IRQHandler+0x6b0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a77      	ldr	r2, [pc, #476]	@ (8004080 <HAL_DMA_IRQHandler+0x6b4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	@ (8004084 <HAL_DMA_IRQHandler+0x6b8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <HAL_DMA_IRQHandler+0x6bc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	@ (800408c <HAL_DMA_IRQHandler+0x6c0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	@ (8004090 <HAL_DMA_IRQHandler+0x6c4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a70      	ldr	r2, [pc, #448]	@ (8004094 <HAL_DMA_IRQHandler+0x6c8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x516>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_DMA_IRQHandler+0x6cc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x52c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e009      	b.n	8003f0c <HAL_DMA_IRQHandler+0x540>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d03e      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2210      	movs	r2, #16
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d018      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d024      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	e01f      	b.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01b      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
 8003f5e:	e016      	b.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0208 	bic.w	r2, r2, #8
 8003f7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	2220      	movs	r2, #32
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8110 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800405c <HAL_DMA_IRQHandler+0x690>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04a      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8004060 <HAL_DMA_IRQHandler+0x694>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d045      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_DMA_IRQHandler+0x698>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d040      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <HAL_DMA_IRQHandler+0x69c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d03b      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a26      	ldr	r2, [pc, #152]	@ (800406c <HAL_DMA_IRQHandler+0x6a0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d036      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <HAL_DMA_IRQHandler+0x6a4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <HAL_DMA_IRQHandler+0x6a8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_DMA_IRQHandler+0x6ac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d027      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a20      	ldr	r2, [pc, #128]	@ (800407c <HAL_DMA_IRQHandler+0x6b0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d022      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_DMA_IRQHandler+0x6b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01d      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_DMA_IRQHandler+0x6b8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_DMA_IRQHandler+0x6bc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1a      	ldr	r2, [pc, #104]	@ (800408c <HAL_DMA_IRQHandler+0x6c0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a19      	ldr	r2, [pc, #100]	@ (8004090 <HAL_DMA_IRQHandler+0x6c4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a17      	ldr	r2, [pc, #92]	@ (8004094 <HAL_DMA_IRQHandler+0x6c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_DMA_IRQHandler+0x678>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a16      	ldr	r2, [pc, #88]	@ (8004098 <HAL_DMA_IRQHandler+0x6cc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d12b      	bne.n	800409c <HAL_DMA_IRQHandler+0x6d0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e02a      	b.n	80040b0 <HAL_DMA_IRQHandler+0x6e4>
 800405a:	bf00      	nop
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8087 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2220      	movs	r2, #32
 80040c0:	409a      	lsls	r2, r3
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d139      	bne.n	8004146 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0216 	bic.w	r2, r2, #22
 80040e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <HAL_DMA_IRQHandler+0x736>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0208 	bic.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	223f      	movs	r2, #63	@ 0x3f
 800411c:	409a      	lsls	r2, r3
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 834a 	beq.w	80047d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
          }
          return;
 8004144:	e344      	b.n	80047d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d018      	beq.n	8004186 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d108      	bne.n	8004174 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
 8004172:	e027      	b.n	80041c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d023      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
 8004184:	e01e      	b.n	80041c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0210 	bic.w	r2, r2, #16
 80041a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8306 	beq.w	80047da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8088 	beq.w	80042ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7a      	ldr	r2, [pc, #488]	@ (80043d4 <HAL_DMA_IRQHandler+0xa08>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d04a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a79      	ldr	r2, [pc, #484]	@ (80043d8 <HAL_DMA_IRQHandler+0xa0c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d045      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a77      	ldr	r2, [pc, #476]	@ (80043dc <HAL_DMA_IRQHandler+0xa10>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d040      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a76      	ldr	r2, [pc, #472]	@ (80043e0 <HAL_DMA_IRQHandler+0xa14>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d03b      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a74      	ldr	r2, [pc, #464]	@ (80043e4 <HAL_DMA_IRQHandler+0xa18>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d036      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a73      	ldr	r2, [pc, #460]	@ (80043e8 <HAL_DMA_IRQHandler+0xa1c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d031      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a71      	ldr	r2, [pc, #452]	@ (80043ec <HAL_DMA_IRQHandler+0xa20>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a70      	ldr	r2, [pc, #448]	@ (80043f0 <HAL_DMA_IRQHandler+0xa24>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6e      	ldr	r2, [pc, #440]	@ (80043f4 <HAL_DMA_IRQHandler+0xa28>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6d      	ldr	r2, [pc, #436]	@ (80043f8 <HAL_DMA_IRQHandler+0xa2c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a6b      	ldr	r2, [pc, #428]	@ (80043fc <HAL_DMA_IRQHandler+0xa30>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a6a      	ldr	r2, [pc, #424]	@ (8004400 <HAL_DMA_IRQHandler+0xa34>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a68      	ldr	r2, [pc, #416]	@ (8004404 <HAL_DMA_IRQHandler+0xa38>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a67      	ldr	r2, [pc, #412]	@ (8004408 <HAL_DMA_IRQHandler+0xa3c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	@ (800440c <HAL_DMA_IRQHandler+0xa40>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_DMA_IRQHandler+0x8b8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a64      	ldr	r2, [pc, #400]	@ (8004410 <HAL_DMA_IRQHandler+0xa44>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <HAL_DMA_IRQHandler+0x8ca>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e007      	b.n	80042a6 <HAL_DMA_IRQHandler+0x8da>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d307      	bcc.n	80042c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f2      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x8da>
 80042c0:	e000      	b.n	80042c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80042c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80042da:	e003      	b.n	80042e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8272 	beq.w	80047da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e26c      	b.n	80047da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a43      	ldr	r2, [pc, #268]	@ (8004414 <HAL_DMA_IRQHandler+0xa48>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a42      	ldr	r2, [pc, #264]	@ (8004418 <HAL_DMA_IRQHandler+0xa4c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a40      	ldr	r2, [pc, #256]	@ (800441c <HAL_DMA_IRQHandler+0xa50>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3f      	ldr	r2, [pc, #252]	@ (8004420 <HAL_DMA_IRQHandler+0xa54>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3d      	ldr	r2, [pc, #244]	@ (8004424 <HAL_DMA_IRQHandler+0xa58>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3c      	ldr	r2, [pc, #240]	@ (8004428 <HAL_DMA_IRQHandler+0xa5c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_DMA_IRQHandler+0xa60>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_IRQHandler+0x984>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a39      	ldr	r2, [pc, #228]	@ (8004430 <HAL_DMA_IRQHandler+0xa64>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_DMA_IRQHandler+0x988>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_DMA_IRQHandler+0x98a>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 823f 	beq.w	80047da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2204      	movs	r2, #4
 800436e:	409a      	lsls	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80cd 	beq.w	8004514 <HAL_DMA_IRQHandler+0xb48>
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80c7 	beq.w	8004514 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2204      	movs	r2, #4
 8004390:	409a      	lsls	r2, r3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d049      	beq.n	8004434 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8210 	beq.w	80047d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043bc:	e20a      	b.n	80047d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8206 	beq.w	80047d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d0:	e200      	b.n	80047d4 <HAL_DMA_IRQHandler+0xe08>
 80043d2:	bf00      	nop
 80043d4:	40020010 	.word	0x40020010
 80043d8:	40020028 	.word	0x40020028
 80043dc:	40020040 	.word	0x40020040
 80043e0:	40020058 	.word	0x40020058
 80043e4:	40020070 	.word	0x40020070
 80043e8:	40020088 	.word	0x40020088
 80043ec:	400200a0 	.word	0x400200a0
 80043f0:	400200b8 	.word	0x400200b8
 80043f4:	40020410 	.word	0x40020410
 80043f8:	40020428 	.word	0x40020428
 80043fc:	40020440 	.word	0x40020440
 8004400:	40020458 	.word	0x40020458
 8004404:	40020470 	.word	0x40020470
 8004408:	40020488 	.word	0x40020488
 800440c:	400204a0 	.word	0x400204a0
 8004410:	400204b8 	.word	0x400204b8
 8004414:	58025408 	.word	0x58025408
 8004418:	5802541c 	.word	0x5802541c
 800441c:	58025430 	.word	0x58025430
 8004420:	58025444 	.word	0x58025444
 8004424:	58025458 	.word	0x58025458
 8004428:	5802546c 	.word	0x5802546c
 800442c:	58025480 	.word	0x58025480
 8004430:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d160      	bne.n	8004500 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7f      	ldr	r2, [pc, #508]	@ (8004640 <HAL_DMA_IRQHandler+0xc74>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d04a      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7d      	ldr	r2, [pc, #500]	@ (8004644 <HAL_DMA_IRQHandler+0xc78>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d045      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7c      	ldr	r2, [pc, #496]	@ (8004648 <HAL_DMA_IRQHandler+0xc7c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d040      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a7a      	ldr	r2, [pc, #488]	@ (800464c <HAL_DMA_IRQHandler+0xc80>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a79      	ldr	r2, [pc, #484]	@ (8004650 <HAL_DMA_IRQHandler+0xc84>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d036      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a77      	ldr	r2, [pc, #476]	@ (8004654 <HAL_DMA_IRQHandler+0xc88>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d031      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a76      	ldr	r2, [pc, #472]	@ (8004658 <HAL_DMA_IRQHandler+0xc8c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d02c      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a74      	ldr	r2, [pc, #464]	@ (800465c <HAL_DMA_IRQHandler+0xc90>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d027      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a73      	ldr	r2, [pc, #460]	@ (8004660 <HAL_DMA_IRQHandler+0xc94>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a71      	ldr	r2, [pc, #452]	@ (8004664 <HAL_DMA_IRQHandler+0xc98>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01d      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a70      	ldr	r2, [pc, #448]	@ (8004668 <HAL_DMA_IRQHandler+0xc9c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6e      	ldr	r2, [pc, #440]	@ (800466c <HAL_DMA_IRQHandler+0xca0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6d      	ldr	r2, [pc, #436]	@ (8004670 <HAL_DMA_IRQHandler+0xca4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004674 <HAL_DMA_IRQHandler+0xca8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6a      	ldr	r2, [pc, #424]	@ (8004678 <HAL_DMA_IRQHandler+0xcac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_DMA_IRQHandler+0xb12>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a68      	ldr	r2, [pc, #416]	@ (800467c <HAL_DMA_IRQHandler+0xcb0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <HAL_DMA_IRQHandler+0xb24>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0208 	bic.w	r2, r2, #8
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e007      	b.n	8004500 <HAL_DMA_IRQHandler+0xb34>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8165 	beq.w	80047d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004512:	e15f      	b.n	80047d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2202      	movs	r2, #2
 800451e:	409a      	lsls	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80c5 	beq.w	80046b4 <HAL_DMA_IRQHandler+0xce8>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80bf 	beq.w	80046b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2202      	movs	r2, #2
 8004540:	409a      	lsls	r2, r3
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 813a 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456c:	e134      	b.n	80047d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8130 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	e12a      	b.n	80047d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 8089 	bne.w	80046a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2b      	ldr	r2, [pc, #172]	@ (8004640 <HAL_DMA_IRQHandler+0xc74>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d04a      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a29      	ldr	r2, [pc, #164]	@ (8004644 <HAL_DMA_IRQHandler+0xc78>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d045      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a28      	ldr	r2, [pc, #160]	@ (8004648 <HAL_DMA_IRQHandler+0xc7c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d040      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a26      	ldr	r2, [pc, #152]	@ (800464c <HAL_DMA_IRQHandler+0xc80>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d03b      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <HAL_DMA_IRQHandler+0xc84>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d036      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	@ (8004654 <HAL_DMA_IRQHandler+0xc88>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a22      	ldr	r2, [pc, #136]	@ (8004658 <HAL_DMA_IRQHandler+0xc8c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d02c      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a20      	ldr	r2, [pc, #128]	@ (800465c <HAL_DMA_IRQHandler+0xc90>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d027      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <HAL_DMA_IRQHandler+0xc94>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004664 <HAL_DMA_IRQHandler+0xc98>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004668 <HAL_DMA_IRQHandler+0xc9c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1a      	ldr	r2, [pc, #104]	@ (800466c <HAL_DMA_IRQHandler+0xca0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <HAL_DMA_IRQHandler+0xca4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	@ (8004674 <HAL_DMA_IRQHandler+0xca8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	@ (8004678 <HAL_DMA_IRQHandler+0xcac>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_DMA_IRQHandler+0xc62>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	@ (800467c <HAL_DMA_IRQHandler+0xcb0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d128      	bne.n	8004680 <HAL_DMA_IRQHandler+0xcb4>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0214 	bic.w	r2, r2, #20
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e027      	b.n	8004690 <HAL_DMA_IRQHandler+0xcc4>
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 020a 	bic.w	r2, r2, #10
 800468e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8097 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b2:	e091      	b.n	80047d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2208      	movs	r2, #8
 80046be:	409a      	lsls	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8088 	beq.w	80047da <HAL_DMA_IRQHandler+0xe0e>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8082 	beq.w	80047da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a41      	ldr	r2, [pc, #260]	@ (80047e0 <HAL_DMA_IRQHandler+0xe14>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3f      	ldr	r2, [pc, #252]	@ (80047e4 <HAL_DMA_IRQHandler+0xe18>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <HAL_DMA_IRQHandler+0xe1c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ec <HAL_DMA_IRQHandler+0xe20>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a3b      	ldr	r2, [pc, #236]	@ (80047f0 <HAL_DMA_IRQHandler+0xe24>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a39      	ldr	r2, [pc, #228]	@ (80047f4 <HAL_DMA_IRQHandler+0xe28>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a38      	ldr	r2, [pc, #224]	@ (80047f8 <HAL_DMA_IRQHandler+0xe2c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a36      	ldr	r2, [pc, #216]	@ (80047fc <HAL_DMA_IRQHandler+0xe30>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a35      	ldr	r2, [pc, #212]	@ (8004800 <HAL_DMA_IRQHandler+0xe34>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a33      	ldr	r2, [pc, #204]	@ (8004804 <HAL_DMA_IRQHandler+0xe38>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <HAL_DMA_IRQHandler+0xe3c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a30      	ldr	r2, [pc, #192]	@ (800480c <HAL_DMA_IRQHandler+0xe40>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2f      	ldr	r2, [pc, #188]	@ (8004810 <HAL_DMA_IRQHandler+0xe44>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2d      	ldr	r2, [pc, #180]	@ (8004814 <HAL_DMA_IRQHandler+0xe48>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2c      	ldr	r2, [pc, #176]	@ (8004818 <HAL_DMA_IRQHandler+0xe4c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0xdaa>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2a      	ldr	r2, [pc, #168]	@ (800481c <HAL_DMA_IRQHandler+0xe50>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_DMA_IRQHandler+0xdbc>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 021c 	bic.w	r2, r2, #28
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <HAL_DMA_IRQHandler+0xdcc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 020e 	bic.w	r2, r2, #14
 8004796:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2201      	movs	r2, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
 80047ce:	e004      	b.n	80047da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80047d0:	bf00      	nop
 80047d2:	e002      	b.n	80047da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047da:	3728      	adds	r7, #40	@ 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40020010 	.word	0x40020010
 80047e4:	40020028 	.word	0x40020028
 80047e8:	40020040 	.word	0x40020040
 80047ec:	40020058 	.word	0x40020058
 80047f0:	40020070 	.word	0x40020070
 80047f4:	40020088 	.word	0x40020088
 80047f8:	400200a0 	.word	0x400200a0
 80047fc:	400200b8 	.word	0x400200b8
 8004800:	40020410 	.word	0x40020410
 8004804:	40020428 	.word	0x40020428
 8004808:	40020440 	.word	0x40020440
 800480c:	40020458 	.word	0x40020458
 8004810:	40020470 	.word	0x40020470
 8004814:	40020488 	.word	0x40020488
 8004818:	400204a0 	.word	0x400204a0
 800481c:	400204b8 	.word	0x400204b8

08004820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a42      	ldr	r2, [pc, #264]	@ (8004938 <DMA_CalcBaseAndBitshift+0x118>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d04a      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a41      	ldr	r2, [pc, #260]	@ (800493c <DMA_CalcBaseAndBitshift+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d045      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3f      	ldr	r2, [pc, #252]	@ (8004940 <DMA_CalcBaseAndBitshift+0x120>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d040      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3e      	ldr	r2, [pc, #248]	@ (8004944 <DMA_CalcBaseAndBitshift+0x124>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d03b      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <DMA_CalcBaseAndBitshift+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d036      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3b      	ldr	r2, [pc, #236]	@ (800494c <DMA_CalcBaseAndBitshift+0x12c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d031      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a39      	ldr	r2, [pc, #228]	@ (8004950 <DMA_CalcBaseAndBitshift+0x130>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02c      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a38      	ldr	r2, [pc, #224]	@ (8004954 <DMA_CalcBaseAndBitshift+0x134>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d027      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a36      	ldr	r2, [pc, #216]	@ (8004958 <DMA_CalcBaseAndBitshift+0x138>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d022      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a35      	ldr	r2, [pc, #212]	@ (800495c <DMA_CalcBaseAndBitshift+0x13c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d01d      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a33      	ldr	r2, [pc, #204]	@ (8004960 <DMA_CalcBaseAndBitshift+0x140>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a32      	ldr	r2, [pc, #200]	@ (8004964 <DMA_CalcBaseAndBitshift+0x144>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a30      	ldr	r2, [pc, #192]	@ (8004968 <DMA_CalcBaseAndBitshift+0x148>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	@ (800496c <DMA_CalcBaseAndBitshift+0x14c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004970 <DMA_CalcBaseAndBitshift+0x150>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xa8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <DMA_CalcBaseAndBitshift+0x154>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <DMA_CalcBaseAndBitshift+0xac>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <DMA_CalcBaseAndBitshift+0xae>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d024      	beq.n	800491c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	3b10      	subs	r3, #16
 80048da:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <DMA_CalcBaseAndBitshift+0x158>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	4a24      	ldr	r2, [pc, #144]	@ (800497c <DMA_CalcBaseAndBitshift+0x15c>)
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d908      	bls.n	800490c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <DMA_CalcBaseAndBitshift+0x160>)
 8004902:	4013      	ands	r3, r2
 8004904:	1d1a      	adds	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	659a      	str	r2, [r3, #88]	@ 0x58
 800490a:	e00d      	b.n	8004928 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <DMA_CalcBaseAndBitshift+0x160>)
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6593      	str	r3, [r2, #88]	@ 0x58
 800491a:	e005      	b.n	8004928 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
 8004978:	aaaaaaab 	.word	0xaaaaaaab
 800497c:	0800ab1c 	.word	0x0800ab1c
 8004980:	fffffc00 	.word	0xfffffc00

08004984 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d120      	bne.n	80049da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	2b03      	cmp	r3, #3
 800499e:	d858      	bhi.n	8004a52 <DMA_CheckFifoParam+0xce>
 80049a0:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <DMA_CheckFifoParam+0x24>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049b9 	.word	0x080049b9
 80049b4:	08004a53 	.word	0x08004a53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d048      	beq.n	8004a56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049c8:	e045      	b.n	8004a56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049d2:	d142      	bne.n	8004a5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049d8:	e03f      	b.n	8004a5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e2:	d123      	bne.n	8004a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d838      	bhi.n	8004a5e <DMA_CheckFifoParam+0xda>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <DMA_CheckFifoParam+0x70>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a0b 	.word	0x08004a0b
 80049fc:	08004a05 	.word	0x08004a05
 8004a00:	08004a1d 	.word	0x08004a1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
        break;
 8004a08:	e030      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d025      	beq.n	8004a62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a1a:	e022      	b.n	8004a62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a24:	d11f      	bne.n	8004a66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a2a:	e01c      	b.n	8004a66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d902      	bls.n	8004a3a <DMA_CheckFifoParam+0xb6>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d003      	beq.n	8004a40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a38:	e018      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a3e:	e015      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00e      	beq.n	8004a6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a50:	e00b      	b.n	8004a6a <DMA_CheckFifoParam+0xe6>
        break;
 8004a52:	bf00      	nop
 8004a54:	e00a      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        break;
 8004a56:	bf00      	nop
 8004a58:	e008      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e006      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e004      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        break;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
        break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <DMA_CheckFifoParam+0xe8>
    break;
 8004a6a:	bf00      	nop
    }
  }

  return status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop

08004a7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	@ (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a36      	ldr	r2, [pc, #216]	@ (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a35      	ldr	r2, [pc, #212]	@ (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a33      	ldr	r2, [pc, #204]	@ (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a32      	ldr	r2, [pc, #200]	@ (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a30      	ldr	r2, [pc, #192]	@ (8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2f      	ldr	r2, [pc, #188]	@ (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01a      	beq.n	8004b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	3b08      	subs	r3, #8
 8004aec:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a24      	ldr	r2, [pc, #144]	@ (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b18:	e024      	b.n	8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	3b10      	subs	r3, #16
 8004b22:	4a1e      	ldr	r2, [pc, #120]	@ (8004b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d806      	bhi.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d902      	bls.n	8004b42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4b18      	ldr	r3, [pc, #96]	@ (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	58025408 	.word	0x58025408
 8004b74:	5802541c 	.word	0x5802541c
 8004b78:	58025430 	.word	0x58025430
 8004b7c:	58025444 	.word	0x58025444
 8004b80:	58025458 	.word	0x58025458
 8004b84:	5802546c 	.word	0x5802546c
 8004b88:	58025480 	.word	0x58025480
 8004b8c:	58025494 	.word	0x58025494
 8004b90:	cccccccd 	.word	0xcccccccd
 8004b94:	16009600 	.word	0x16009600
 8004b98:	58025880 	.word	0x58025880
 8004b9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ba0:	400204b8 	.word	0x400204b8
 8004ba4:	4002040f 	.word	0x4002040f
 8004ba8:	10008200 	.word	0x10008200
 8004bac:	40020880 	.word	0x40020880

08004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d04a      	beq.n	8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d847      	bhi.n	8004c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01d      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a21      	ldr	r2, [pc, #132]	@ (8004c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a15      	ldr	r2, [pc, #84]	@ (8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c38:	671a      	str	r2, [r3, #112]	@ 0x70
 8004c3a:	e009      	b.n	8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a11      	ldr	r2, [pc, #68]	@ (8004c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494
 8004c88:	1600963f 	.word	0x1600963f
 8004c8c:	58025940 	.word	0x58025940
 8004c90:	1000823f 	.word	0x1000823f
 8004c94:	40020940 	.word	0x40020940

08004c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	@ 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ca6:	4b89      	ldr	r3, [pc, #548]	@ (8004ecc <HAL_GPIO_Init+0x234>)
 8004ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004caa:	e194      	b.n	8004fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8186 	beq.w	8004fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d005      	beq.n	8004cdc <HAL_GPIO_Init+0x44>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d130      	bne.n	8004d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d12:	2201      	movs	r2, #1
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0201 	and.w	r2, r3, #1
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d017      	beq.n	8004d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	2203      	movs	r2, #3
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d123      	bne.n	8004dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	08da      	lsrs	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3208      	adds	r2, #8
 8004d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	220f      	movs	r2, #15
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	08da      	lsrs	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3208      	adds	r2, #8
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2203      	movs	r2, #3
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80e0 	beq.w	8004fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e10:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed0 <HAL_GPIO_Init+0x238>)
 8004e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e16:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed0 <HAL_GPIO_Init+0x238>)
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004e20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <HAL_GPIO_Init+0x238>)
 8004e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <HAL_GPIO_Init+0x23c>)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	220f      	movs	r2, #15
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a20      	ldr	r2, [pc, #128]	@ (8004ed8 <HAL_GPIO_Init+0x240>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d052      	beq.n	8004f00 <HAL_GPIO_Init+0x268>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_GPIO_Init+0x244>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d031      	beq.n	8004ec6 <HAL_GPIO_Init+0x22e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_GPIO_Init+0x248>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02b      	beq.n	8004ec2 <HAL_GPIO_Init+0x22a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <HAL_GPIO_Init+0x24c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d025      	beq.n	8004ebe <HAL_GPIO_Init+0x226>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <HAL_GPIO_Init+0x250>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <HAL_GPIO_Init+0x222>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <HAL_GPIO_Init+0x254>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d019      	beq.n	8004eb6 <HAL_GPIO_Init+0x21e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef0 <HAL_GPIO_Init+0x258>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_GPIO_Init+0x21a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_GPIO_Init+0x25c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00d      	beq.n	8004eae <HAL_GPIO_Init+0x216>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a18      	ldr	r2, [pc, #96]	@ (8004ef8 <HAL_GPIO_Init+0x260>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <HAL_GPIO_Init+0x212>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	@ (8004efc <HAL_GPIO_Init+0x264>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_GPIO_Init+0x20e>
 8004ea2:	2309      	movs	r3, #9
 8004ea4:	e02d      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	e02b      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	e029      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eae:	2307      	movs	r3, #7
 8004eb0:	e027      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eb2:	2306      	movs	r3, #6
 8004eb4:	e025      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eb6:	2305      	movs	r3, #5
 8004eb8:	e023      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	e021      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e01f      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e01d      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e01b      	b.n	8004f02 <HAL_GPIO_Init+0x26a>
 8004eca:	bf00      	nop
 8004ecc:	58000080 	.word	0x58000080
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	58000400 	.word	0x58000400
 8004ed8:	58020000 	.word	0x58020000
 8004edc:	58020400 	.word	0x58020400
 8004ee0:	58020800 	.word	0x58020800
 8004ee4:	58020c00 	.word	0x58020c00
 8004ee8:	58021000 	.word	0x58021000
 8004eec:	58021400 	.word	0x58021400
 8004ef0:	58021800 	.word	0x58021800
 8004ef4:	58021c00 	.word	0x58021c00
 8004ef8:	58022000 	.word	0x58022000
 8004efc:	58022400 	.word	0x58022400
 8004f00:	2300      	movs	r3, #0
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	f002 0203 	and.w	r2, r2, #3
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	4093      	lsls	r3, r2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f12:	4938      	ldr	r1, [pc, #224]	@ (8004ff4 <HAL_GPIO_Init+0x35c>)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f47f ae63 	bne.w	8004cac <HAL_GPIO_Init+0x14>
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	3724      	adds	r7, #36	@ 0x24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	58000400 	.word	0x58000400

08004ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
 8005004:	4613      	mov	r3, r2
 8005006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005008:	787b      	ldrb	r3, [r7, #1]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005014:	e003      	b.n	800501e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005016:	887b      	ldrh	r3, [r7, #2]
 8005018:	041a      	lsls	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	619a      	str	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005038:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f804 	bl	800505e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800507c:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_PWREx_ConfigSupply+0x70>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d00a      	beq.n	800509e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005088:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_PWREx_ConfigSupply+0x70>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d001      	beq.n	800509a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e01f      	b.n	80050da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e01d      	b.n	80050da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800509e:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <HAL_PWREx_ConfigSupply+0x70>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f023 0207 	bic.w	r2, r3, #7
 80050a6:	490f      	ldr	r1, [pc, #60]	@ (80050e4 <HAL_PWREx_ConfigSupply+0x70>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050ae:	f7fc faf9 	bl	80016a4 <HAL_GetTick>
 80050b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050b4:	e009      	b.n	80050ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050b6:	f7fc faf5 	bl	80016a4 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050c4:	d901      	bls.n	80050ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e007      	b.n	80050da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050ca:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <HAL_PWREx_ConfigSupply+0x70>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d6:	d1ee      	bne.n	80050b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	58024800 	.word	0x58024800

080050e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	@ 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f000 bc48 	b.w	800598c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8088 	beq.w	800521a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510a:	4b99      	ldr	r3, [pc, #612]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005114:	4b96      	ldr	r3, [pc, #600]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005118:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	2b10      	cmp	r3, #16
 800511e:	d007      	beq.n	8005130 <HAL_RCC_OscConfig+0x48>
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	2b18      	cmp	r3, #24
 8005124:	d111      	bne.n	800514a <HAL_RCC_OscConfig+0x62>
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b8f      	ldr	r3, [pc, #572]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d06d      	beq.n	8005218 <HAL_RCC_OscConfig+0x130>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d169      	bne.n	8005218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f000 bc21 	b.w	800598c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x7a>
 8005154:	4b86      	ldr	r3, [pc, #536]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a85      	ldr	r2, [pc, #532]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e02e      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x9c>
 800516a:	4b81      	ldr	r3, [pc, #516]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a80      	ldr	r2, [pc, #512]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b7e      	ldr	r3, [pc, #504]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a7d      	ldr	r2, [pc, #500]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800517c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0xc0>
 800518e:	4b78      	ldr	r3, [pc, #480]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a77      	ldr	r2, [pc, #476]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b75      	ldr	r3, [pc, #468]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a74      	ldr	r2, [pc, #464]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 80051a8:	4b71      	ldr	r3, [pc, #452]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a70      	ldr	r2, [pc, #448]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6d      	ldr	r2, [pc, #436]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fc fa6c 	bl	80016a4 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fc fa68 	bl	80016a4 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e3d4      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e2:	4b63      	ldr	r3, [pc, #396]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xe8>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc fa58 	bl	80016a4 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fc fa54 	bl	80016a4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e3c0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800520a:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x110>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80ca 	beq.w	80053bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005228:	4b51      	ldr	r3, [pc, #324]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005230:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005232:	4b4f      	ldr	r3, [pc, #316]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_RCC_OscConfig+0x166>
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b18      	cmp	r3, #24
 8005242:	d156      	bne.n	80052f2 <HAL_RCC_OscConfig+0x20a>
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d151      	bne.n	80052f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800524e:	4b48      	ldr	r3, [pc, #288]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x17e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e392      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005266:	4b42      	ldr	r3, [pc, #264]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 0219 	bic.w	r2, r3, #25
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	493f      	ldr	r1, [pc, #252]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc fa14 	bl	80016a4 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005280:	f7fc fa10 	bl	80016a4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e37c      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005292:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529e:	f7fc fa0d 	bl	80016bc <HAL_GetREVID>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d817      	bhi.n	80052dc <HAL_RCC_OscConfig+0x1f4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b40      	cmp	r3, #64	@ 0x40
 80052b2:	d108      	bne.n	80052c6 <HAL_RCC_OscConfig+0x1de>
 80052b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80052bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c4:	e07a      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	031b      	lsls	r3, r3, #12
 80052d4:	4926      	ldr	r1, [pc, #152]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052da:	e06f      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052dc:	4b24      	ldr	r3, [pc, #144]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	4921      	ldr	r1, [pc, #132]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f0:	e064      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d047      	beq.n	800538a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 0219 	bic.w	r2, r3, #25
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	491a      	ldr	r1, [pc, #104]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc f9ca 	bl	80016a4 <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005314:	f7fc f9c6 	bl	80016a4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e332      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	f7fc f9c3 	bl	80016bc <HAL_GetREVID>
 8005336:	4603      	mov	r3, r0
 8005338:	f241 0203 	movw	r2, #4099	@ 0x1003
 800533c:	4293      	cmp	r3, r2
 800533e:	d819      	bhi.n	8005374 <HAL_RCC_OscConfig+0x28c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d108      	bne.n	800535a <HAL_RCC_OscConfig+0x272>
 8005348:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005350:	4a07      	ldr	r2, [pc, #28]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005356:	6053      	str	r3, [r2, #4]
 8005358:	e030      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	4901      	ldr	r1, [pc, #4]	@ (8005370 <HAL_RCC_OscConfig+0x288>)
 800536a:	4313      	orrs	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
 800536e:	e025      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
 8005370:	58024400 	.word	0x58024400
 8005374:	4b9a      	ldr	r3, [pc, #616]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	4997      	ldr	r1, [pc, #604]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	e018      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538a:	4b95      	ldr	r3, [pc, #596]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a94      	ldr	r2, [pc, #592]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fc f985 	bl	80016a4 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539e:	f7fc f981 	bl	80016a4 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e2ed      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b0:	4b8b      	ldr	r3, [pc, #556]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a9 	beq.w	800551c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ca:	4b85      	ldr	r3, [pc, #532]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053d4:	4b82      	ldr	r3, [pc, #520]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d007      	beq.n	80053f0 <HAL_RCC_OscConfig+0x308>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b18      	cmp	r3, #24
 80053e4:	d13a      	bne.n	800545c <HAL_RCC_OscConfig+0x374>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d135      	bne.n	800545c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f0:	4b7b      	ldr	r3, [pc, #492]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x320>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b80      	cmp	r3, #128	@ 0x80
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e2c1      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005408:	f7fc f958 	bl	80016bc <HAL_GetREVID>
 800540c:	4603      	mov	r3, r0
 800540e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005412:	4293      	cmp	r3, r2
 8005414:	d817      	bhi.n	8005446 <HAL_RCC_OscConfig+0x35e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	2b20      	cmp	r3, #32
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x348>
 800541e:	4b70      	ldr	r3, [pc, #448]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005426:	4a6e      	ldr	r2, [pc, #440]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800542e:	e075      	b.n	800551c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005430:	4b6b      	ldr	r3, [pc, #428]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	069b      	lsls	r3, r3, #26
 800543e:	4968      	ldr	r1, [pc, #416]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005444:	e06a      	b.n	800551c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005446:	4b66      	ldr	r3, [pc, #408]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	061b      	lsls	r3, r3, #24
 8005454:	4962      	ldr	r1, [pc, #392]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800545a:	e05f      	b.n	800551c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d042      	beq.n	80054ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005464:	4b5e      	ldr	r3, [pc, #376]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5d      	ldr	r2, [pc, #372]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800546a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fc f918 	bl	80016a4 <HAL_GetTick>
 8005474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005478:	f7fc f914 	bl	80016a4 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e280      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800548a:	4b55      	ldr	r3, [pc, #340]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005496:	f7fc f911 	bl	80016bc <HAL_GetREVID>
 800549a:	4603      	mov	r3, r0
 800549c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d817      	bhi.n	80054d4 <HAL_RCC_OscConfig+0x3ec>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d108      	bne.n	80054be <HAL_RCC_OscConfig+0x3d6>
 80054ac:	4b4c      	ldr	r3, [pc, #304]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80054b4:	4a4a      	ldr	r2, [pc, #296]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054ba:	6053      	str	r3, [r2, #4]
 80054bc:	e02e      	b.n	800551c <HAL_RCC_OscConfig+0x434>
 80054be:	4b48      	ldr	r3, [pc, #288]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	069b      	lsls	r3, r3, #26
 80054cc:	4944      	ldr	r1, [pc, #272]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
 80054d2:	e023      	b.n	800551c <HAL_RCC_OscConfig+0x434>
 80054d4:	4b42      	ldr	r3, [pc, #264]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	493f      	ldr	r1, [pc, #252]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60cb      	str	r3, [r1, #12]
 80054e8:	e018      	b.n	800551c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054ea:	4b3d      	ldr	r3, [pc, #244]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3c      	ldr	r2, [pc, #240]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fc f8d5 	bl	80016a4 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054fe:	f7fc f8d1 	bl	80016a4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e23d      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005510:	4b33      	ldr	r3, [pc, #204]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d036      	beq.n	8005596 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005530:	4b2b      	ldr	r3, [pc, #172]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005534:	4a2a      	ldr	r2, [pc, #168]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc f8b2 	bl	80016a4 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005544:	f7fc f8ae 	bl	80016a4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e21a      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005556:	4b22      	ldr	r3, [pc, #136]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x45c>
 8005562:	e018      	b.n	8005596 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005564:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fc f898 	bl	80016a4 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fc f894 	bl	80016a4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e200      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800558a:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d039      	beq.n	8005616 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a0c      	ldr	r2, [pc, #48]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b6:	f7fc f875 	bl	80016a4 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055be:	f7fc f871 	bl	80016a4 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e1dd      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x4d6>
 80055dc:	e01b      	b.n	8005616 <HAL_RCC_OscConfig+0x52e>
 80055de:	bf00      	nop
 80055e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055e4:	4b9b      	ldr	r3, [pc, #620]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80055ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055f0:	f7fc f858 	bl	80016a4 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f8:	f7fc f854 	bl	80016a4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1c0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800560a:	4b92      	ldr	r3, [pc, #584]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8081 	beq.w	8005726 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005624:	4b8c      	ldr	r3, [pc, #560]	@ (8005858 <HAL_RCC_OscConfig+0x770>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a8b      	ldr	r2, [pc, #556]	@ (8005858 <HAL_RCC_OscConfig+0x770>)
 800562a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005630:	f7fc f838 	bl	80016a4 <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005638:	f7fc f834 	bl	80016a4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	@ 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e1a0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564a:	4b83      	ldr	r3, [pc, #524]	@ (8005858 <HAL_RCC_OscConfig+0x770>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d106      	bne.n	800566c <HAL_RCC_OscConfig+0x584>
 800565e:	4b7d      	ldr	r3, [pc, #500]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	4a7c      	ldr	r2, [pc, #496]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	6713      	str	r3, [r2, #112]	@ 0x70
 800566a:	e02d      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10c      	bne.n	800568e <HAL_RCC_OscConfig+0x5a6>
 8005674:	4b77      	ldr	r3, [pc, #476]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	4a76      	ldr	r2, [pc, #472]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005680:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	4a73      	ldr	r2, [pc, #460]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005686:	f023 0304 	bic.w	r3, r3, #4
 800568a:	6713      	str	r3, [r2, #112]	@ 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x5c8>
 8005696:	4b6f      	ldr	r3, [pc, #444]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	4a6e      	ldr	r2, [pc, #440]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 80056b0:	4b68      	ldr	r3, [pc, #416]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a67      	ldr	r2, [pc, #412]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	4b65      	ldr	r3, [pc, #404]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a64      	ldr	r2, [pc, #400]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fb ffe8 	bl	80016a4 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fb ffe4 	bl	80016a4 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e14e      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ee:	4b59      	ldr	r3, [pc, #356]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x5f0>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fb ffd2 	bl	80016a4 <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fb ffce 	bl	80016a4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e138      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800571a:	4b4e      	ldr	r3, [pc, #312]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 812d 	beq.w	800598a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005730:	4b48      	ldr	r3, [pc, #288]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005738:	2b18      	cmp	r3, #24
 800573a:	f000 80bd 	beq.w	80058b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	2b02      	cmp	r3, #2
 8005744:	f040 809e 	bne.w	8005884 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b42      	ldr	r3, [pc, #264]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a41      	ldr	r2, [pc, #260]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fb ffa6 	bl	80016a4 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fb ffa2 	bl	80016a4 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e10e      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800576e:	4b39      	ldr	r3, [pc, #228]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800577a:	4b36      	ldr	r3, [pc, #216]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800577e:	4b37      	ldr	r3, [pc, #220]	@ (800585c <HAL_RCC_OscConfig+0x774>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	430a      	orrs	r2, r1
 800578e:	4931      	ldr	r1, [pc, #196]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	628b      	str	r3, [r1, #40]	@ 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	3b01      	subs	r3, #1
 800579a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	3b01      	subs	r3, #1
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057bc:	3b01      	subs	r3, #1
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057c4:	4923      	ldr	r1, [pc, #140]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057ca:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057da:	4b21      	ldr	r3, [pc, #132]	@ (8005860 <HAL_RCC_OscConfig+0x778>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	491b      	ldr	r1, [pc, #108]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	f023 020c 	bic.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	4917      	ldr	r1, [pc, #92]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	f023 0202 	bic.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	4912      	ldr	r1, [pc, #72]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800580e:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	4a10      	ldr	r2, [pc, #64]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581a:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005826:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 800582c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005832:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	4a07      	ldr	r2, [pc, #28]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583e:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a04      	ldr	r2, [pc, #16]	@ (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fb ff2b 	bl	80016a4 <HAL_GetTick>
 800584e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005850:	e011      	b.n	8005876 <HAL_RCC_OscConfig+0x78e>
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400
 8005858:	58024800 	.word	0x58024800
 800585c:	fffffc0c 	.word	0xfffffc0c
 8005860:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fb ff1e 	bl	80016a4 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e08a      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005876:	4b47      	ldr	r3, [pc, #284]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x77c>
 8005882:	e082      	b.n	800598a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b43      	ldr	r3, [pc, #268]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a42      	ldr	r2, [pc, #264]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fb ff08 	bl	80016a4 <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fb ff04 	bl	80016a4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e070      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x7b0>
 80058b6:	e068      	b.n	800598a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058b8:	4b36      	ldr	r3, [pc, #216]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058be:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d031      	beq.n	8005930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f003 0203 	and.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d12a      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d122      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d11a      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0a5b      	lsrs	r3, r3, #9
 80058fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d111      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d108      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e02b      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005934:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800593e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d01f      	beq.n	800598a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	4a11      	ldr	r2, [pc, #68]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005956:	f7fb fea5 	bl	80016a4 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800595c:	bf00      	nop
 800595e:	f7fb fea1 	bl	80016a4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	4293      	cmp	r3, r2
 8005968:	d0f9      	beq.n	800595e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800596a:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800596c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <HAL_RCC_OscConfig+0x8b0>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005976:	00d2      	lsls	r2, r2, #3
 8005978:	4906      	ldr	r1, [pc, #24]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800597a:	4313      	orrs	r3, r2
 800597c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	@ 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	58024400 	.word	0x58024400
 8005998:	ffff0007 	.word	0xffff0007

0800599c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e19c      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b8a      	ldr	r3, [pc, #552]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d910      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b87      	ldr	r3, [pc, #540]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 020f 	bic.w	r2, r3, #15
 80059c6:	4985      	ldr	r1, [pc, #532]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b83      	ldr	r3, [pc, #524]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e184      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	4b7b      	ldr	r3, [pc, #492]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d908      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059fc:	4b78      	ldr	r3, [pc, #480]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	4975      	ldr	r1, [pc, #468]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	4b70      	ldr	r3, [pc, #448]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d908      	bls.n	8005a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	496a      	ldr	r1, [pc, #424]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	4b64      	ldr	r3, [pc, #400]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d908      	bls.n	8005a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a58:	4b61      	ldr	r3, [pc, #388]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	495e      	ldr	r1, [pc, #376]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d010      	beq.n	8005a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	4b59      	ldr	r3, [pc, #356]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d908      	bls.n	8005a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a86:	4b56      	ldr	r3, [pc, #344]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4953      	ldr	r1, [pc, #332]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d908      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f023 020f 	bic.w	r2, r3, #15
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4947      	ldr	r1, [pc, #284]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d055      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ad2:	4b43      	ldr	r3, [pc, #268]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4940      	ldr	r1, [pc, #256]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aec:	4b3c      	ldr	r3, [pc, #240]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d121      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0f6      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b04:	4b36      	ldr	r3, [pc, #216]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d115      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0ea      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b1c:	4b30      	ldr	r3, [pc, #192]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d109      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0de      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0d6      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b3c:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f023 0207 	bic.w	r2, r3, #7
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4925      	ldr	r1, [pc, #148]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fb fda9 	bl	80016a4 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b56:	f7fb fda5 	bl	80016a4 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0be      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d1eb      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d208      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f023 020f 	bic.w	r2, r3, #15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	490e      	ldr	r1, [pc, #56]	@ (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d214      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 020f 	bic.w	r2, r3, #15
 8005bc2:	4906      	ldr	r1, [pc, #24]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e086      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
 8005bdc:	52002000 	.word	0x52002000
 8005be0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d208      	bcs.n	8005c12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c00:	4b3c      	ldr	r3, [pc, #240]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	4939      	ldr	r1, [pc, #228]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d010      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	4b34      	ldr	r3, [pc, #208]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d208      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c2e:	4b31      	ldr	r3, [pc, #196]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	492e      	ldr	r1, [pc, #184]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	4b28      	ldr	r3, [pc, #160]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d208      	bcs.n	8005c6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c5c:	4b25      	ldr	r3, [pc, #148]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4922      	ldr	r1, [pc, #136]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d010      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d208      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	4917      	ldr	r1, [pc, #92]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c9c:	f000 f834 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	4912      	ldr	r1, [pc, #72]	@ (8005cf8 <HAL_RCC_ClockConfig+0x35c>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cba:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf8 <HAL_RCC_ClockConfig+0x35c>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cfc <HAL_RCC_ClockConfig+0x360>)
 8005cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005d00 <HAL_RCC_ClockConfig+0x364>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cda:	4b0a      	ldr	r3, [pc, #40]	@ (8005d04 <HAL_RCC_ClockConfig+0x368>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb fc96 	bl	8001610 <HAL_InitTick>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	0800ab0c 	.word	0x0800ab0c
 8005cfc:	24000004 	.word	0x24000004
 8005d00:	24000000 	.word	0x24000000
 8005d04:	24000008 	.word	0x24000008

08005d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	@ 0x24
 8005d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0e:	4bb3      	ldr	r3, [pc, #716]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d16:	2b18      	cmp	r3, #24
 8005d18:	f200 8155 	bhi.w	8005fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005fc7 	.word	0x08005fc7
 8005d2c:	08005fc7 	.word	0x08005fc7
 8005d30:	08005fc7 	.word	0x08005fc7
 8005d34:	08005fc7 	.word	0x08005fc7
 8005d38:	08005fc7 	.word	0x08005fc7
 8005d3c:	08005fc7 	.word	0x08005fc7
 8005d40:	08005fc7 	.word	0x08005fc7
 8005d44:	08005daf 	.word	0x08005daf
 8005d48:	08005fc7 	.word	0x08005fc7
 8005d4c:	08005fc7 	.word	0x08005fc7
 8005d50:	08005fc7 	.word	0x08005fc7
 8005d54:	08005fc7 	.word	0x08005fc7
 8005d58:	08005fc7 	.word	0x08005fc7
 8005d5c:	08005fc7 	.word	0x08005fc7
 8005d60:	08005fc7 	.word	0x08005fc7
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	08005fc7 	.word	0x08005fc7
 8005d6c:	08005fc7 	.word	0x08005fc7
 8005d70:	08005fc7 	.word	0x08005fc7
 8005d74:	08005fc7 	.word	0x08005fc7
 8005d78:	08005fc7 	.word	0x08005fc7
 8005d7c:	08005fc7 	.word	0x08005fc7
 8005d80:	08005fc7 	.word	0x08005fc7
 8005d84:	08005dbb 	.word	0x08005dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d88:	4b94      	ldr	r3, [pc, #592]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d94:	4b91      	ldr	r3, [pc, #580]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a90      	ldr	r2, [pc, #576]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005da6:	e111      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005da8:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005daa:	61bb      	str	r3, [r7, #24]
      break;
 8005dac:	e10e      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dae:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005db0:	61bb      	str	r3, [r7, #24]
      break;
 8005db2:	e10b      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005db4:	4b8c      	ldr	r3, [pc, #560]	@ (8005fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005db6:	61bb      	str	r3, [r7, #24]
      break;
 8005db8:	e108      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dba:	4b88      	ldr	r3, [pc, #544]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005dc4:	4b85      	ldr	r3, [pc, #532]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005dd0:	4b82      	ldr	r3, [pc, #520]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dda:	4b80      	ldr	r3, [pc, #512]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80e1 	beq.w	8005fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	f000 8083 	beq.w	8005f0c <HAL_RCC_GetSysClockFreq+0x204>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	f200 80a1 	bhi.w	8005f50 <HAL_RCC_GetSysClockFreq+0x248>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x114>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d056      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e1a:	e099      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02d      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e28:	4b6c      	ldr	r3, [pc, #432]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	4a6b      	ldr	r2, [pc, #428]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b62      	ldr	r3, [pc, #392]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e82:	e087      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b51      	ldr	r3, [pc, #324]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eaa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ec6:	e065      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b40      	ldr	r3, [pc, #256]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f0a:	e043      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f4e:	e021      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f62:	4b1e      	ldr	r3, [pc, #120]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f94:	4b11      	ldr	r3, [pc, #68]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	0a5b      	lsrs	r3, r3, #9
 8005f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb8:	ee17 3a90 	vmov	r3, s15
 8005fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fbe:	e005      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
      break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fc6:	4b07      	ldr	r3, [pc, #28]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fc8:	61bb      	str	r3, [r7, #24]
      break;
 8005fca:	bf00      	nop
  }

  return sysclockfreq;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	@ 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
 8005fe0:	03d09000 	.word	0x03d09000
 8005fe4:	003d0900 	.word	0x003d0900
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	46000000 	.word	0x46000000
 8005ff0:	4c742400 	.word	0x4c742400
 8005ff4:	4a742400 	.word	0x4a742400
 8005ff8:	4af42400 	.word	0x4af42400

08005ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006002:	f7ff fe81 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8006006:	4602      	mov	r2, r0
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <HAL_RCC_GetHCLKFreq+0x50>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	490f      	ldr	r1, [pc, #60]	@ (8006050 <HAL_RCC_GetHCLKFreq+0x54>)
 8006014:	5ccb      	ldrb	r3, [r1, r3]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006020:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <HAL_RCC_GetHCLKFreq+0x50>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	4a09      	ldr	r2, [pc, #36]	@ (8006050 <HAL_RCC_GetHCLKFreq+0x54>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	4a07      	ldr	r2, [pc, #28]	@ (8006054 <HAL_RCC_GetHCLKFreq+0x58>)
 8006038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800603a:	4a07      	ldr	r2, [pc, #28]	@ (8006058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006040:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <HAL_RCC_GetHCLKFreq+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024400 	.word	0x58024400
 8006050:	0800ab0c 	.word	0x0800ab0c
 8006054:	24000004 	.word	0x24000004
 8006058:	24000000 	.word	0x24000000

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006060:	f7ff ffcc 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4904      	ldr	r1, [pc, #16]	@ (8006084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58024400 	.word	0x58024400
 8006084:	0800ab0c 	.word	0x0800ab0c

08006088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800608c:	f7ff ffb6 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4904      	ldr	r1, [pc, #16]	@ (80060b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	58024400 	.word	0x58024400
 80060b0:	0800ab0c 	.word	0x0800ab0c

080060b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b0ca      	sub	sp, #296	@ 0x128
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060d8:	2500      	movs	r5, #0
 80060da:	ea54 0305 	orrs.w	r3, r4, r5
 80060de:	d049      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ea:	d02f      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f0:	d828      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060f6:	d01a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060fc:	d822      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006106:	d007      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006108:	e01c      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610a:	4bb8      	ldr	r3, [pc, #736]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	4ab7      	ldr	r2, [pc, #732]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006116:	e01a      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611c:	3308      	adds	r3, #8
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f002 fb61 	bl	80087e8 <RCCEx_PLL2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800612c:	e00f      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	3328      	adds	r3, #40	@ 0x28
 8006134:	2102      	movs	r1, #2
 8006136:	4618      	mov	r0, r3
 8006138:	f002 fc08 	bl	800894c <RCCEx_PLL3_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006142:	e004      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006156:	4ba5      	ldr	r3, [pc, #660]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006164:	4aa1      	ldr	r2, [pc, #644]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006166:	430b      	orrs	r3, r1
 8006168:	6513      	str	r3, [r2, #80]	@ 0x50
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006180:	f04f 0900 	mov.w	r9, #0
 8006184:	ea58 0309 	orrs.w	r3, r8, r9
 8006188:	d047      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006190:	2b04      	cmp	r3, #4
 8006192:	d82a      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006194:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061bf 	.word	0x080061bf
 80061a4:	080061d5 	.word	0x080061d5
 80061a8:	080061f3 	.word	0x080061f3
 80061ac:	080061f3 	.word	0x080061f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4b8e      	ldr	r3, [pc, #568]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	4a8d      	ldr	r2, [pc, #564]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061bc:	e01a      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	3308      	adds	r3, #8
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f002 fb0e 	bl	80087e8 <RCCEx_PLL2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d2:	e00f      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	3328      	adds	r3, #40	@ 0x28
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 fbb5 	bl	800894c <RCCEx_PLL3_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061fc:	4b7b      	ldr	r3, [pc, #492]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006200:	f023 0107 	bic.w	r1, r3, #7
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	4a78      	ldr	r2, [pc, #480]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800620c:	430b      	orrs	r3, r1
 800620e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006210:	e003      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006226:	f04f 0b00 	mov.w	fp, #0
 800622a:	ea5a 030b 	orrs.w	r3, sl, fp
 800622e:	d04c      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623a:	d030      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800623c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006240:	d829      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006242:	2bc0      	cmp	r3, #192	@ 0xc0
 8006244:	d02d      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006246:	2bc0      	cmp	r3, #192	@ 0xc0
 8006248:	d825      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800624a:	2b80      	cmp	r3, #128	@ 0x80
 800624c:	d018      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800624e:	2b80      	cmp	r3, #128	@ 0x80
 8006250:	d821      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006256:	2b40      	cmp	r3, #64	@ 0x40
 8006258:	d007      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800625a:	e01c      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4b63      	ldr	r3, [pc, #396]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	4a62      	ldr	r2, [pc, #392]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006268:	e01c      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	3308      	adds	r3, #8
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f002 fab8 	bl	80087e8 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800627e:	e011      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006284:	3328      	adds	r3, #40	@ 0x28
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f002 fb5f 	bl	800894c <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800629c:	e002      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062ac:	4b4f      	ldr	r3, [pc, #316]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ba:	4a4c      	ldr	r2, [pc, #304]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6513      	str	r3, [r2, #80]	@ 0x50
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80062d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80062da:	2300      	movs	r3, #0
 80062dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80062e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d053      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062f6:	d035      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062fc:	d82e      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006302:	d031      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006304:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006308:	d828      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800630e:	d01a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006314:	d822      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800631a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800631e:	d007      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006320:	e01c      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006322:	4b32      	ldr	r3, [pc, #200]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	4a31      	ldr	r2, [pc, #196]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800632c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800632e:	e01c      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	3308      	adds	r3, #8
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f002 fa55 	bl	80087e8 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006344:	e011      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	3328      	adds	r3, #40	@ 0x28
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f002 fafc 	bl	800894c <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800635a:	e006      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006362:	e002      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006372:	4b1e      	ldr	r3, [pc, #120]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006382:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006384:	430b      	orrs	r3, r1
 8006386:	6593      	str	r3, [r2, #88]	@ 0x58
 8006388:	e003      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800639e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80063ac:	460b      	mov	r3, r1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063be:	d038      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063c4:	d831      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063ca:	d034      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063d0:	d82b      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063d6:	d01d      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063dc:	d825      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d006      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063e8:	e01f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4ba2      	ldr	r3, [pc, #648]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	4aa1      	ldr	r2, [pc, #644]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063fc:	e01c      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	3308      	adds	r3, #8
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f002 f9ee 	bl	80087e8 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	3328      	adds	r3, #40	@ 0x28
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f002 fa95 	bl	800894c <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006440:	4b8e      	ldr	r3, [pc, #568]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006444:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006450:	4a8a      	ldr	r2, [pc, #552]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006452:	430b      	orrs	r3, r1
 8006454:	6593      	str	r3, [r2, #88]	@ 0x58
 8006456:	e003      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800646c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006476:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800647a:	460b      	mov	r3, r1
 800647c:	4313      	orrs	r3, r2
 800647e:	d03a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006486:	2b30      	cmp	r3, #48	@ 0x30
 8006488:	d01f      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800648a:	2b30      	cmp	r3, #48	@ 0x30
 800648c:	d819      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d00c      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d815      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800649a:	2b10      	cmp	r3, #16
 800649c:	d111      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800649e:	4b77      	ldr	r3, [pc, #476]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	4a76      	ldr	r2, [pc, #472]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064aa:	e011      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	3308      	adds	r3, #8
 80064b2:	2102      	movs	r1, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f002 f997 	bl	80087e8 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064d8:	4b68      	ldr	r3, [pc, #416]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e6:	4a65      	ldr	r2, [pc, #404]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006506:	2300      	movs	r3, #0
 8006508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800650c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d051      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006520:	d035      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006526:	d82e      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006528:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800652c:	d031      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800652e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006532:	d828      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006538:	d01a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800653a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800653e:	d822      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006548:	d007      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800654a:	e01c      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654c:	4b4b      	ldr	r3, [pc, #300]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	4a4a      	ldr	r2, [pc, #296]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006558:	e01c      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	3308      	adds	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f002 f940 	bl	80087e8 <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800656e:	e011      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	3328      	adds	r3, #40	@ 0x28
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f002 f9e7 	bl	800894c <RCCEx_PLL3_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800659c:	4b37      	ldr	r3, [pc, #220]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065aa:	4a34      	ldr	r2, [pc, #208]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80065c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d056      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e4:	d033      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065ea:	d82c      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065f0:	d02f      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065f6:	d826      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065fc:	d02b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006602:	d820      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006608:	d012      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800660a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660e:	d81a      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d022      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006618:	d115      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	3308      	adds	r3, #8
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f002 f8e0 	bl	80087e8 <RCCEx_PLL2_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800662e:	e015      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	3328      	adds	r3, #40	@ 0x28
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f002 f987 	bl	800894c <RCCEx_PLL3_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006644:	e00a      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800664c:	e006      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800665a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006668:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006672:	4a02      	ldr	r2, [pc, #8]	@ (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006674:	430b      	orrs	r3, r1
 8006676:	6513      	str	r3, [r2, #80]	@ 0x50
 8006678:	e006      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800667a:	bf00      	nop
 800667c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800669e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d055      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066b4:	d033      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80066b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066ba:	d82c      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c0:	d02f      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c6:	d826      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066cc:	d02b      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066d2:	d820      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d8:	d012      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066de:	d81a      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d022      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e8:	d115      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	3308      	adds	r3, #8
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f002 f878 	bl	80087e8 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066fe:	e015      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3328      	adds	r3, #40	@ 0x28
 8006706:	2101      	movs	r1, #1
 8006708:	4618      	mov	r0, r3
 800670a:	f002 f91f 	bl	800894c <RCCEx_PLL3_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006714:	e00a      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800671c:	e006      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800671e:	bf00      	nop
 8006720:	e004      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006722:	bf00      	nop
 8006724:	e002      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800672a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006734:	4ba3      	ldr	r3, [pc, #652]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006738:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006744:	4a9f      	ldr	r2, [pc, #636]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006746:	430b      	orrs	r3, r1
 8006748:	6593      	str	r3, [r2, #88]	@ 0x58
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800676a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d037      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677e:	d00e      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006784:	d816      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800678a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800678e:	d111      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006790:	4b8c      	ldr	r3, [pc, #560]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4a8b      	ldr	r2, [pc, #556]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800679a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800679c:	e00f      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	3308      	adds	r3, #8
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f002 f81e 	bl	80087e8 <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067b2:	e004      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80067bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067c6:	4b7f      	ldr	r3, [pc, #508]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	4a7b      	ldr	r2, [pc, #492]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80067da:	e003      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d039      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680a:	2b03      	cmp	r3, #3
 800680c:	d81c      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800680e:	a201      	add	r2, pc, #4	@ (adr r2, 8006814 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006851 	.word	0x08006851
 8006818:	08006825 	.word	0x08006825
 800681c:	08006833 	.word	0x08006833
 8006820:	08006851 	.word	0x08006851
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b67      	ldr	r3, [pc, #412]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	4a66      	ldr	r2, [pc, #408]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006830:	e00f      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3308      	adds	r3, #8
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 ffd4 	bl	80087e8 <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006846:	e004      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800685a:	4b5a      	ldr	r3, [pc, #360]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685e:	f023 0103 	bic.w	r1, r3, #3
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006868:	4a56      	ldr	r2, [pc, #344]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686a:	430b      	orrs	r3, r1
 800686c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800688e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	f000 809f 	beq.w	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800689a:	4b4b      	ldr	r3, [pc, #300]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4a      	ldr	r2, [pc, #296]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a6:	f7fa fefd 	bl	80016a4 <HAL_GetTick>
 80068aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ae:	e00b      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b0:	f7fa fef8 	bl	80016a4 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	@ 0x64
 80068be:	d903      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c6:	e005      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c8:	4b3f      	ldr	r3, [pc, #252]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0ed      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d179      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068dc:	4b39      	ldr	r3, [pc, #228]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068e8:	4053      	eors	r3, r2
 80068ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d015      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068f2:	4b34      	ldr	r3, [pc, #208]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068fe:	4b31      	ldr	r3, [pc, #196]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006902:	4a30      	ldr	r2, [pc, #192]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006908:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800690a:	4b2e      	ldr	r3, [pc, #184]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	4a2d      	ldr	r2, [pc, #180]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006916:	4a2b      	ldr	r2, [pc, #172]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800691c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d118      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fa feba 	bl	80016a4 <HAL_GetTick>
 8006930:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006934:	e00d      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fa feb5 	bl	80016a4 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006940:	1ad2      	subs	r2, r2, r3
 8006942:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006946:	429a      	cmp	r2, r3
 8006948:	d903      	bls.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006950:	e005      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006952:	4b1c      	ldr	r3, [pc, #112]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0eb      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006962:	2b00      	cmp	r3, #0
 8006964:	d129      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800696e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006976:	d10e      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006978:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006988:	091a      	lsrs	r2, r3, #4
 800698a:	4b10      	ldr	r3, [pc, #64]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800698c:	4013      	ands	r3, r2
 800698e:	4a0d      	ldr	r2, [pc, #52]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6113      	str	r3, [r2, #16]
 8006994:	e005      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006996:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	4a0a      	ldr	r2, [pc, #40]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800699c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069a0:	6113      	str	r3, [r2, #16]
 80069a2:	4b08      	ldr	r3, [pc, #32]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b2:	4a04      	ldr	r2, [pc, #16]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b8:	e00e      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80069c2:	e009      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80069c4:	58024400 	.word	0x58024400
 80069c8:	58024800 	.word	0x58024800
 80069cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f002 0301 	and.w	r3, r2, #1
 80069e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f000 8089 	beq.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a00:	2b28      	cmp	r3, #40	@ 0x28
 8006a02:	d86b      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006ae5 	.word	0x08006ae5
 8006a10:	08006add 	.word	0x08006add
 8006a14:	08006add 	.word	0x08006add
 8006a18:	08006add 	.word	0x08006add
 8006a1c:	08006add 	.word	0x08006add
 8006a20:	08006add 	.word	0x08006add
 8006a24:	08006add 	.word	0x08006add
 8006a28:	08006add 	.word	0x08006add
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006add 	.word	0x08006add
 8006a34:	08006add 	.word	0x08006add
 8006a38:	08006add 	.word	0x08006add
 8006a3c:	08006add 	.word	0x08006add
 8006a40:	08006add 	.word	0x08006add
 8006a44:	08006add 	.word	0x08006add
 8006a48:	08006add 	.word	0x08006add
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006add 	.word	0x08006add
 8006a54:	08006add 	.word	0x08006add
 8006a58:	08006add 	.word	0x08006add
 8006a5c:	08006add 	.word	0x08006add
 8006a60:	08006add 	.word	0x08006add
 8006a64:	08006add 	.word	0x08006add
 8006a68:	08006add 	.word	0x08006add
 8006a6c:	08006ae5 	.word	0x08006ae5
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006add 	.word	0x08006add
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006ae5 	.word	0x08006ae5
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006add 	.word	0x08006add
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006ae5 	.word	0x08006ae5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 fe95 	bl	80087e8 <RCCEx_PLL2_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e00f      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	3328      	adds	r3, #40	@ 0x28
 8006acc:	2101      	movs	r1, #1
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 ff3c 	bl	800894c <RCCEx_PLL3_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ada:	e004      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aee:	4bbf      	ldr	r3, [pc, #764]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006afc:	4abb      	ldr	r2, [pc, #748]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006afe:	430b      	orrs	r3, r1
 8006b00:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b02:	e003      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f002 0302 	and.w	r3, r2, #2
 8006b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006b22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d041      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d824      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b36:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b6b 	.word	0x08006b6b
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006b89 	.word	0x08006b89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	3308      	adds	r3, #8
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fe43 	bl	80087e8 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b68:	e00f      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	3328      	adds	r3, #40	@ 0x28
 8006b70:	2101      	movs	r1, #1
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 feea 	bl	800894c <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b86:	e000      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b92:	4b96      	ldr	r3, [pc, #600]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	f023 0107 	bic.w	r1, r3, #7
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ba0:	4a92      	ldr	r2, [pc, #584]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ba6:	e003      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f002 0304 	and.w	r3, r2, #4
 8006bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d044      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d825      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c31 	.word	0x08006c31
 8006bf8:	08006c31 	.word	0x08006c31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	3308      	adds	r3, #8
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fdef 	bl	80087e8 <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c10:	e00f      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	3328      	adds	r3, #40	@ 0x28
 8006c18:	2101      	movs	r1, #1
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fe96 	bl	800894c <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3e:	f023 0107 	bic.w	r1, r3, #7
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4a:	4a68      	ldr	r2, [pc, #416]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f002 0320 	and.w	r3, r2, #32
 8006c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d055      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c86:	d033      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c8c:	d82c      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c92:	d02f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c98:	d826      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c9e:	d02b      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ca4:	d820      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006caa:	d012      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cb0:	d81a      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d022      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cba:	d115      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 fd8f 	bl	80087e8 <RCCEx_PLL2_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e015      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	3328      	adds	r3, #40	@ 0x28
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fe36 	bl	800894c <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cee:	e006      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d06:	4b39      	ldr	r3, [pc, #228]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d16:	4a35      	ldr	r2, [pc, #212]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d058      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5e:	d02f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d64:	d826      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d70:	d820      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d76:	d012      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d7c:	d81a      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d86:	d115      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fd29 	bl	80087e8 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	3328      	adds	r3, #40	@ 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fdd0 	bl	800894c <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dba:	e006      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10e      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006de2:	4a02      	ldr	r2, [pc, #8]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de8:	e006      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d055      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e24:	d033      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006e26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e2a:	d82c      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e30:	d02f      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e36:	d826      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e3c:	d02b      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e42:	d820      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e48:	d012      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e4e:	d81a      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d022      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e58:	d115      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	3308      	adds	r3, #8
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fcc0 	bl	80087e8 <RCCEx_PLL2_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e6e:	e015      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	3328      	adds	r3, #40	@ 0x28
 8006e76:	2102      	movs	r1, #2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 fd67 	bl	800894c <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e84:	e00a      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e8c:	e006      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e004      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e92:	bf00      	nop
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ea4:	4ba1      	ldr	r3, [pc, #644]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006eb4:	4a9d      	ldr	r2, [pc, #628]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0308 	and.w	r3, r2, #8
 8006ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d01e      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	3328      	adds	r3, #40	@ 0x28
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fd26 	bl	800894c <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f0c:	4b87      	ldr	r3, [pc, #540]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f1c:	4a83      	ldr	r2, [pc, #524]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f002 0310 	and.w	r3, r2, #16
 8006f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d01e      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4e:	d10c      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f54:	3328      	adds	r3, #40	@ 0x28
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fcf7 	bl	800894c <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f6a:	4b70      	ldr	r3, [pc, #448]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d03e      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fac:	d022      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fb2:	d81b      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006fbe:	e015      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fc0d 	bl	80087e8 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fcb4 	bl	800894c <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007002:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800700e:	4a47      	ldr	r2, [pc, #284]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6593      	str	r3, [r2, #88]	@ 0x58
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800702a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800702c:	2300      	movs	r3, #0
 800702e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007030:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d03b      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007046:	d01f      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800704c:	d818      	bhi.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800704e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007058:	d007      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800705a:	e011      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705c:	4b33      	ldr	r3, [pc, #204]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	4a32      	ldr	r2, [pc, #200]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007068:	e00f      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706e:	3328      	adds	r3, #40	@ 0x28
 8007070:	2101      	movs	r1, #1
 8007072:	4618      	mov	r0, r3
 8007074:	f001 fc6a 	bl	800894c <RCCEx_PLL3_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800707e:	e004      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007092:	4b26      	ldr	r3, [pc, #152]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007096:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a2:	4a22      	ldr	r2, [pc, #136]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80070a8:	e003      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80070be:	673b      	str	r3, [r7, #112]	@ 0x70
 80070c0:	2300      	movs	r3, #0
 80070c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80070c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070c8:	460b      	mov	r3, r1
 80070ca:	4313      	orrs	r3, r2
 80070cc:	d034      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070dc:	d007      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80070de:	e011      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e0:	4b12      	ldr	r3, [pc, #72]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e4:	4a11      	ldr	r2, [pc, #68]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070ec:	e00e      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	3308      	adds	r3, #8
 80070f4:	2102      	movs	r1, #2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fb76 	bl	80087e8 <RCCEx_PLL2_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800710a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007118:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007122:	4a02      	ldr	r2, [pc, #8]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007124:	430b      	orrs	r3, r1
 8007126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007128:	e006      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007146:	2300      	movs	r3, #0
 8007148:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800714a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	d00c      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	3328      	adds	r3, #40	@ 0x28
 800715a:	2102      	movs	r1, #2
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fbf5 	bl	800894c <RCCEx_PLL3_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800717a:	663b      	str	r3, [r7, #96]	@ 0x60
 800717c:	2300      	movs	r3, #0
 800717e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007180:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d038      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007196:	d018      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800719c:	d811      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800719e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a2:	d014      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80071a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071a8:	d80b      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b2:	d106      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b4:	4bc3      	ldr	r3, [pc, #780]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	4ac2      	ldr	r2, [pc, #776]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071c0:	e008      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c8:	e004      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071ca:	bf00      	nop
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071dc:	4bb9      	ldr	r3, [pc, #740]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ec:	4ab5      	ldr	r2, [pc, #724]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ee:	430b      	orrs	r3, r1
 80071f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007208:	65bb      	str	r3, [r7, #88]	@ 0x58
 800720a:	2300      	movs	r3, #0
 800720c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800720e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007218:	4baa      	ldr	r3, [pc, #680]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800721c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007226:	4aa7      	ldr	r2, [pc, #668]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007228:	430b      	orrs	r3, r1
 800722a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007238:	653b      	str	r3, [r7, #80]	@ 0x50
 800723a:	2300      	movs	r3, #0
 800723c:	657b      	str	r3, [r7, #84]	@ 0x54
 800723e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007248:	4b9e      	ldr	r3, [pc, #632]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007258:	4a9a      	ldr	r2, [pc, #616]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800726a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800726c:	2300      	movs	r3, #0
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007270:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d009      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800727a:	4b92      	ldr	r3, [pc, #584]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800727e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007288:	4a8e      	ldr	r2, [pc, #568]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728a:	430b      	orrs	r3, r1
 800728c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800729a:	643b      	str	r3, [r7, #64]	@ 0x40
 800729c:	2300      	movs	r3, #0
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072a4:	460b      	mov	r3, r1
 80072a6:	4313      	orrs	r3, r2
 80072a8:	d00e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072aa:	4b86      	ldr	r3, [pc, #536]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4a85      	ldr	r2, [pc, #532]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072b4:	6113      	str	r3, [r2, #16]
 80072b6:	4b83      	ldr	r3, [pc, #524]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b8:	6919      	ldr	r1, [r3, #16]
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072c2:	4a80      	ldr	r2, [pc, #512]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072e4:	4b77      	ldr	r3, [pc, #476]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	4a74      	ldr	r2, [pc, #464]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007304:	633b      	str	r3, [r7, #48]	@ 0x30
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
 800730a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007314:	4b6b      	ldr	r3, [pc, #428]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007318:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007324:	4a67      	ldr	r2, [pc, #412]	@ (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	2100      	movs	r1, #0
 8007334:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800733c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d011      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fa4a 	bl	80087e8 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	2100      	movs	r1, #0
 8007374:	6239      	str	r1, [r7, #32]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
 800737c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d011      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738a:	3308      	adds	r3, #8
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f001 fa2a 	bl	80087e8 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800739a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	2100      	movs	r1, #0
 80073b4:	61b9      	str	r1, [r7, #24]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d011      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ca:	3308      	adds	r3, #8
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fa0a 	bl	80087e8 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	2100      	movs	r1, #0
 80073f4:	6139      	str	r1, [r7, #16]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d011      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	3328      	adds	r3, #40	@ 0x28
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fa9c 	bl	800894c <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800741a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	2100      	movs	r1, #0
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d011      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744a:	3328      	adds	r3, #40	@ 0x28
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fa7c 	bl	800894c <RCCEx_PLL3_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	2100      	movs	r1, #0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007480:	460b      	mov	r3, r1
 8007482:	4313      	orrs	r3, r2
 8007484:	d011      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748a:	3328      	adds	r3, #40	@ 0x28
 800748c:	2102      	movs	r1, #2
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fa5c 	bl	800894c <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800749a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80074aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80074be:	46bd      	mov	sp, r7
 80074c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074c4:	58024400 	.word	0x58024400

080074c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b090      	sub	sp, #64	@ 0x40
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80074da:	430b      	orrs	r3, r1
 80074dc:	f040 8094 	bne.w	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80074e0:	4b9e      	ldr	r3, [pc, #632]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	f200 8087 	bhi.w	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800750d 	.word	0x0800750d
 80074fc:	08007535 	.word	0x08007535
 8007500:	0800755d 	.word	0x0800755d
 8007504:	080075f9 	.word	0x080075f9
 8007508:	08007585 	.word	0x08007585
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800750c:	4b93      	ldr	r3, [pc, #588]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007518:	d108      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800751a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f810 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007528:	f000 bd45 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007530:	f000 bd41 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007534:	4b89      	ldr	r3, [pc, #548]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800753c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007540:	d108      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007542:	f107 0318 	add.w	r3, r7, #24
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fd54 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007550:	f000 bd31 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007558:	f000 bd2d 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800755c:	4b7f      	ldr	r3, [pc, #508]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007568:	d108      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800756a:	f107 030c 	add.w	r3, r7, #12
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fe94 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007578:	f000 bd1d 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	f000 bd19 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007584:	4b75      	ldr	r3, [pc, #468]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007588:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800758c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800758e:	4b73      	ldr	r3, [pc, #460]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b04      	cmp	r3, #4
 8007598:	d10c      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075a0:	4b6e      	ldr	r3, [pc, #440]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	4a6d      	ldr	r2, [pc, #436]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b2:	e01f      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075b4:	4b69      	ldr	r3, [pc, #420]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c0:	d106      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075c8:	d102      	bne.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075ca:	4b66      	ldr	r3, [pc, #408]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ce:	e011      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075d0:	4b62      	ldr	r3, [pc, #392]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075dc:	d106      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80075de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e4:	d102      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075e6:	4b60      	ldr	r3, [pc, #384]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80075f0:	f000 bce1 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075f4:	f000 bcdf 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80075f8:	4b5c      	ldr	r3, [pc, #368]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075fc:	f000 bcdb 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007604:	f000 bcd7 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007610:	430b      	orrs	r3, r1
 8007612:	f040 80ad 	bne.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007616:	4b51      	ldr	r3, [pc, #324]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007626:	d056      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762e:	f200 8090 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	2bc0      	cmp	r3, #192	@ 0xc0
 8007636:	f000 8088 	beq.w	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	2bc0      	cmp	r3, #192	@ 0xc0
 800763e:	f200 8088 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	2b80      	cmp	r3, #128	@ 0x80
 8007646:	d032      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	2b80      	cmp	r3, #128	@ 0x80
 800764c:	f200 8081 	bhi.w	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	2b40      	cmp	r3, #64	@ 0x40
 800765a:	d014      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800765c:	e079      	b.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800765e:	4b3f      	ldr	r3, [pc, #252]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800766a:	d108      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800766c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007670:	4618      	mov	r0, r3
 8007672:	f000 ff67 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767a:	f000 bc9c 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007682:	f000 bc98 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007686:	4b35      	ldr	r3, [pc, #212]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800768e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007692:	d108      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007694:	f107 0318 	add.w	r3, r7, #24
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fcab 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a2:	f000 bc88 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076aa:	f000 bc84 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076ae:	4b2b      	ldr	r3, [pc, #172]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ba:	d108      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076bc:	f107 030c 	add.w	r3, r7, #12
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fdeb 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ca:	f000 bc74 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d2:	f000 bc70 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076d6:	4b21      	ldr	r3, [pc, #132]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076e0:	4b1e      	ldr	r3, [pc, #120]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d10c      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80076ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076f2:	4b1a      	ldr	r3, [pc, #104]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	4a18      	ldr	r2, [pc, #96]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007704:	e01f      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007706:	4b15      	ldr	r3, [pc, #84]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007712:	d106      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800771a:	d102      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800771c:	4b11      	ldr	r3, [pc, #68]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007720:	e011      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007722:	4b0e      	ldr	r3, [pc, #56]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800772e:	d106      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007736:	d102      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007738:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800773c:	e003      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007742:	f000 bc38 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007746:	f000 bc36 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800774a:	4b08      	ldr	r3, [pc, #32]	@ (800776c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800774e:	f000 bc32 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007756:	f000 bc2e 	b.w	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800775a:	bf00      	nop
 800775c:	58024400 	.word	0x58024400
 8007760:	03d09000 	.word	0x03d09000
 8007764:	003d0900 	.word	0x003d0900
 8007768:	007a1200 	.word	0x007a1200
 800776c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007774:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007778:	430b      	orrs	r3, r1
 800777a:	f040 809c 	bne.w	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800777e:	4b9e      	ldr	r3, [pc, #632]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007786:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800778e:	d054      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007796:	f200 808b 	bhi.w	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077a0:	f000 8083 	beq.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80077aa:	f200 8081 	bhi.w	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077b4:	d02f      	beq.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077bc:	d878      	bhi.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077ca:	d012      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80077cc:	e070      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077ce:	4b8a      	ldr	r3, [pc, #552]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077da:	d107      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 feaf 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ea:	e3e4      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f0:	e3e1      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077f2:	4b81      	ldr	r3, [pc, #516]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077fe:	d107      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007800:	f107 0318 	add.w	r3, r7, #24
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fbf5 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800780e:	e3d2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e3cf      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007816:	4b78      	ldr	r3, [pc, #480]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800781e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007822:	d107      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fd37 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007832:	e3c0      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007838:	e3bd      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800783a:	4b6f      	ldr	r3, [pc, #444]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800783c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007844:	4b6c      	ldr	r3, [pc, #432]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b04      	cmp	r3, #4
 800784e:	d10c      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007856:	4b68      	ldr	r3, [pc, #416]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	08db      	lsrs	r3, r3, #3
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	4a66      	ldr	r2, [pc, #408]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007862:	fa22 f303 	lsr.w	r3, r2, r3
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007868:	e01e      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800786a:	4b63      	ldr	r3, [pc, #396]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007876:	d106      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800787e:	d102      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007880:	4b5f      	ldr	r3, [pc, #380]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007884:	e010      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007886:	4b5c      	ldr	r3, [pc, #368]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007892:	d106      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789a:	d102      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800789c:	4b59      	ldr	r3, [pc, #356]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a0:	e002      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078a6:	e386      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078a8:	e385      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078aa:	4b57      	ldr	r3, [pc, #348]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ae:	e382      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b4:	e37f      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80078b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ba:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80078be:	430b      	orrs	r3, r1
 80078c0:	f040 80a7 	bne.w	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80078c4:	4b4c      	ldr	r3, [pc, #304]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80078cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078d4:	d055      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078dc:	f200 8096 	bhi.w	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078e6:	f000 8084 	beq.w	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078f0:	f200 808c 	bhi.w	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078fa:	d030      	beq.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007902:	f200 8083 	bhi.w	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007912:	d012      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007914:	e07a      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007916:	4b38      	ldr	r3, [pc, #224]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007922:	d107      	bne.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fe0b 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007932:	e340      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007938:	e33d      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800793a:	4b2f      	ldr	r3, [pc, #188]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007946:	d107      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007948:	f107 0318 	add.w	r3, r7, #24
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fb51 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007956:	e32e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795c:	e32b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800795e:	4b26      	ldr	r3, [pc, #152]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800796a:	d107      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fc93 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800797a:	e31c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007980:	e319      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007982:	4b1d      	ldr	r3, [pc, #116]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800798a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800798c:	4b1a      	ldr	r3, [pc, #104]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b04      	cmp	r3, #4
 8007996:	d10c      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800799e:	4b16      	ldr	r3, [pc, #88]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	08db      	lsrs	r3, r3, #3
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	4a14      	ldr	r2, [pc, #80]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80079aa:	fa22 f303 	lsr.w	r3, r2, r3
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b0:	e01e      	b.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079b2:	4b11      	ldr	r3, [pc, #68]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079be:	d106      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80079c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079c6:	d102      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079cc:	e010      	b.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079ce:	4b0a      	ldr	r3, [pc, #40]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079da:	d106      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e2:	d102      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80079e4:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e8:	e002      	b.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80079ee:	e2e2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079f0:	e2e1      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80079f2:	4b05      	ldr	r3, [pc, #20]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80079f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f6:	e2de      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079f8:	58024400 	.word	0x58024400
 80079fc:	03d09000 	.word	0x03d09000
 8007a00:	003d0900 	.word	0x003d0900
 8007a04:	007a1200 	.word	0x007a1200
 8007a08:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a10:	e2d1      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a16:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	f040 809c 	bne.w	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007a20:	4b93      	ldr	r3, [pc, #588]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a24:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007a28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a30:	d054      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a38:	f200 808b 	bhi.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a42:	f000 8083 	beq.w	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a4c:	f200 8081 	bhi.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a56:	d02f      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5e:	d878      	bhi.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6c:	d012      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007a6e:	e070      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a70:	4b7f      	ldr	r3, [pc, #508]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fd5e 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8c:	e293      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a92:	e290      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a94:	4b76      	ldr	r3, [pc, #472]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 faa4 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab0:	e281      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab6:	e27e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ab8:	4b6d      	ldr	r3, [pc, #436]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fbe6 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad4:	e26f      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ada:	e26c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007adc:	4b64      	ldr	r3, [pc, #400]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ae6:	4b62      	ldr	r3, [pc, #392]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d10c      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007af8:	4b5d      	ldr	r3, [pc, #372]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	4a5c      	ldr	r2, [pc, #368]	@ (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b04:	fa22 f303 	lsr.w	r3, r2, r3
 8007b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0a:	e01e      	b.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b0c:	4b58      	ldr	r3, [pc, #352]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b18:	d106      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b20:	d102      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b22:	4b55      	ldr	r3, [pc, #340]	@ (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b26:	e010      	b.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b28:	4b51      	ldr	r3, [pc, #324]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b34:	d106      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b3c:	d102      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b42:	e002      	b.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b48:	e235      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b4a:	e234      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b50:	e231      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b56:	e22e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007b60:	430b      	orrs	r3, r1
 8007b62:	f040 808f 	bne.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007b66:	4b42      	ldr	r3, [pc, #264]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b76:	d06b      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b7e:	d874      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b86:	d056      	beq.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b8e:	d86c      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b96:	d03b      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b9e:	d864      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba6:	d021      	beq.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bae:	d85c      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bbc:	d004      	beq.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007bbe:	e054      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007bc0:	f7fe fa4c 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8007bc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bc6:	e1f6      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc8:	4b29      	ldr	r3, [pc, #164]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd6:	f107 0318 	add.w	r3, r7, #24
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fa0a 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be4:	e1e7      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bea:	e1e4      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bec:	4b20      	ldr	r3, [pc, #128]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fb4c 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c08:	e1d5      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c0e:	e1d2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c10:	4b17      	ldr	r3, [pc, #92]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d109      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c1c:	4b14      	ldr	r3, [pc, #80]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	08db      	lsrs	r3, r3, #3
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	4a13      	ldr	r2, [pc, #76]	@ (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2e:	e1c2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	e1bf      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c36:	4b0e      	ldr	r3, [pc, #56]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c42:	d102      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c48:	e1b5      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4e:	e1b2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c50:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c5c:	d102      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007c5e:	4b07      	ldr	r3, [pc, #28]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c62:	e1a8      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c68:	e1a5      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6e:	e1a2      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c70:	58024400 	.word	0x58024400
 8007c74:	03d09000 	.word	0x03d09000
 8007c78:	003d0900 	.word	0x003d0900
 8007c7c:	007a1200 	.word	0x007a1200
 8007c80:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c88:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	d173      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c90:	4b9c      	ldr	r3, [pc, #624]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca0:	d02f      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca8:	d863      	bhi.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb6:	d012      	beq.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007cb8:	e05b      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cba:	4b92      	ldr	r3, [pc, #584]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cc6:	d107      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc8:	f107 0318 	add.w	r3, r7, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f991 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd6:	e16e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cdc:	e16b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cde:	4b89      	ldr	r3, [pc, #548]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cea:	d107      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fad3 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfa:	e15c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e159      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d02:	4b80      	ldr	r3, [pc, #512]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d0c:	4b7d      	ldr	r3, [pc, #500]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d10c      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d1e:	4b79      	ldr	r3, [pc, #484]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	08db      	lsrs	r3, r3, #3
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	4a77      	ldr	r2, [pc, #476]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d30:	e01e      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d32:	4b74      	ldr	r3, [pc, #464]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d48:	4b70      	ldr	r3, [pc, #448]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d4c:	e010      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5a:	d106      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d64:	4b6a      	ldr	r3, [pc, #424]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d68:	e002      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d6e:	e122      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d70:	e121      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d76:	e11e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007d80:	430b      	orrs	r3, r1
 8007d82:	d133      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007d84:	4b5f      	ldr	r3, [pc, #380]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d004      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d9a:	d012      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007d9c:	e023      	b.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d9e:	4b59      	ldr	r3, [pc, #356]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007da6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007daa:	d107      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fbc7 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dba:	e0fc      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc0:	e0f9      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dc2:	4b50      	ldr	r3, [pc, #320]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dce:	d107      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dd0:	f107 0318 	add.w	r3, r7, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f90d 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dde:	e0ea      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de4:	e0e7      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dea:	e0e4      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007df4:	430b      	orrs	r3, r1
 8007df6:	f040 808d 	bne.w	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007dfa:	4b42      	ldr	r3, [pc, #264]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007e02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e0a:	d06b      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e12:	d874      	bhi.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1a:	d056      	beq.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e22:	d86c      	bhi.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e2a:	d03b      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e32:	d864      	bhi.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3a:	d021      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e42:	d85c      	bhi.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e50:	d004      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007e52:	e054      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e54:	f000 f8b8 	bl	8007fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e5a:	e0ac      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5c:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6a:	f107 0318 	add.w	r3, r7, #24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f8c0 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e78:	e09d      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7e:	e09a      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e80:	4b20      	ldr	r3, [pc, #128]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e8e:	f107 030c 	add.w	r3, r7, #12
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fa02 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9c:	e08b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea2:	e088      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ea4:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d109      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eb0:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	08db      	lsrs	r3, r3, #3
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	4a13      	ldr	r2, [pc, #76]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec2:	e078      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e075      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007eca:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	e06b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee2:	e068      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ee4:	4b07      	ldr	r3, [pc, #28]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef0:	d102      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007ef2:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef6:	e05e      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efc:	e05b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f02:	e058      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f04:	58024400 	.word	0x58024400
 8007f08:	03d09000 	.word	0x03d09000
 8007f0c:	003d0900 	.word	0x003d0900
 8007f10:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	d148      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007f20:	4b27      	ldr	r3, [pc, #156]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f30:	d02a      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f38:	d838      	bhi.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f46:	d00d      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007f48:	e030      	b.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f56:	d102      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007f58:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5c:	e02b      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f62:	e028      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f64:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f70:	d107      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fae4 	bl	8008544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f80:	e019      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f86:	e016      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f94:	d107      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f96:	f107 0318 	add.w	r3, r7, #24
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f82a 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa4:	e007      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007faa:	e004      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb0:	e001      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3740      	adds	r7, #64	@ 0x40
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	007a1200 	.word	0x007a1200

08007fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fcc:	f7fe f816 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4b06      	ldr	r3, [pc, #24]	@ (8007fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	4904      	ldr	r1, [pc, #16]	@ (8007ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fde:	5ccb      	ldrb	r3, [r1, r3]
 8007fe0:	f003 031f 	and.w	r3, r3, #31
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	58024400 	.word	0x58024400
 8007ff0:	0800ab0c 	.word	0x0800ab0c

08007ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b089      	sub	sp, #36	@ 0x24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008006:	4b9f      	ldr	r3, [pc, #636]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	0b1b      	lsrs	r3, r3, #12
 800800c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008012:	4b9c      	ldr	r3, [pc, #624]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	091b      	lsrs	r3, r3, #4
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800801e:	4b99      	ldr	r3, [pc, #612]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008022:	08db      	lsrs	r3, r3, #3
 8008024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8111 	beq.w	8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b02      	cmp	r3, #2
 8008046:	f000 8083 	beq.w	8008150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b02      	cmp	r3, #2
 800804e:	f200 80a1 	bhi.w	8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d056      	beq.n	800810c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800805e:	e099      	b.n	8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008060:	4b88      	ldr	r3, [pc, #544]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02d      	beq.n	80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800806c:	4b85      	ldr	r3, [pc, #532]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	08db      	lsrs	r3, r3, #3
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	4a84      	ldr	r2, [pc, #528]	@ (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	ee07 3a90 	vmov	s15, r3
 8008084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b7b      	ldr	r3, [pc, #492]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80080c6:	e087      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	4b6a      	ldr	r3, [pc, #424]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810a:	e065      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008116:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800811a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811e:	4b59      	ldr	r3, [pc, #356]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008132:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800814e:	e043      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800815e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008162:	4b48      	ldr	r3, [pc, #288]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008172:	ed97 6a03 	vldr	s12, [r7, #12]
 8008176:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800817a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008192:	e021      	b.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a6:	4b37      	ldr	r3, [pc, #220]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800828c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80081d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081dc:	0a5b      	lsrs	r3, r3, #9
 80081de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fe:	ee17 2a90 	vmov	r2, s15
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008206:	4b1f      	ldr	r3, [pc, #124]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	0c1b      	lsrs	r3, r3, #16
 800820c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800821c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008220:	edd7 6a07 	vldr	s13, [r7, #28]
 8008224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822c:	ee17 2a90 	vmov	r2, s15
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008234:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008238:	0e1b      	lsrs	r3, r3, #24
 800823a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800824a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800824e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825a:	ee17 2a90 	vmov	r2, s15
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008262:	e008      	b.n	8008276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	609a      	str	r2, [r3, #8]
}
 8008276:	bf00      	nop
 8008278:	3724      	adds	r7, #36	@ 0x24
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	03d09000 	.word	0x03d09000
 800828c:	46000000 	.word	0x46000000
 8008290:	4c742400 	.word	0x4c742400
 8008294:	4a742400 	.word	0x4a742400
 8008298:	4af42400 	.word	0x4af42400

0800829c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800829c:	b480      	push	{r7}
 800829e:	b089      	sub	sp, #36	@ 0x24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a4:	4ba1      	ldr	r3, [pc, #644]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082ae:	4b9f      	ldr	r3, [pc, #636]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	0d1b      	lsrs	r3, r3, #20
 80082b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082ba:	4b9c      	ldr	r3, [pc, #624]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082c6:	4b99      	ldr	r3, [pc, #612]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ca:	08db      	lsrs	r3, r3, #3
 80082cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	fb02 f303 	mul.w	r3, r2, r3
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8111 	beq.w	800850c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f000 8083 	beq.w	80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f200 80a1 	bhi.w	800843c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d056      	beq.n	80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008306:	e099      	b.n	800843c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008308:	4b88      	ldr	r3, [pc, #544]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d02d      	beq.n	8008370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008314:	4b85      	ldr	r3, [pc, #532]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	4a84      	ldr	r2, [pc, #528]	@ (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
 8008324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b7b      	ldr	r3, [pc, #492]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800836e:	e087      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b6a      	ldr	r3, [pc, #424]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b2:	e065      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b59      	ldr	r3, [pc, #356]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f6:	e043      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b48      	ldr	r3, [pc, #288]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a03 	vldr	s12, [r7, #12]
 800841e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843a:	e021      	b.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b37      	ldr	r3, [pc, #220]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008480:	4b2a      	ldr	r3, [pc, #168]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	0a5b      	lsrs	r3, r3, #9
 8008486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849a:	edd7 6a07 	vldr	s13, [r7, #28]
 800849e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a6:	ee17 2a90 	vmov	r2, s15
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80084ae:	4b1f      	ldr	r3, [pc, #124]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d4:	ee17 2a90 	vmov	r2, s15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008502:	ee17 2a90 	vmov	r2, s15
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800850a:	e008      	b.n	800851e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
}
 800851e:	bf00      	nop
 8008520:	3724      	adds	r7, #36	@ 0x24
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	03d09000 	.word	0x03d09000
 8008534:	46000000 	.word	0x46000000
 8008538:	4c742400 	.word	0x4c742400
 800853c:	4a742400 	.word	0x4a742400
 8008540:	4af42400 	.word	0x4af42400

08008544 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008544:	b480      	push	{r7}
 8008546:	b089      	sub	sp, #36	@ 0x24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800854c:	4ba0      	ldr	r3, [pc, #640]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008556:	4b9e      	ldr	r3, [pc, #632]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	091b      	lsrs	r3, r3, #4
 800855c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008560:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008562:	4b9b      	ldr	r3, [pc, #620]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800856c:	4b98      	ldr	r3, [pc, #608]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800856e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8111 	beq.w	80087b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	2b02      	cmp	r3, #2
 8008594:	f000 8083 	beq.w	800869e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b02      	cmp	r3, #2
 800859c:	f200 80a1 	bhi.w	80086e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d056      	beq.n	800865a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80085ac:	e099      	b.n	80086e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ae:	4b88      	ldr	r3, [pc, #544]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d02d      	beq.n	8008616 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ba:	4b85      	ldr	r3, [pc, #532]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	4a83      	ldr	r2, [pc, #524]	@ (80087d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e4:	4b7a      	ldr	r3, [pc, #488]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008610:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008614:	e087      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008620:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008628:	4b69      	ldr	r3, [pc, #420]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008638:	ed97 6a03 	vldr	s12, [r7, #12]
 800863c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008648:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800864c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008658:	e065      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008664:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80087e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866c:	4b58      	ldr	r3, [pc, #352]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008680:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800869c:	e043      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80087e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80086ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b0:	4b47      	ldr	r3, [pc, #284]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80086c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e0:	e021      	b.n	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80087dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80086f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f4:	4b36      	ldr	r3, [pc, #216]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008704:	ed97 6a03 	vldr	s12, [r7, #12]
 8008708:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80087d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800870c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008724:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008726:	4b2a      	ldr	r3, [pc, #168]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872a:	0a5b      	lsrs	r3, r3, #9
 800872c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800873c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008740:	edd7 6a07 	vldr	s13, [r7, #28]
 8008744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874c:	ee17 2a90 	vmov	r2, s15
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008754:	4b1e      	ldr	r3, [pc, #120]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	0c1b      	lsrs	r3, r3, #16
 800875a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800876a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877a:	ee17 2a90 	vmov	r2, s15
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008782:	4b13      	ldr	r3, [pc, #76]	@ (80087d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879c:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a8:	ee17 2a90 	vmov	r2, s15
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80087b0:	e008      	b.n	80087c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	609a      	str	r2, [r3, #8]
}
 80087c4:	bf00      	nop
 80087c6:	3724      	adds	r7, #36	@ 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	46000000 	.word	0x46000000
 80087dc:	4c742400 	.word	0x4c742400
 80087e0:	4a742400 	.word	0x4a742400
 80087e4:	4af42400 	.word	0x4af42400

080087e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087f6:	4b53      	ldr	r3, [pc, #332]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d101      	bne.n	8008806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e099      	b.n	800893a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008806:	4b4f      	ldr	r3, [pc, #316]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a4e      	ldr	r2, [pc, #312]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800880c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008812:	f7f8 ff47 	bl	80016a4 <HAL_GetTick>
 8008816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008818:	e008      	b.n	800882c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800881a:	f7f8 ff43 	bl	80016a4 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d901      	bls.n	800882c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e086      	b.n	800893a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800882c:	4b45      	ldr	r3, [pc, #276]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1f0      	bne.n	800881a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008838:	4b42      	ldr	r3, [pc, #264]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800883a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	493f      	ldr	r1, [pc, #252]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008848:	4313      	orrs	r3, r2
 800884a:	628b      	str	r3, [r1, #40]	@ 0x28
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	3b01      	subs	r3, #1
 8008852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	3b01      	subs	r3, #1
 800885c:	025b      	lsls	r3, r3, #9
 800885e:	b29b      	uxth	r3, r3
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	3b01      	subs	r3, #1
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	3b01      	subs	r3, #1
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800887c:	4931      	ldr	r1, [pc, #196]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008882:	4b30      	ldr	r3, [pc, #192]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	492d      	ldr	r1, [pc, #180]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008890:	4313      	orrs	r3, r2
 8008892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008894:	4b2b      	ldr	r3, [pc, #172]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	f023 0220 	bic.w	r2, r3, #32
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	4928      	ldr	r1, [pc, #160]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	4a26      	ldr	r2, [pc, #152]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088b2:	4b24      	ldr	r3, [pc, #144]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088b6:	4b24      	ldr	r3, [pc, #144]	@ (8008948 <RCCEx_PLL2_Config+0x160>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	69d2      	ldr	r2, [r2, #28]
 80088be:	00d2      	lsls	r2, r2, #3
 80088c0:	4920      	ldr	r1, [pc, #128]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	f043 0310 	orr.w	r3, r3, #16
 80088d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	4a19      	ldr	r2, [pc, #100]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088e4:	e00f      	b.n	8008906 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d106      	bne.n	80088fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088ec:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	4a14      	ldr	r2, [pc, #80]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088f8:	e005      	b.n	8008906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088fa:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	4a11      	ldr	r2, [pc, #68]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008906:	4b0f      	ldr	r3, [pc, #60]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7f8 fec7 	bl	80016a4 <HAL_GetTick>
 8008916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008918:	e008      	b.n	800892c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800891a:	f7f8 fec3 	bl	80016a4 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b02      	cmp	r3, #2
 8008926:	d901      	bls.n	800892c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e006      	b.n	800893a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800892c:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <RCCEx_PLL2_Config+0x15c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0f0      	beq.n	800891a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	58024400 	.word	0x58024400
 8008948:	ffff0007 	.word	0xffff0007

0800894c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800895a:	4b53      	ldr	r3, [pc, #332]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b03      	cmp	r3, #3
 8008964:	d101      	bne.n	800896a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e099      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800896a:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a4e      	ldr	r2, [pc, #312]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008976:	f7f8 fe95 	bl	80016a4 <HAL_GetTick>
 800897a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800897c:	e008      	b.n	8008990 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800897e:	f7f8 fe91 	bl	80016a4 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e086      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008990:	4b45      	ldr	r3, [pc, #276]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f0      	bne.n	800897e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800899c:	4b42      	ldr	r3, [pc, #264]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 800899e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	051b      	lsls	r3, r3, #20
 80089aa:	493f      	ldr	r1, [pc, #252]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	3b01      	subs	r3, #1
 80089c0:	025b      	lsls	r3, r3, #9
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	3b01      	subs	r3, #1
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089e0:	4931      	ldr	r1, [pc, #196]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089e6:	4b30      	ldr	r3, [pc, #192]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	492d      	ldr	r1, [pc, #180]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089f8:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	4928      	ldr	r1, [pc, #160]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a0a:	4b27      	ldr	r3, [pc, #156]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0e:	4a26      	ldr	r2, [pc, #152]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a16:	4b24      	ldr	r3, [pc, #144]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a1a:	4b24      	ldr	r3, [pc, #144]	@ (8008aac <RCCEx_PLL3_Config+0x160>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	69d2      	ldr	r2, [r2, #28]
 8008a22:	00d2      	lsls	r2, r2, #3
 8008a24:	4920      	ldr	r1, [pc, #128]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a40:	4a19      	ldr	r2, [pc, #100]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a48:	e00f      	b.n	8008a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d106      	bne.n	8008a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a50:	4b15      	ldr	r3, [pc, #84]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a14      	ldr	r2, [pc, #80]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a5c:	e005      	b.n	8008a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a5e:	4b12      	ldr	r3, [pc, #72]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	4a11      	ldr	r2, [pc, #68]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a76:	f7f8 fe15 	bl	80016a4 <HAL_GetTick>
 8008a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a7c:	e008      	b.n	8008a90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a7e:	f7f8 fe11 	bl	80016a4 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d901      	bls.n	8008a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e006      	b.n	8008a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a90:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <RCCEx_PLL3_Config+0x15c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0f0      	beq.n	8008a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	ffff0007 	.word	0xffff0007

08008ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e049      	b.n	8008b56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7f8 fc1c 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f000 f96e 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d020      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f06f 0202 	mvn.w	r2, #2
 8008b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8f3 	bl	8008d94 <HAL_TIM_IC_CaptureCallback>
 8008bae:	e005      	b.n	8008bbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8e5 	bl	8008d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8f6 	bl	8008da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d020      	beq.n	8008c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01b      	beq.n	8008c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f06f 0204 	mvn.w	r2, #4
 8008bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f8cd 	bl	8008d94 <HAL_TIM_IC_CaptureCallback>
 8008bfa:	e005      	b.n	8008c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8bf 	bl	8008d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8d0 	bl	8008da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f003 0308 	and.w	r3, r3, #8
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d020      	beq.n	8008c5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01b      	beq.n	8008c5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f06f 0208 	mvn.w	r2, #8
 8008c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2204      	movs	r2, #4
 8008c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8a7 	bl	8008d94 <HAL_TIM_IC_CaptureCallback>
 8008c46:	e005      	b.n	8008c54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f899 	bl	8008d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8aa 	bl	8008da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d020      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01b      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f06f 0210 	mvn.w	r2, #16
 8008c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f881 	bl	8008d94 <HAL_TIM_IC_CaptureCallback>
 8008c92:	e005      	b.n	8008ca0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f873 	bl	8008d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f884 	bl	8008da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00c      	beq.n	8008cca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f06f 0201 	mvn.w	r2, #1
 8008cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f851 	bl	8008d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9aa 	bl	800904c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00c      	beq.n	8008d1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d007      	beq.n	8008d1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9a2 	bl	8009060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f83e 	bl	8008dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00c      	beq.n	8008d64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f06f 0220 	mvn.w	r2, #32
 8008d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f96a 	bl	8009038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a46      	ldr	r2, [pc, #280]	@ (8008efc <TIM_Base_SetConfig+0x12c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dee:	d00f      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a43      	ldr	r2, [pc, #268]	@ (8008f00 <TIM_Base_SetConfig+0x130>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a42      	ldr	r2, [pc, #264]	@ (8008f04 <TIM_Base_SetConfig+0x134>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a41      	ldr	r2, [pc, #260]	@ (8008f08 <TIM_Base_SetConfig+0x138>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a40      	ldr	r2, [pc, #256]	@ (8008f0c <TIM_Base_SetConfig+0x13c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d108      	bne.n	8008e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a35      	ldr	r2, [pc, #212]	@ (8008efc <TIM_Base_SetConfig+0x12c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01f      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e30:	d01b      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a32      	ldr	r2, [pc, #200]	@ (8008f00 <TIM_Base_SetConfig+0x130>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d017      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a31      	ldr	r2, [pc, #196]	@ (8008f04 <TIM_Base_SetConfig+0x134>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d013      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a30      	ldr	r2, [pc, #192]	@ (8008f08 <TIM_Base_SetConfig+0x138>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00f      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a2f      	ldr	r2, [pc, #188]	@ (8008f0c <TIM_Base_SetConfig+0x13c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00b      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a2e      	ldr	r2, [pc, #184]	@ (8008f10 <TIM_Base_SetConfig+0x140>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008f14 <TIM_Base_SetConfig+0x144>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2c      	ldr	r2, [pc, #176]	@ (8008f18 <TIM_Base_SetConfig+0x148>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d108      	bne.n	8008e7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a16      	ldr	r2, [pc, #88]	@ (8008efc <TIM_Base_SetConfig+0x12c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00f      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a18      	ldr	r2, [pc, #96]	@ (8008f0c <TIM_Base_SetConfig+0x13c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a17      	ldr	r2, [pc, #92]	@ (8008f10 <TIM_Base_SetConfig+0x140>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d007      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a16      	ldr	r2, [pc, #88]	@ (8008f14 <TIM_Base_SetConfig+0x144>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	@ (8008f18 <TIM_Base_SetConfig+0x148>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d103      	bne.n	8008ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d105      	bne.n	8008eee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f023 0201 	bic.w	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	611a      	str	r2, [r3, #16]
  }
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40000400 	.word	0x40000400
 8008f04:	40000800 	.word	0x40000800
 8008f08:	40000c00 	.word	0x40000c00
 8008f0c:	40010400 	.word	0x40010400
 8008f10:	40014000 	.word	0x40014000
 8008f14:	40014400 	.word	0x40014400
 8008f18:	40014800 	.word	0x40014800

08008f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e06d      	b.n	8009010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a30      	ldr	r2, [pc, #192]	@ (800901c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d004      	beq.n	8008f68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a2f      	ldr	r2, [pc, #188]	@ (8009020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d108      	bne.n	8008f7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a20      	ldr	r2, [pc, #128]	@ (800901c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d022      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa6:	d01d      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a1d      	ldr	r2, [pc, #116]	@ (8009024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d018      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8009028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d00e      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a15      	ldr	r2, [pc, #84]	@ (8009020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d009      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a16      	ldr	r2, [pc, #88]	@ (8009030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d004      	beq.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a15      	ldr	r2, [pc, #84]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d10c      	bne.n	8008ffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	40010000 	.word	0x40010000
 8009020:	40010400 	.word	0x40010400
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40001800 	.word	0x40001800
 8009034:	40014000 	.word	0x40014000

08009038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e042      	b.n	800910c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908c:	2b00      	cmp	r3, #0
 800908e:	d106      	bne.n	800909e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7f8 f9b1 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2224      	movs	r2, #36	@ 0x24
 80090a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 f96a 	bl	800a398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fbff 	bl	80098c8 <UART_SetConfig>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d101      	bne.n	80090d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e01b      	b.n	800910c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f9e9 	bl	800a4dc <UART_CheckIdleState>
 800910a:	4603      	mov	r3, r0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b0ba      	sub	sp, #232	@ 0xe8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800913a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800913e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009142:	4013      	ands	r3, r2
 8009144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11b      	bne.n	8009188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b00      	cmp	r3, #0
 800915a:	d015      	beq.n	8009188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800915c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d105      	bne.n	8009174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800916c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8377 	beq.w	800986c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
      }
      return;
 8009186:	e371      	b.n	800986c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8123 	beq.w	80093d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009196:	4b8d      	ldr	r3, [pc, #564]	@ (80093cc <HAL_UART_IRQHandler+0x2b8>)
 8009198:	4013      	ands	r3, r2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800919e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091a2:	4b8b      	ldr	r3, [pc, #556]	@ (80093d0 <HAL_UART_IRQHandler+0x2bc>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8116 	beq.w	80093d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d011      	beq.n	80091dc <HAL_UART_IRQHandler+0xc8>
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2201      	movs	r2, #1
 80091ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d2:	f043 0201 	orr.w	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d011      	beq.n	800920c <HAL_UART_IRQHandler+0xf8>
 80091e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2202      	movs	r2, #2
 80091fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009202:	f043 0204 	orr.w	r2, r3, #4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d011      	beq.n	800923c <HAL_UART_IRQHandler+0x128>
 8009218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2204      	movs	r2, #4
 800922a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009232:	f043 0202 	orr.w	r2, r3, #2
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d017      	beq.n	8009278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924c:	f003 0320 	and.w	r3, r3, #32
 8009250:	2b00      	cmp	r3, #0
 8009252:	d105      	bne.n	8009260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009258:	4b5c      	ldr	r3, [pc, #368]	@ (80093cc <HAL_UART_IRQHandler+0x2b8>)
 800925a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2208      	movs	r2, #8
 8009266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800926e:	f043 0208 	orr.w	r2, r3, #8
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009280:	2b00      	cmp	r3, #0
 8009282:	d012      	beq.n	80092aa <HAL_UART_IRQHandler+0x196>
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009288:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00c      	beq.n	80092aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a0:	f043 0220 	orr.w	r2, r3, #32
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 82dd 	beq.w	8009870 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d013      	beq.n	80092ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d105      	bne.n	80092da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d005      	beq.n	800930e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009306:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800930a:	2b00      	cmp	r3, #0
 800930c:	d054      	beq.n	80093b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f9fc 	bl	800a70c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931e:	2b40      	cmp	r3, #64	@ 0x40
 8009320:	d146      	bne.n	80093b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800933c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800934e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800935a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1d9      	bne.n	8009322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009374:	2b00      	cmp	r3, #0
 8009376:	d017      	beq.n	80093a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937e:	4a15      	ldr	r2, [pc, #84]	@ (80093d4 <HAL_UART_IRQHandler+0x2c0>)
 8009380:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009388:	4618      	mov	r0, r3
 800938a:	f7fa f8d9 	bl	8003540 <HAL_DMA_Abort_IT>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d019      	beq.n	80093c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800939a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80093a2:	4610      	mov	r0, r2
 80093a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a6:	e00f      	b.n	80093c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa77 	bl	800989c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ae:	e00b      	b.n	80093c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fa73 	bl	800989c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b6:	e007      	b.n	80093c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fa6f 	bl	800989c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80093c6:	e253      	b.n	8009870 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c8:	bf00      	nop
    return;
 80093ca:	e251      	b.n	8009870 <HAL_UART_IRQHandler+0x75c>
 80093cc:	10000001 	.word	0x10000001
 80093d0:	04000120 	.word	0x04000120
 80093d4:	0800a7d9 	.word	0x0800a7d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	f040 81e7 	bne.w	80097b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 81e0 	beq.w	80097b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 81d9 	beq.w	80097b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2210      	movs	r2, #16
 8009404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009410:	2b40      	cmp	r3, #64	@ 0x40
 8009412:	f040 8151 	bne.w	80096b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a96      	ldr	r2, [pc, #600]	@ (8009678 <HAL_UART_IRQHandler+0x564>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d068      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a93      	ldr	r2, [pc, #588]	@ (800967c <HAL_UART_IRQHandler+0x568>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d061      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a91      	ldr	r2, [pc, #580]	@ (8009680 <HAL_UART_IRQHandler+0x56c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d05a      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a8e      	ldr	r2, [pc, #568]	@ (8009684 <HAL_UART_IRQHandler+0x570>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d053      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a8c      	ldr	r2, [pc, #560]	@ (8009688 <HAL_UART_IRQHandler+0x574>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d04c      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a89      	ldr	r2, [pc, #548]	@ (800968c <HAL_UART_IRQHandler+0x578>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d045      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a87      	ldr	r2, [pc, #540]	@ (8009690 <HAL_UART_IRQHandler+0x57c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d03e      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a84      	ldr	r2, [pc, #528]	@ (8009694 <HAL_UART_IRQHandler+0x580>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d037      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a82      	ldr	r2, [pc, #520]	@ (8009698 <HAL_UART_IRQHandler+0x584>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d030      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a7f      	ldr	r2, [pc, #508]	@ (800969c <HAL_UART_IRQHandler+0x588>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d029      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a7d      	ldr	r2, [pc, #500]	@ (80096a0 <HAL_UART_IRQHandler+0x58c>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d022      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a7a      	ldr	r2, [pc, #488]	@ (80096a4 <HAL_UART_IRQHandler+0x590>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01b      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a78      	ldr	r2, [pc, #480]	@ (80096a8 <HAL_UART_IRQHandler+0x594>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d014      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a75      	ldr	r2, [pc, #468]	@ (80096ac <HAL_UART_IRQHandler+0x598>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00d      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a73      	ldr	r2, [pc, #460]	@ (80096b0 <HAL_UART_IRQHandler+0x59c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d006      	beq.n	80094f6 <HAL_UART_IRQHandler+0x3e2>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a70      	ldr	r2, [pc, #448]	@ (80096b4 <HAL_UART_IRQHandler+0x5a0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d106      	bne.n	8009504 <HAL_UART_IRQHandler+0x3f0>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	b29b      	uxth	r3, r3
 8009502:	e005      	b.n	8009510 <HAL_UART_IRQHandler+0x3fc>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 81ab 	beq.w	8009874 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009528:	429a      	cmp	r2, r3
 800952a:	f080 81a3 	bcs.w	8009874 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009544:	f000 8087 	beq.w	8009656 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800955c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009576:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800957e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800958a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1da      	bne.n	8009548 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095a4:	f023 0301 	bic.w	r3, r3, #1
 80095a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3308      	adds	r3, #8
 80095b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e1      	bne.n	8009592 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e3      	bne.n	80095ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009624:	f023 0310 	bic.w	r3, r3, #16
 8009628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009636:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009638:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800963c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e4      	bne.n	8009614 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009650:	4618      	mov	r0, r3
 8009652:	f7f9 fc57 	bl	8002f04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009668:	b29b      	uxth	r3, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f91d 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009676:	e0fd      	b.n	8009874 <HAL_UART_IRQHandler+0x760>
 8009678:	40020010 	.word	0x40020010
 800967c:	40020028 	.word	0x40020028
 8009680:	40020040 	.word	0x40020040
 8009684:	40020058 	.word	0x40020058
 8009688:	40020070 	.word	0x40020070
 800968c:	40020088 	.word	0x40020088
 8009690:	400200a0 	.word	0x400200a0
 8009694:	400200b8 	.word	0x400200b8
 8009698:	40020410 	.word	0x40020410
 800969c:	40020428 	.word	0x40020428
 80096a0:	40020440 	.word	0x40020440
 80096a4:	40020458 	.word	0x40020458
 80096a8:	40020470 	.word	0x40020470
 80096ac:	40020488 	.word	0x40020488
 80096b0:	400204a0 	.word	0x400204a0
 80096b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80cf 	beq.w	8009878 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80096da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 80ca 	beq.w	8009878 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009706:	647b      	str	r3, [r7, #68]	@ 0x44
 8009708:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800970c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e4      	bne.n	80096e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	623b      	str	r3, [r7, #32]
   return(result);
 800972a:	6a3a      	ldr	r2, [r7, #32]
 800972c:	4b55      	ldr	r3, [pc, #340]	@ (8009884 <HAL_UART_IRQHandler+0x770>)
 800972e:	4013      	ands	r3, r2
 8009730:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3308      	adds	r3, #8
 800973a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800973e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e3      	bne.n	800971a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	60fb      	str	r3, [r7, #12]
   return(result);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 0310 	bic.w	r3, r3, #16
 800977a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	69b9      	ldr	r1, [r7, #24]
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	617b      	str	r3, [r7, #20]
   return(result);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e4      	bne.n	8009766 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f881 	bl	80098b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ae:	e063      	b.n	8009878 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00e      	beq.n	80097da <HAL_UART_IRQHandler+0x6c6>
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d008      	beq.n	80097da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80097d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 f841 	bl	800a85a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097d8:	e051      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d014      	beq.n	8009810 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d105      	bne.n	80097fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009802:	2b00      	cmp	r3, #0
 8009804:	d03a      	beq.n	800987c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
    }
    return;
 800980e:	e035      	b.n	800987c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <HAL_UART_IRQHandler+0x71c>
 800981c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 ffeb 	bl	800a804 <UART_EndTransmit_IT>
    return;
 800982e:	e026      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d009      	beq.n	8009850 <HAL_UART_IRQHandler+0x73c>
 800983c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009840:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 f81a 	bl	800a882 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800984e:	e016      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d010      	beq.n	800987e <HAL_UART_IRQHandler+0x76a>
 800985c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009860:	2b00      	cmp	r3, #0
 8009862:	da0c      	bge.n	800987e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f802 	bl	800a86e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800986a:	e008      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
      return;
 800986c:	bf00      	nop
 800986e:	e006      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
    return;
 8009870:	bf00      	nop
 8009872:	e004      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
      return;
 8009874:	bf00      	nop
 8009876:	e002      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
      return;
 8009878:	bf00      	nop
 800987a:	e000      	b.n	800987e <HAL_UART_IRQHandler+0x76a>
    return;
 800987c:	bf00      	nop
  }
}
 800987e:	37e8      	adds	r7, #232	@ 0xe8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	effffffe 	.word	0xeffffffe

08009888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098cc:	b092      	sub	sp, #72	@ 0x48
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	4bbe      	ldr	r3, [pc, #760]	@ (8009bf0 <UART_SetConfig+0x328>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009900:	430b      	orrs	r3, r1
 8009902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4ab3      	ldr	r2, [pc, #716]	@ (8009bf4 <UART_SetConfig+0x32c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009930:	4313      	orrs	r3, r2
 8009932:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	4baf      	ldr	r3, [pc, #700]	@ (8009bf8 <UART_SetConfig+0x330>)
 800993c:	4013      	ands	r3, r2
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	6812      	ldr	r2, [r2, #0]
 8009942:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009944:	430b      	orrs	r3, r1
 8009946:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994e:	f023 010f 	bic.w	r1, r3, #15
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4aa6      	ldr	r2, [pc, #664]	@ (8009bfc <UART_SetConfig+0x334>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d177      	bne.n	8009a58 <UART_SetConfig+0x190>
 8009968:	4ba5      	ldr	r3, [pc, #660]	@ (8009c00 <UART_SetConfig+0x338>)
 800996a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009970:	2b28      	cmp	r3, #40	@ 0x28
 8009972:	d86d      	bhi.n	8009a50 <UART_SetConfig+0x188>
 8009974:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <UART_SetConfig+0xb4>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	08009a21 	.word	0x08009a21
 8009980:	08009a51 	.word	0x08009a51
 8009984:	08009a51 	.word	0x08009a51
 8009988:	08009a51 	.word	0x08009a51
 800998c:	08009a51 	.word	0x08009a51
 8009990:	08009a51 	.word	0x08009a51
 8009994:	08009a51 	.word	0x08009a51
 8009998:	08009a51 	.word	0x08009a51
 800999c:	08009a29 	.word	0x08009a29
 80099a0:	08009a51 	.word	0x08009a51
 80099a4:	08009a51 	.word	0x08009a51
 80099a8:	08009a51 	.word	0x08009a51
 80099ac:	08009a51 	.word	0x08009a51
 80099b0:	08009a51 	.word	0x08009a51
 80099b4:	08009a51 	.word	0x08009a51
 80099b8:	08009a51 	.word	0x08009a51
 80099bc:	08009a31 	.word	0x08009a31
 80099c0:	08009a51 	.word	0x08009a51
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a51 	.word	0x08009a51
 80099cc:	08009a51 	.word	0x08009a51
 80099d0:	08009a51 	.word	0x08009a51
 80099d4:	08009a51 	.word	0x08009a51
 80099d8:	08009a51 	.word	0x08009a51
 80099dc:	08009a39 	.word	0x08009a39
 80099e0:	08009a51 	.word	0x08009a51
 80099e4:	08009a51 	.word	0x08009a51
 80099e8:	08009a51 	.word	0x08009a51
 80099ec:	08009a51 	.word	0x08009a51
 80099f0:	08009a51 	.word	0x08009a51
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a51 	.word	0x08009a51
 80099fc:	08009a41 	.word	0x08009a41
 8009a00:	08009a51 	.word	0x08009a51
 8009a04:	08009a51 	.word	0x08009a51
 8009a08:	08009a51 	.word	0x08009a51
 8009a0c:	08009a51 	.word	0x08009a51
 8009a10:	08009a51 	.word	0x08009a51
 8009a14:	08009a51 	.word	0x08009a51
 8009a18:	08009a51 	.word	0x08009a51
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a26:	e222      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2e:	e21e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a36:	e21a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3e:	e216      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a40:	2320      	movs	r3, #32
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a46:	e212      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a48:	2340      	movs	r3, #64	@ 0x40
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4e:	e20e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a50:	2380      	movs	r3, #128	@ 0x80
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a56:	e20a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a69      	ldr	r2, [pc, #420]	@ (8009c04 <UART_SetConfig+0x33c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d130      	bne.n	8009ac4 <UART_SetConfig+0x1fc>
 8009a62:	4b67      	ldr	r3, [pc, #412]	@ (8009c00 <UART_SetConfig+0x338>)
 8009a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b05      	cmp	r3, #5
 8009a6c:	d826      	bhi.n	8009abc <UART_SetConfig+0x1f4>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x1ac>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009a95 	.word	0x08009a95
 8009a7c:	08009a9d 	.word	0x08009a9d
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009aad 	.word	0x08009aad
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a92:	e1ec      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a94:	2304      	movs	r3, #4
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9a:	e1e8      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa2:	e1e4      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e1e0      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009aac:	2320      	movs	r3, #32
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e1dc      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009ab4:	2340      	movs	r3, #64	@ 0x40
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e1d8      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009abc:	2380      	movs	r3, #128	@ 0x80
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e1d4      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a4f      	ldr	r2, [pc, #316]	@ (8009c08 <UART_SetConfig+0x340>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d130      	bne.n	8009b30 <UART_SetConfig+0x268>
 8009ace:	4b4c      	ldr	r3, [pc, #304]	@ (8009c00 <UART_SetConfig+0x338>)
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d826      	bhi.n	8009b28 <UART_SetConfig+0x260>
 8009ada:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <UART_SetConfig+0x218>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009b01 	.word	0x08009b01
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	08009b11 	.word	0x08009b11
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b21 	.word	0x08009b21
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afe:	e1b6      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b00:	2304      	movs	r3, #4
 8009b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b06:	e1b2      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0e:	e1ae      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b10:	2310      	movs	r3, #16
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e1aa      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b18:	2320      	movs	r3, #32
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e1a6      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b20:	2340      	movs	r3, #64	@ 0x40
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b26:	e1a2      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b28:	2380      	movs	r3, #128	@ 0x80
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2e:	e19e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a35      	ldr	r2, [pc, #212]	@ (8009c0c <UART_SetConfig+0x344>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d130      	bne.n	8009b9c <UART_SetConfig+0x2d4>
 8009b3a:	4b31      	ldr	r3, [pc, #196]	@ (8009c00 <UART_SetConfig+0x338>)
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d826      	bhi.n	8009b94 <UART_SetConfig+0x2cc>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0x284>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b75 	.word	0x08009b75
 8009b58:	08009b7d 	.word	0x08009b7d
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6a:	e180      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b72:	e17c      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7a:	e178      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e174      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e170      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b8c:	2340      	movs	r3, #64	@ 0x40
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e16c      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b94:	2380      	movs	r3, #128	@ 0x80
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e168      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8009c10 <UART_SetConfig+0x348>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d142      	bne.n	8009c2c <UART_SetConfig+0x364>
 8009ba6:	4b16      	ldr	r3, [pc, #88]	@ (8009c00 <UART_SetConfig+0x338>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d838      	bhi.n	8009c24 <UART_SetConfig+0x35c>
 8009bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb8 <UART_SetConfig+0x2f0>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd1 	.word	0x08009bd1
 8009bbc:	08009bd9 	.word	0x08009bd9
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009be9 	.word	0x08009be9
 8009bc8:	08009c15 	.word	0x08009c15
 8009bcc:	08009c1d 	.word	0x08009c1d
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e14a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e146      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e142      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e13e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009bf0:	cfff69f3 	.word	0xcfff69f3
 8009bf4:	58000c00 	.word	0x58000c00
 8009bf8:	11fff4ff 	.word	0x11fff4ff
 8009bfc:	40011000 	.word	0x40011000
 8009c00:	58024400 	.word	0x58024400
 8009c04:	40004400 	.word	0x40004400
 8009c08:	40004800 	.word	0x40004800
 8009c0c:	40004c00 	.word	0x40004c00
 8009c10:	40005000 	.word	0x40005000
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	e128      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009c1c:	2340      	movs	r3, #64	@ 0x40
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c22:	e124      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009c24:	2380      	movs	r3, #128	@ 0x80
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2a:	e120      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4acb      	ldr	r2, [pc, #812]	@ (8009f60 <UART_SetConfig+0x698>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d176      	bne.n	8009d24 <UART_SetConfig+0x45c>
 8009c36:	4bcb      	ldr	r3, [pc, #812]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c3e:	2b28      	cmp	r3, #40	@ 0x28
 8009c40:	d86c      	bhi.n	8009d1c <UART_SetConfig+0x454>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <UART_SetConfig+0x380>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009ced 	.word	0x08009ced
 8009c4c:	08009d1d 	.word	0x08009d1d
 8009c50:	08009d1d 	.word	0x08009d1d
 8009c54:	08009d1d 	.word	0x08009d1d
 8009c58:	08009d1d 	.word	0x08009d1d
 8009c5c:	08009d1d 	.word	0x08009d1d
 8009c60:	08009d1d 	.word	0x08009d1d
 8009c64:	08009d1d 	.word	0x08009d1d
 8009c68:	08009cf5 	.word	0x08009cf5
 8009c6c:	08009d1d 	.word	0x08009d1d
 8009c70:	08009d1d 	.word	0x08009d1d
 8009c74:	08009d1d 	.word	0x08009d1d
 8009c78:	08009d1d 	.word	0x08009d1d
 8009c7c:	08009d1d 	.word	0x08009d1d
 8009c80:	08009d1d 	.word	0x08009d1d
 8009c84:	08009d1d 	.word	0x08009d1d
 8009c88:	08009cfd 	.word	0x08009cfd
 8009c8c:	08009d1d 	.word	0x08009d1d
 8009c90:	08009d1d 	.word	0x08009d1d
 8009c94:	08009d1d 	.word	0x08009d1d
 8009c98:	08009d1d 	.word	0x08009d1d
 8009c9c:	08009d1d 	.word	0x08009d1d
 8009ca0:	08009d1d 	.word	0x08009d1d
 8009ca4:	08009d1d 	.word	0x08009d1d
 8009ca8:	08009d05 	.word	0x08009d05
 8009cac:	08009d1d 	.word	0x08009d1d
 8009cb0:	08009d1d 	.word	0x08009d1d
 8009cb4:	08009d1d 	.word	0x08009d1d
 8009cb8:	08009d1d 	.word	0x08009d1d
 8009cbc:	08009d1d 	.word	0x08009d1d
 8009cc0:	08009d1d 	.word	0x08009d1d
 8009cc4:	08009d1d 	.word	0x08009d1d
 8009cc8:	08009d0d 	.word	0x08009d0d
 8009ccc:	08009d1d 	.word	0x08009d1d
 8009cd0:	08009d1d 	.word	0x08009d1d
 8009cd4:	08009d1d 	.word	0x08009d1d
 8009cd8:	08009d1d 	.word	0x08009d1d
 8009cdc:	08009d1d 	.word	0x08009d1d
 8009ce0:	08009d1d 	.word	0x08009d1d
 8009ce4:	08009d1d 	.word	0x08009d1d
 8009ce8:	08009d15 	.word	0x08009d15
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf2:	e0bc      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e0b8      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e0b4      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e0b0      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d0c:	2320      	movs	r3, #32
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e0ac      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d14:	2340      	movs	r3, #64	@ 0x40
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e0a8      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d1c:	2380      	movs	r3, #128	@ 0x80
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e0a4      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a8f      	ldr	r2, [pc, #572]	@ (8009f68 <UART_SetConfig+0x6a0>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d130      	bne.n	8009d90 <UART_SetConfig+0x4c8>
 8009d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	d826      	bhi.n	8009d88 <UART_SetConfig+0x4c0>
 8009d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <UART_SetConfig+0x478>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d61 	.word	0x08009d61
 8009d48:	08009d69 	.word	0x08009d69
 8009d4c:	08009d71 	.word	0x08009d71
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d81 	.word	0x08009d81
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e086      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e082      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e07e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e07a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e076      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d80:	2340      	movs	r3, #64	@ 0x40
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e072      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d88:	2380      	movs	r3, #128	@ 0x80
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e06e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a75      	ldr	r2, [pc, #468]	@ (8009f6c <UART_SetConfig+0x6a4>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d130      	bne.n	8009dfc <UART_SetConfig+0x534>
 8009d9a:	4b72      	ldr	r3, [pc, #456]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	d826      	bhi.n	8009df4 <UART_SetConfig+0x52c>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <UART_SetConfig+0x4e4>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dc5 	.word	0x08009dc5
 8009db0:	08009dcd 	.word	0x08009dcd
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009de5 	.word	0x08009de5
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e050      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e04c      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e048      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e044      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e040      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009dec:	2340      	movs	r3, #64	@ 0x40
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e03c      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009df4:	2380      	movs	r3, #128	@ 0x80
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e038      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a5b      	ldr	r2, [pc, #364]	@ (8009f70 <UART_SetConfig+0x6a8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d130      	bne.n	8009e68 <UART_SetConfig+0x5a0>
 8009e06:	4b57      	ldr	r3, [pc, #348]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d826      	bhi.n	8009e60 <UART_SetConfig+0x598>
 8009e12:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <UART_SetConfig+0x550>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e39 	.word	0x08009e39
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009e49 	.word	0x08009e49
 8009e28:	08009e51 	.word	0x08009e51
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	2302      	movs	r3, #2
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e01a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e016      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e012      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e00e      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e00a      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e58:	2340      	movs	r3, #64	@ 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e006      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e60:	2380      	movs	r3, #128	@ 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e002      	b.n	8009e6e <UART_SetConfig+0x5a6>
 8009e68:	2380      	movs	r3, #128	@ 0x80
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a3f      	ldr	r2, [pc, #252]	@ (8009f70 <UART_SetConfig+0x6a8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	f040 80f8 	bne.w	800a06a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	dc46      	bgt.n	8009f10 <UART_SetConfig+0x648>
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	f2c0 8082 	blt.w	8009f8c <UART_SetConfig+0x6c4>
 8009e88:	3b02      	subs	r3, #2
 8009e8a:	2b1e      	cmp	r3, #30
 8009e8c:	d87e      	bhi.n	8009f8c <UART_SetConfig+0x6c4>
 8009e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0x5cc>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009f17 	.word	0x08009f17
 8009e98:	08009f8d 	.word	0x08009f8d
 8009e9c:	08009f1f 	.word	0x08009f1f
 8009ea0:	08009f8d 	.word	0x08009f8d
 8009ea4:	08009f8d 	.word	0x08009f8d
 8009ea8:	08009f8d 	.word	0x08009f8d
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f8d 	.word	0x08009f8d
 8009eb4:	08009f8d 	.word	0x08009f8d
 8009eb8:	08009f8d 	.word	0x08009f8d
 8009ebc:	08009f8d 	.word	0x08009f8d
 8009ec0:	08009f8d 	.word	0x08009f8d
 8009ec4:	08009f8d 	.word	0x08009f8d
 8009ec8:	08009f8d 	.word	0x08009f8d
 8009ecc:	08009f3f 	.word	0x08009f3f
 8009ed0:	08009f8d 	.word	0x08009f8d
 8009ed4:	08009f8d 	.word	0x08009f8d
 8009ed8:	08009f8d 	.word	0x08009f8d
 8009edc:	08009f8d 	.word	0x08009f8d
 8009ee0:	08009f8d 	.word	0x08009f8d
 8009ee4:	08009f8d 	.word	0x08009f8d
 8009ee8:	08009f8d 	.word	0x08009f8d
 8009eec:	08009f8d 	.word	0x08009f8d
 8009ef0:	08009f8d 	.word	0x08009f8d
 8009ef4:	08009f8d 	.word	0x08009f8d
 8009ef8:	08009f8d 	.word	0x08009f8d
 8009efc:	08009f8d 	.word	0x08009f8d
 8009f00:	08009f8d 	.word	0x08009f8d
 8009f04:	08009f8d 	.word	0x08009f8d
 8009f08:	08009f8d 	.word	0x08009f8d
 8009f0c:	08009f7f 	.word	0x08009f7f
 8009f10:	2b40      	cmp	r3, #64	@ 0x40
 8009f12:	d037      	beq.n	8009f84 <UART_SetConfig+0x6bc>
 8009f14:	e03a      	b.n	8009f8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f16:	f7fe f857 	bl	8007fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e03c      	b.n	8009f98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f866 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e034      	b.n	8009f98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f2e:	f107 0318 	add.w	r3, r7, #24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe f9b2 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e02c      	b.n	8009f98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3e:	4b09      	ldr	r3, [pc, #36]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f4a:	4b06      	ldr	r3, [pc, #24]	@ (8009f64 <UART_SetConfig+0x69c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	08db      	lsrs	r3, r3, #3
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	4a07      	ldr	r2, [pc, #28]	@ (8009f74 <UART_SetConfig+0x6ac>)
 8009f56:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f5c:	e01c      	b.n	8009f98 <UART_SetConfig+0x6d0>
 8009f5e:	bf00      	nop
 8009f60:	40011400 	.word	0x40011400
 8009f64:	58024400 	.word	0x58024400
 8009f68:	40007800 	.word	0x40007800
 8009f6c:	40007c00 	.word	0x40007c00
 8009f70:	58000c00 	.word	0x58000c00
 8009f74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f78:	4b9d      	ldr	r3, [pc, #628]	@ (800a1f0 <UART_SetConfig+0x928>)
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7c:	e00c      	b.n	8009f98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f7e:	4b9d      	ldr	r3, [pc, #628]	@ (800a1f4 <UART_SetConfig+0x92c>)
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f82:	e009      	b.n	8009f98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8a:	e005      	b.n	8009f98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 81de 	beq.w	800a35c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa4:	4a94      	ldr	r2, [pc, #592]	@ (800a1f8 <UART_SetConfig+0x930>)
 8009fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009faa:	461a      	mov	r2, r3
 8009fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d305      	bcc.n	8009fd0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d903      	bls.n	8009fd8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fd6:	e1c1      	b.n	800a35c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	2200      	movs	r2, #0
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	4a84      	ldr	r2, [pc, #528]	@ (800a1f8 <UART_SetConfig+0x930>)
 8009fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2200      	movs	r2, #0
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ffa:	f7f6 f96d 	bl	80002d8 <__aeabi_uldivmod>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	020b      	lsls	r3, r1, #8
 800a010:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a014:	0202      	lsls	r2, r0, #8
 800a016:	6979      	ldr	r1, [r7, #20]
 800a018:	6849      	ldr	r1, [r1, #4]
 800a01a:	0849      	lsrs	r1, r1, #1
 800a01c:	2000      	movs	r0, #0
 800a01e:	460c      	mov	r4, r1
 800a020:	4605      	mov	r5, r0
 800a022:	eb12 0804 	adds.w	r8, r2, r4
 800a026:	eb43 0905 	adc.w	r9, r3, r5
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	469a      	mov	sl, r3
 800a032:	4693      	mov	fp, r2
 800a034:	4652      	mov	r2, sl
 800a036:	465b      	mov	r3, fp
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 f94c 	bl	80002d8 <__aeabi_uldivmod>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4613      	mov	r3, r2
 800a046:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a04e:	d308      	bcc.n	800a062 <UART_SetConfig+0x79a>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a056:	d204      	bcs.n	800a062 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a05e:	60da      	str	r2, [r3, #12]
 800a060:	e17c      	b.n	800a35c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a068:	e178      	b.n	800a35c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a072:	f040 80c5 	bne.w	800a200 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a076:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	dc48      	bgt.n	800a110 <UART_SetConfig+0x848>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	db7b      	blt.n	800a17a <UART_SetConfig+0x8b2>
 800a082:	2b20      	cmp	r3, #32
 800a084:	d879      	bhi.n	800a17a <UART_SetConfig+0x8b2>
 800a086:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <UART_SetConfig+0x7c4>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a117 	.word	0x0800a117
 800a090:	0800a11f 	.word	0x0800a11f
 800a094:	0800a17b 	.word	0x0800a17b
 800a098:	0800a17b 	.word	0x0800a17b
 800a09c:	0800a127 	.word	0x0800a127
 800a0a0:	0800a17b 	.word	0x0800a17b
 800a0a4:	0800a17b 	.word	0x0800a17b
 800a0a8:	0800a17b 	.word	0x0800a17b
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a17b 	.word	0x0800a17b
 800a0b4:	0800a17b 	.word	0x0800a17b
 800a0b8:	0800a17b 	.word	0x0800a17b
 800a0bc:	0800a17b 	.word	0x0800a17b
 800a0c0:	0800a17b 	.word	0x0800a17b
 800a0c4:	0800a17b 	.word	0x0800a17b
 800a0c8:	0800a17b 	.word	0x0800a17b
 800a0cc:	0800a147 	.word	0x0800a147
 800a0d0:	0800a17b 	.word	0x0800a17b
 800a0d4:	0800a17b 	.word	0x0800a17b
 800a0d8:	0800a17b 	.word	0x0800a17b
 800a0dc:	0800a17b 	.word	0x0800a17b
 800a0e0:	0800a17b 	.word	0x0800a17b
 800a0e4:	0800a17b 	.word	0x0800a17b
 800a0e8:	0800a17b 	.word	0x0800a17b
 800a0ec:	0800a17b 	.word	0x0800a17b
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a17b 	.word	0x0800a17b
 800a0f8:	0800a17b 	.word	0x0800a17b
 800a0fc:	0800a17b 	.word	0x0800a17b
 800a100:	0800a17b 	.word	0x0800a17b
 800a104:	0800a17b 	.word	0x0800a17b
 800a108:	0800a17b 	.word	0x0800a17b
 800a10c:	0800a16d 	.word	0x0800a16d
 800a110:	2b40      	cmp	r3, #64	@ 0x40
 800a112:	d02e      	beq.n	800a172 <UART_SetConfig+0x8aa>
 800a114:	e031      	b.n	800a17a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a116:	f7fb ffa1 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 800a11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a11c:	e033      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a11e:	f7fb ffb3 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 800a122:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a124:	e02f      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fd ff62 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a134:	e027      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a136:	f107 0318 	add.w	r3, r7, #24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe f8ae 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a144:	e01f      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a146:	4b2d      	ldr	r3, [pc, #180]	@ (800a1fc <UART_SetConfig+0x934>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a152:	4b2a      	ldr	r3, [pc, #168]	@ (800a1fc <UART_SetConfig+0x934>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	08db      	lsrs	r3, r3, #3
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	4a24      	ldr	r2, [pc, #144]	@ (800a1f0 <UART_SetConfig+0x928>)
 800a15e:	fa22 f303 	lsr.w	r3, r2, r3
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a164:	e00f      	b.n	800a186 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a166:	4b22      	ldr	r3, [pc, #136]	@ (800a1f0 <UART_SetConfig+0x928>)
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16a:	e00c      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a16c:	4b21      	ldr	r3, [pc, #132]	@ (800a1f4 <UART_SetConfig+0x92c>)
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a170:	e009      	b.n	800a186 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	e005      	b.n	800a186 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80e7 	beq.w	800a35c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a192:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <UART_SetConfig+0x930>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a0:	005a      	lsls	r2, r3, #1
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	441a      	add	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d916      	bls.n	800a1e8 <UART_SetConfig+0x920>
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c0:	d212      	bcs.n	800a1e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f023 030f 	bic.w	r3, r3, #15
 800a1ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	e0b9      	b.n	800a35c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1ee:	e0b5      	b.n	800a35c <UART_SetConfig+0xa94>
 800a1f0:	03d09000 	.word	0x03d09000
 800a1f4:	003d0900 	.word	0x003d0900
 800a1f8:	0800ab24 	.word	0x0800ab24
 800a1fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a200:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a204:	2b20      	cmp	r3, #32
 800a206:	dc49      	bgt.n	800a29c <UART_SetConfig+0x9d4>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db7c      	blt.n	800a306 <UART_SetConfig+0xa3e>
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	d87a      	bhi.n	800a306 <UART_SetConfig+0xa3e>
 800a210:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <UART_SetConfig+0x950>)
 800a212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a216:	bf00      	nop
 800a218:	0800a2a3 	.word	0x0800a2a3
 800a21c:	0800a2ab 	.word	0x0800a2ab
 800a220:	0800a307 	.word	0x0800a307
 800a224:	0800a307 	.word	0x0800a307
 800a228:	0800a2b3 	.word	0x0800a2b3
 800a22c:	0800a307 	.word	0x0800a307
 800a230:	0800a307 	.word	0x0800a307
 800a234:	0800a307 	.word	0x0800a307
 800a238:	0800a2c3 	.word	0x0800a2c3
 800a23c:	0800a307 	.word	0x0800a307
 800a240:	0800a307 	.word	0x0800a307
 800a244:	0800a307 	.word	0x0800a307
 800a248:	0800a307 	.word	0x0800a307
 800a24c:	0800a307 	.word	0x0800a307
 800a250:	0800a307 	.word	0x0800a307
 800a254:	0800a307 	.word	0x0800a307
 800a258:	0800a2d3 	.word	0x0800a2d3
 800a25c:	0800a307 	.word	0x0800a307
 800a260:	0800a307 	.word	0x0800a307
 800a264:	0800a307 	.word	0x0800a307
 800a268:	0800a307 	.word	0x0800a307
 800a26c:	0800a307 	.word	0x0800a307
 800a270:	0800a307 	.word	0x0800a307
 800a274:	0800a307 	.word	0x0800a307
 800a278:	0800a307 	.word	0x0800a307
 800a27c:	0800a307 	.word	0x0800a307
 800a280:	0800a307 	.word	0x0800a307
 800a284:	0800a307 	.word	0x0800a307
 800a288:	0800a307 	.word	0x0800a307
 800a28c:	0800a307 	.word	0x0800a307
 800a290:	0800a307 	.word	0x0800a307
 800a294:	0800a307 	.word	0x0800a307
 800a298:	0800a2f9 	.word	0x0800a2f9
 800a29c:	2b40      	cmp	r3, #64	@ 0x40
 800a29e:	d02e      	beq.n	800a2fe <UART_SetConfig+0xa36>
 800a2a0:	e031      	b.n	800a306 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a2:	f7fb fedb 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 800a2a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2a8:	e033      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2aa:	f7fb feed 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 800a2ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2b0:	e02f      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd fe9c 	bl	8007ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c0:	e027      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c2:	f107 0318 	add.w	r3, r7, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ffe8 	bl	800829c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	e01f      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a388 <UART_SetConfig+0xac0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2de:	4b2a      	ldr	r3, [pc, #168]	@ (800a388 <UART_SetConfig+0xac0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	4a28      	ldr	r2, [pc, #160]	@ (800a38c <UART_SetConfig+0xac4>)
 800a2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2f0:	e00f      	b.n	800a312 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a2f2:	4b26      	ldr	r3, [pc, #152]	@ (800a38c <UART_SetConfig+0xac4>)
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f6:	e00c      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2f8:	4b25      	ldr	r3, [pc, #148]	@ (800a390 <UART_SetConfig+0xac8>)
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2fc:	e009      	b.n	800a312 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a304:	e005      	b.n	800a312 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a310:	bf00      	nop
    }

    if (pclk != 0U)
 800a312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d021      	beq.n	800a35c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31c:	4a1d      	ldr	r2, [pc, #116]	@ (800a394 <UART_SetConfig+0xacc>)
 800a31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a322:	461a      	mov	r2, r3
 800a324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a326:	fbb3 f2f2 	udiv	r2, r3, r2
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	441a      	add	r2, r3
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33e:	2b0f      	cmp	r3, #15
 800a340:	d909      	bls.n	800a356 <UART_SetConfig+0xa8e>
 800a342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a348:	d205      	bcs.n	800a356 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60da      	str	r2, [r3, #12]
 800a354:	e002      	b.n	800a35c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2201      	movs	r2, #1
 800a360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2201      	movs	r2, #1
 800a368:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2200      	movs	r2, #0
 800a370:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a378:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3748      	adds	r7, #72	@ 0x48
 800a380:	46bd      	mov	sp, r7
 800a382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a386:	bf00      	nop
 800a388:	58024400 	.word	0x58024400
 800a38c:	03d09000 	.word	0x03d09000
 800a390:	003d0900 	.word	0x003d0900
 800a394:	0800ab24 	.word	0x0800ab24

0800a398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a496:	d10a      	bne.n	800a4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b098      	sub	sp, #96	@ 0x60
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4ec:	f7f7 f8da 	bl	80016a4 <HAL_GetTick>
 800a4f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d12f      	bne.n	800a560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a508:	2200      	movs	r2, #0
 800a50a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f88e 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d022      	beq.n	800a560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a522:	e853 3f00 	ldrex	r3, [r3]
 800a526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a52e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a538:	647b      	str	r3, [r7, #68]	@ 0x44
 800a53a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a540:	e841 2300 	strex	r3, r2, [r1]
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1e6      	bne.n	800a51a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2220      	movs	r2, #32
 800a550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e063      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d149      	bne.n	800a602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a56e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a576:	2200      	movs	r2, #0
 800a578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f857 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03c      	beq.n	800a602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	623b      	str	r3, [r7, #32]
   return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5da:	61fa      	str	r2, [r7, #28]
 800a5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	69b9      	ldr	r1, [r7, #24]
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e5      	bne.n	800a5ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e012      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3758      	adds	r7, #88	@ 0x58
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a640:	e04f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d04b      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7f7 f82b 	bl	80016a4 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <UART_WaitOnFlagUntilTimeout+0x30>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e04e      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d037      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b80      	cmp	r3, #128	@ 0x80
 800a676:	d034      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	d031      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d110      	bne.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2208      	movs	r2, #8
 800a692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f839 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2208      	movs	r2, #8
 800a69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e029      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6bc:	d111      	bne.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f81f 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e00f      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	bf0c      	ite	eq
 800a6f2:	2301      	moveq	r3, #1
 800a6f4:	2300      	movne	r3, #0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d0a0      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b095      	sub	sp, #84	@ 0x54
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a732:	643b      	str	r3, [r7, #64]	@ 0x40
 800a734:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	61fb      	str	r3, [r7, #28]
   return(result);
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	4b1e      	ldr	r3, [pc, #120]	@ (800a7d4 <UART_EndRxTransfer+0xc8>)
 800a75a:	4013      	ands	r3, r2
 800a75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3308      	adds	r3, #8
 800a764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d118      	bne.n	800a7b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f023 0310 	bic.w	r3, r3, #16
 800a796:	647b      	str	r3, [r7, #68]	@ 0x44
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6979      	ldr	r1, [r7, #20]
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e6      	bne.n	800a782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7c8:	bf00      	nop
 800a7ca:	3754      	adds	r7, #84	@ 0x54
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	effffffe 	.word	0xeffffffe

0800a7d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff f850 	bl	800989c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7fc:	bf00      	nop
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	60bb      	str	r3, [r7, #8]
   return(result);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	61bb      	str	r3, [r7, #24]
 800a82c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6979      	ldr	r1, [r7, #20]
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	613b      	str	r3, [r7, #16]
   return(result);
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e6      	bne.n	800a80c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff f81b 	bl	8009888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a852:	bf00      	nop
 800a854:	3720      	adds	r7, #32
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_UARTEx_DisableFifoMode+0x16>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e027      	b.n	800a8fc <HAL_UARTEx_DisableFifoMode+0x66>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2224      	movs	r2, #36	@ 0x24
 800a8b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0201 	bic.w	r2, r2, #1
 800a8d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d101      	bne.n	800a920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a91c:	2302      	movs	r3, #2
 800a91e:	e02d      	b.n	800a97c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2224      	movs	r2, #36	@ 0x24
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0201 	bic.w	r2, r2, #1
 800a946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f84f 	bl	800aa00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a998:	2302      	movs	r3, #2
 800a99a:	e02d      	b.n	800a9f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2224      	movs	r2, #36	@ 0x24
 800a9a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0201 	bic.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f811 	bl	800aa00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d108      	bne.n	800aa22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa20:	e031      	b.n	800aa86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa22:	2310      	movs	r3, #16
 800aa24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa26:	2310      	movs	r3, #16
 800aa28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	0e5b      	lsrs	r3, r3, #25
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	0f5b      	lsrs	r3, r3, #29
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	7b3a      	ldrb	r2, [r7, #12]
 800aa4e:	4911      	ldr	r1, [pc, #68]	@ (800aa94 <UARTEx_SetNbDataToProcess+0x94>)
 800aa50:	5c8a      	ldrb	r2, [r1, r2]
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa56:	7b3a      	ldrb	r2, [r7, #12]
 800aa58:	490f      	ldr	r1, [pc, #60]	@ (800aa98 <UARTEx_SetNbDataToProcess+0x98>)
 800aa5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	7b7a      	ldrb	r2, [r7, #13]
 800aa6c:	4909      	ldr	r1, [pc, #36]	@ (800aa94 <UARTEx_SetNbDataToProcess+0x94>)
 800aa6e:	5c8a      	ldrb	r2, [r1, r2]
 800aa70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa74:	7b7a      	ldrb	r2, [r7, #13]
 800aa76:	4908      	ldr	r1, [pc, #32]	@ (800aa98 <UARTEx_SetNbDataToProcess+0x98>)
 800aa78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	0800ab3c 	.word	0x0800ab3c
 800aa98:	0800ab44 	.word	0x0800ab44

0800aa9c <memset>:
 800aa9c:	4402      	add	r2, r0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d100      	bne.n	800aaa6 <memset+0xa>
 800aaa4:	4770      	bx	lr
 800aaa6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaaa:	e7f9      	b.n	800aaa0 <memset+0x4>

0800aaac <__libc_init_array>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4d0d      	ldr	r5, [pc, #52]	@ (800aae4 <__libc_init_array+0x38>)
 800aab0:	4c0d      	ldr	r4, [pc, #52]	@ (800aae8 <__libc_init_array+0x3c>)
 800aab2:	1b64      	subs	r4, r4, r5
 800aab4:	10a4      	asrs	r4, r4, #2
 800aab6:	2600      	movs	r6, #0
 800aab8:	42a6      	cmp	r6, r4
 800aaba:	d109      	bne.n	800aad0 <__libc_init_array+0x24>
 800aabc:	4d0b      	ldr	r5, [pc, #44]	@ (800aaec <__libc_init_array+0x40>)
 800aabe:	4c0c      	ldr	r4, [pc, #48]	@ (800aaf0 <__libc_init_array+0x44>)
 800aac0:	f000 f818 	bl	800aaf4 <_init>
 800aac4:	1b64      	subs	r4, r4, r5
 800aac6:	10a4      	asrs	r4, r4, #2
 800aac8:	2600      	movs	r6, #0
 800aaca:	42a6      	cmp	r6, r4
 800aacc:	d105      	bne.n	800aada <__libc_init_array+0x2e>
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad4:	4798      	blx	r3
 800aad6:	3601      	adds	r6, #1
 800aad8:	e7ee      	b.n	800aab8 <__libc_init_array+0xc>
 800aada:	f855 3b04 	ldr.w	r3, [r5], #4
 800aade:	4798      	blx	r3
 800aae0:	3601      	adds	r6, #1
 800aae2:	e7f2      	b.n	800aaca <__libc_init_array+0x1e>
 800aae4:	0800ab54 	.word	0x0800ab54
 800aae8:	0800ab54 	.word	0x0800ab54
 800aaec:	0800ab54 	.word	0x0800ab54
 800aaf0:	0800ab58 	.word	0x0800ab58

0800aaf4 <_init>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

0800ab00 <_fini>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	bf00      	nop
 800ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab06:	bc08      	pop	{r3}
 800ab08:	469e      	mov	lr, r3
 800ab0a:	4770      	bx	lr
